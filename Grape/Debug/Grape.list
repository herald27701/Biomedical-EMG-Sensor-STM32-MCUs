
Grape.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003818  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c50  08003c50  00013c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  20000000  08003c54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c4  200001dc  08003e30  000201dc  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200003a0  08003e30  000203a0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007f61  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000183a  00000000  00000000  00028166  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000798  00000000  00000000  000299a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000700  00000000  00000000  0002a138  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003d58  00000000  00000000  0002a838  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002611  00000000  00000000  0002e590  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00030ba1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002630  00000000  00000000  00030c20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001dc 	.word	0x200001dc
 8000200:	00000000 	.word	0x00000000
 8000204:	080039e4 	.word	0x080039e4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001e0 	.word	0x200001e0
 8000220:	080039e4 	.word	0x080039e4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000238:	4a08      	ldr	r2, [pc, #32]	; (800025c <HAL_Init+0x28>)
 800023a:	4b08      	ldr	r3, [pc, #32]	; (800025c <HAL_Init+0x28>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000244:	2003      	movs	r0, #3
 8000246:	f000 f943 	bl	80004d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800024a:	200f      	movs	r0, #15
 800024c:	f000 f808 	bl	8000260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000250:	f002 f90e 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000254:	2300      	movs	r3, #0
}
 8000256:	4618      	mov	r0, r3
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000268:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <HAL_InitTick+0x54>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <HAL_InitTick+0x58>)
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	4619      	mov	r1, r3
 8000272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000276:	fbb3 f3f1 	udiv	r3, r3, r1
 800027a:	fbb2 f3f3 	udiv	r3, r2, r3
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f95b 	bl	800053a <HAL_SYSTICK_Config>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800028a:	2301      	movs	r3, #1
 800028c:	e00e      	b.n	80002ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	2b0f      	cmp	r3, #15
 8000292:	d80a      	bhi.n	80002aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000294:	2200      	movs	r2, #0
 8000296:	6879      	ldr	r1, [r7, #4]
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 f923 	bl	80004e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002a0:	4a06      	ldr	r2, [pc, #24]	; (80002bc <HAL_InitTick+0x5c>)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80002a6:	2300      	movs	r3, #0
 80002a8:	e000      	b.n	80002ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80002aa:	2301      	movs	r3, #1
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	20000008 	.word	0x20000008
 80002b8:	20000004 	.word	0x20000004
 80002bc:	20000000 	.word	0x20000000

080002c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x1c>)
 80002c6:	781b      	ldrb	r3, [r3, #0]
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <HAL_IncTick+0x20>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4413      	add	r3, r2
 80002d0:	4a03      	ldr	r2, [pc, #12]	; (80002e0 <HAL_IncTick+0x20>)
 80002d2:	6013      	str	r3, [r2, #0]
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	20000004 	.word	0x20000004
 80002e0:	20000304 	.word	0x20000304

080002e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  return uwTick;
 80002e8:	4b02      	ldr	r3, [pc, #8]	; (80002f4 <HAL_GetTick+0x10>)
 80002ea:	681b      	ldr	r3, [r3, #0]
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bc80      	pop	{r7}
 80002f2:	4770      	bx	lr
 80002f4:	20000304 	.word	0x20000304

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff fff0 	bl	80002e4 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d005      	beq.n	800031e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	461a      	mov	r2, r3
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	4413      	add	r3, r2
 800031c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031e:	bf00      	nop
 8000320:	f7ff ffe0 	bl	80002e4 <HAL_GetTick>
 8000324:	4602      	mov	r2, r0
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	1ad2      	subs	r2, r2, r3
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	429a      	cmp	r2, r3
 800032e:	d3f7      	bcc.n	8000320 <HAL_Delay+0x28>
  {
  }
}
 8000330:	bf00      	nop
 8000332:	3710      	adds	r7, #16
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	20000004 	.word	0x20000004

0800033c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000358:	4013      	ands	r3, r2
 800035a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	60d3      	str	r3, [r2, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <__NVIC_GetPriorityGrouping+0x18>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	f003 0307 	and.w	r3, r3, #7
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db0b      	blt.n	80003ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003b2:	4908      	ldr	r1, [pc, #32]	; (80003d4 <__NVIC_EnableIRQ+0x34>)
 80003b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b8:	095b      	lsrs	r3, r3, #5
 80003ba:	79fa      	ldrb	r2, [r7, #7]
 80003bc:	f002 021f 	and.w	r2, r2, #31
 80003c0:	2001      	movs	r0, #1
 80003c2:	fa00 f202 	lsl.w	r2, r0, r2
 80003c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr
 80003d4:	e000e100 	.word	0xe000e100

080003d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	6039      	str	r1, [r7, #0]
 80003e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	db0a      	blt.n	8000402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ec:	490d      	ldr	r1, [pc, #52]	; (8000424 <__NVIC_SetPriority+0x4c>)
 80003ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	b2d2      	uxtb	r2, r2
 80003f6:	0112      	lsls	r2, r2, #4
 80003f8:	b2d2      	uxtb	r2, r2
 80003fa:	440b      	add	r3, r1
 80003fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000400:	e00a      	b.n	8000418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000402:	4909      	ldr	r1, [pc, #36]	; (8000428 <__NVIC_SetPriority+0x50>)
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	f003 030f 	and.w	r3, r3, #15
 800040a:	3b04      	subs	r3, #4
 800040c:	683a      	ldr	r2, [r7, #0]
 800040e:	b2d2      	uxtb	r2, r2
 8000410:	0112      	lsls	r2, r2, #4
 8000412:	b2d2      	uxtb	r2, r2
 8000414:	440b      	add	r3, r1
 8000416:	761a      	strb	r2, [r3, #24]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	bc80      	pop	{r7}
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	e000e100 	.word	0xe000e100
 8000428:	e000ed00 	.word	0xe000ed00

0800042c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800042c:	b480      	push	{r7}
 800042e:	b089      	sub	sp, #36	; 0x24
 8000430:	af00      	add	r7, sp, #0
 8000432:	60f8      	str	r0, [r7, #12]
 8000434:	60b9      	str	r1, [r7, #8]
 8000436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f003 0307 	and.w	r3, r3, #7
 800043e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000440:	69fb      	ldr	r3, [r7, #28]
 8000442:	f1c3 0307 	rsb	r3, r3, #7
 8000446:	2b04      	cmp	r3, #4
 8000448:	bf28      	it	cs
 800044a:	2304      	movcs	r3, #4
 800044c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	3304      	adds	r3, #4
 8000452:	2b06      	cmp	r3, #6
 8000454:	d902      	bls.n	800045c <NVIC_EncodePriority+0x30>
 8000456:	69fb      	ldr	r3, [r7, #28]
 8000458:	3b03      	subs	r3, #3
 800045a:	e000      	b.n	800045e <NVIC_EncodePriority+0x32>
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000460:	2201      	movs	r2, #1
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	fa02 f303 	lsl.w	r3, r2, r3
 8000468:	1e5a      	subs	r2, r3, #1
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	401a      	ands	r2, r3
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000472:	2101      	movs	r1, #1
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	fa01 f303 	lsl.w	r3, r1, r3
 800047a:	1e59      	subs	r1, r3, #1
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000480:	4313      	orrs	r3, r2
         );
}
 8000482:	4618      	mov	r0, r3
 8000484:	3724      	adds	r7, #36	; 0x24
 8000486:	46bd      	mov	sp, r7
 8000488:	bc80      	pop	{r7}
 800048a:	4770      	bx	lr

0800048c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3b01      	subs	r3, #1
 8000498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800049c:	d301      	bcc.n	80004a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800049e:	2301      	movs	r3, #1
 80004a0:	e00f      	b.n	80004c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004a2:	4a0a      	ldr	r2, [pc, #40]	; (80004cc <SysTick_Config+0x40>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004aa:	210f      	movs	r1, #15
 80004ac:	f04f 30ff 	mov.w	r0, #4294967295
 80004b0:	f7ff ff92 	bl	80003d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <SysTick_Config+0x40>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ba:	4b04      	ldr	r3, [pc, #16]	; (80004cc <SysTick_Config+0x40>)
 80004bc:	2207      	movs	r2, #7
 80004be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004c0:	2300      	movs	r3, #0
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3708      	adds	r7, #8
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	e000e010 	.word	0xe000e010

080004d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff ff2f 	bl	800033c <__NVIC_SetPriorityGrouping>
}
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}

080004e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004e6:	b580      	push	{r7, lr}
 80004e8:	b086      	sub	sp, #24
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	4603      	mov	r3, r0
 80004ee:	60b9      	str	r1, [r7, #8]
 80004f0:	607a      	str	r2, [r7, #4]
 80004f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004f8:	f7ff ff44 	bl	8000384 <__NVIC_GetPriorityGrouping>
 80004fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	68b9      	ldr	r1, [r7, #8]
 8000502:	6978      	ldr	r0, [r7, #20]
 8000504:	f7ff ff92 	bl	800042c <NVIC_EncodePriority>
 8000508:	4602      	mov	r2, r0
 800050a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f7ff ff61 	bl	80003d8 <__NVIC_SetPriority>
}
 8000516:	bf00      	nop
 8000518:	3718      	adds	r7, #24
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}

0800051e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	4603      	mov	r3, r0
 8000526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ff37 	bl	80003a0 <__NVIC_EnableIRQ>
}
 8000532:	bf00      	nop
 8000534:	3708      	adds	r7, #8
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f7ff ffa2 	bl	800048c <SysTick_Config>
 8000548:	4603      	mov	r3, r0
}
 800054a:	4618      	mov	r0, r3
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}

08000552 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000552:	b480      	push	{r7}
 8000554:	b085      	sub	sp, #20
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800055a:	2300      	movs	r3, #0
 800055c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000564:	2b02      	cmp	r3, #2
 8000566:	d008      	beq.n	800057a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2204      	movs	r2, #4
 800056c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2200      	movs	r2, #0
 8000572:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000576:	2301      	movs	r3, #1
 8000578:	e020      	b.n	80005bc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	6812      	ldr	r2, [r2, #0]
 8000582:	6812      	ldr	r2, [r2, #0]
 8000584:	f022 020e 	bic.w	r2, r2, #14
 8000588:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	6812      	ldr	r2, [r2, #0]
 8000592:	6812      	ldr	r2, [r2, #0]
 8000594:	f022 0201 	bic.w	r2, r2, #1
 8000598:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005a2:	2101      	movs	r1, #1
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2201      	movs	r2, #1
 80005ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2200      	movs	r2, #0
 80005b6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80005ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
	...

080005c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d005      	beq.n	80005ea <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2204      	movs	r2, #4
 80005e2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80005e4:	2301      	movs	r3, #1
 80005e6:	73fb      	strb	r3, [r7, #15]
 80005e8:	e0ec      	b.n	80007c4 <HAL_DMA_Abort_IT+0x1fc>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	6812      	ldr	r2, [r2, #0]
 80005f2:	6812      	ldr	r2, [r2, #0]
 80005f4:	f022 020e 	bic.w	r2, r2, #14
 80005f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	687a      	ldr	r2, [r7, #4]
 8000600:	6812      	ldr	r2, [r2, #0]
 8000602:	6812      	ldr	r2, [r2, #0]
 8000604:	f022 0201 	bic.w	r2, r2, #1
 8000608:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	461a      	mov	r2, r3
 8000610:	4b6f      	ldr	r3, [pc, #444]	; (80007d0 <HAL_DMA_Abort_IT+0x208>)
 8000612:	429a      	cmp	r2, r3
 8000614:	d963      	bls.n	80006de <HAL_DMA_Abort_IT+0x116>
 8000616:	4a6f      	ldr	r2, [pc, #444]	; (80007d4 <HAL_DMA_Abort_IT+0x20c>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	4b6e      	ldr	r3, [pc, #440]	; (80007d8 <HAL_DMA_Abort_IT+0x210>)
 8000620:	4299      	cmp	r1, r3
 8000622:	d059      	beq.n	80006d8 <HAL_DMA_Abort_IT+0x110>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4619      	mov	r1, r3
 800062a:	4b6c      	ldr	r3, [pc, #432]	; (80007dc <HAL_DMA_Abort_IT+0x214>)
 800062c:	4299      	cmp	r1, r3
 800062e:	d051      	beq.n	80006d4 <HAL_DMA_Abort_IT+0x10c>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4619      	mov	r1, r3
 8000636:	4b6a      	ldr	r3, [pc, #424]	; (80007e0 <HAL_DMA_Abort_IT+0x218>)
 8000638:	4299      	cmp	r1, r3
 800063a:	d048      	beq.n	80006ce <HAL_DMA_Abort_IT+0x106>
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4619      	mov	r1, r3
 8000642:	4b68      	ldr	r3, [pc, #416]	; (80007e4 <HAL_DMA_Abort_IT+0x21c>)
 8000644:	4299      	cmp	r1, r3
 8000646:	d03f      	beq.n	80006c8 <HAL_DMA_Abort_IT+0x100>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4619      	mov	r1, r3
 800064e:	4b66      	ldr	r3, [pc, #408]	; (80007e8 <HAL_DMA_Abort_IT+0x220>)
 8000650:	4299      	cmp	r1, r3
 8000652:	d036      	beq.n	80006c2 <HAL_DMA_Abort_IT+0xfa>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	4b64      	ldr	r3, [pc, #400]	; (80007ec <HAL_DMA_Abort_IT+0x224>)
 800065c:	4299      	cmp	r1, r3
 800065e:	d02d      	beq.n	80006bc <HAL_DMA_Abort_IT+0xf4>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4619      	mov	r1, r3
 8000666:	4b5a      	ldr	r3, [pc, #360]	; (80007d0 <HAL_DMA_Abort_IT+0x208>)
 8000668:	4299      	cmp	r1, r3
 800066a:	d024      	beq.n	80006b6 <HAL_DMA_Abort_IT+0xee>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	4b5f      	ldr	r3, [pc, #380]	; (80007f0 <HAL_DMA_Abort_IT+0x228>)
 8000674:	4299      	cmp	r1, r3
 8000676:	d01c      	beq.n	80006b2 <HAL_DMA_Abort_IT+0xea>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4619      	mov	r1, r3
 800067e:	4b5d      	ldr	r3, [pc, #372]	; (80007f4 <HAL_DMA_Abort_IT+0x22c>)
 8000680:	4299      	cmp	r1, r3
 8000682:	d014      	beq.n	80006ae <HAL_DMA_Abort_IT+0xe6>
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4619      	mov	r1, r3
 800068a:	4b5b      	ldr	r3, [pc, #364]	; (80007f8 <HAL_DMA_Abort_IT+0x230>)
 800068c:	4299      	cmp	r1, r3
 800068e:	d00b      	beq.n	80006a8 <HAL_DMA_Abort_IT+0xe0>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	4b59      	ldr	r3, [pc, #356]	; (80007fc <HAL_DMA_Abort_IT+0x234>)
 8000698:	4299      	cmp	r1, r3
 800069a:	d102      	bne.n	80006a2 <HAL_DMA_Abort_IT+0xda>
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	e01b      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a6:	e018      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ac:	e015      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006ae:	2310      	movs	r3, #16
 80006b0:	e013      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006b2:	2301      	movs	r3, #1
 80006b4:	e011      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006ba:	e00e      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006c0:	e00b      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c6:	e008      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006cc:	e005      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d2:	e002      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006d4:	2310      	movs	r3, #16
 80006d6:	e000      	b.n	80006da <HAL_DMA_Abort_IT+0x112>
 80006d8:	2301      	movs	r3, #1
 80006da:	6053      	str	r3, [r2, #4]
 80006dc:	e062      	b.n	80007a4 <HAL_DMA_Abort_IT+0x1dc>
 80006de:	4a48      	ldr	r2, [pc, #288]	; (8000800 <HAL_DMA_Abort_IT+0x238>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4619      	mov	r1, r3
 80006e6:	4b3c      	ldr	r3, [pc, #240]	; (80007d8 <HAL_DMA_Abort_IT+0x210>)
 80006e8:	4299      	cmp	r1, r3
 80006ea:	d059      	beq.n	80007a0 <HAL_DMA_Abort_IT+0x1d8>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4619      	mov	r1, r3
 80006f2:	4b3a      	ldr	r3, [pc, #232]	; (80007dc <HAL_DMA_Abort_IT+0x214>)
 80006f4:	4299      	cmp	r1, r3
 80006f6:	d051      	beq.n	800079c <HAL_DMA_Abort_IT+0x1d4>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4619      	mov	r1, r3
 80006fe:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <HAL_DMA_Abort_IT+0x218>)
 8000700:	4299      	cmp	r1, r3
 8000702:	d048      	beq.n	8000796 <HAL_DMA_Abort_IT+0x1ce>
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	4b36      	ldr	r3, [pc, #216]	; (80007e4 <HAL_DMA_Abort_IT+0x21c>)
 800070c:	4299      	cmp	r1, r3
 800070e:	d03f      	beq.n	8000790 <HAL_DMA_Abort_IT+0x1c8>
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4619      	mov	r1, r3
 8000716:	4b34      	ldr	r3, [pc, #208]	; (80007e8 <HAL_DMA_Abort_IT+0x220>)
 8000718:	4299      	cmp	r1, r3
 800071a:	d036      	beq.n	800078a <HAL_DMA_Abort_IT+0x1c2>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4619      	mov	r1, r3
 8000722:	4b32      	ldr	r3, [pc, #200]	; (80007ec <HAL_DMA_Abort_IT+0x224>)
 8000724:	4299      	cmp	r1, r3
 8000726:	d02d      	beq.n	8000784 <HAL_DMA_Abort_IT+0x1bc>
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <HAL_DMA_Abort_IT+0x208>)
 8000730:	4299      	cmp	r1, r3
 8000732:	d024      	beq.n	800077e <HAL_DMA_Abort_IT+0x1b6>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	4b2d      	ldr	r3, [pc, #180]	; (80007f0 <HAL_DMA_Abort_IT+0x228>)
 800073c:	4299      	cmp	r1, r3
 800073e:	d01c      	beq.n	800077a <HAL_DMA_Abort_IT+0x1b2>
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	4b2b      	ldr	r3, [pc, #172]	; (80007f4 <HAL_DMA_Abort_IT+0x22c>)
 8000748:	4299      	cmp	r1, r3
 800074a:	d014      	beq.n	8000776 <HAL_DMA_Abort_IT+0x1ae>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <HAL_DMA_Abort_IT+0x230>)
 8000754:	4299      	cmp	r1, r3
 8000756:	d00b      	beq.n	8000770 <HAL_DMA_Abort_IT+0x1a8>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4619      	mov	r1, r3
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <HAL_DMA_Abort_IT+0x234>)
 8000760:	4299      	cmp	r1, r3
 8000762:	d102      	bne.n	800076a <HAL_DMA_Abort_IT+0x1a2>
 8000764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000768:	e01b      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 800076a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800076e:	e018      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 8000770:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000774:	e015      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 8000776:	2310      	movs	r3, #16
 8000778:	e013      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 800077a:	2301      	movs	r3, #1
 800077c:	e011      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 800077e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000782:	e00e      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 8000784:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000788:	e00b      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 800078a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078e:	e008      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 8000790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000794:	e005      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 8000796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079a:	e002      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 800079c:	2310      	movs	r3, #16
 800079e:	e000      	b.n	80007a2 <HAL_DMA_Abort_IT+0x1da>
 80007a0:	2301      	movs	r3, #1
 80007a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2201      	movs	r2, #1
 80007a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d003      	beq.n	80007c4 <HAL_DMA_Abort_IT+0x1fc>
    {
      hdma->XferAbortCallback(hdma);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	4798      	blx	r3
    } 
  }
  return status;
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020080 	.word	0x40020080
 80007d4:	40020400 	.word	0x40020400
 80007d8:	40020008 	.word	0x40020008
 80007dc:	4002001c 	.word	0x4002001c
 80007e0:	40020030 	.word	0x40020030
 80007e4:	40020044 	.word	0x40020044
 80007e8:	40020058 	.word	0x40020058
 80007ec:	4002006c 	.word	0x4002006c
 80007f0:	40020408 	.word	0x40020408
 80007f4:	4002041c 	.word	0x4002041c
 80007f8:	40020430 	.word	0x40020430
 80007fc:	40020444 	.word	0x40020444
 8000800:	40020000 	.word	0x40020000

08000804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000804:	b480      	push	{r7}
 8000806:	b08b      	sub	sp, #44	; 0x2c
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000816:	e133      	b.n	8000a80 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000818:	2201      	movs	r2, #1
 800081a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	4013      	ands	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	429a      	cmp	r2, r3
 8000832:	f040 8122 	bne.w	8000a7a <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2b12      	cmp	r3, #18
 800083c:	d034      	beq.n	80008a8 <HAL_GPIO_Init+0xa4>
 800083e:	2b12      	cmp	r3, #18
 8000840:	d80d      	bhi.n	800085e <HAL_GPIO_Init+0x5a>
 8000842:	2b02      	cmp	r3, #2
 8000844:	d02b      	beq.n	800089e <HAL_GPIO_Init+0x9a>
 8000846:	2b02      	cmp	r3, #2
 8000848:	d804      	bhi.n	8000854 <HAL_GPIO_Init+0x50>
 800084a:	2b00      	cmp	r3, #0
 800084c:	d031      	beq.n	80008b2 <HAL_GPIO_Init+0xae>
 800084e:	2b01      	cmp	r3, #1
 8000850:	d01c      	beq.n	800088c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000852:	e048      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000854:	2b03      	cmp	r3, #3
 8000856:	d043      	beq.n	80008e0 <HAL_GPIO_Init+0xdc>
 8000858:	2b11      	cmp	r3, #17
 800085a:	d01b      	beq.n	8000894 <HAL_GPIO_Init+0x90>
          break;
 800085c:	e043      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800085e:	4a8f      	ldr	r2, [pc, #572]	; (8000a9c <HAL_GPIO_Init+0x298>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d026      	beq.n	80008b2 <HAL_GPIO_Init+0xae>
 8000864:	4a8d      	ldr	r2, [pc, #564]	; (8000a9c <HAL_GPIO_Init+0x298>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d806      	bhi.n	8000878 <HAL_GPIO_Init+0x74>
 800086a:	4a8d      	ldr	r2, [pc, #564]	; (8000aa0 <HAL_GPIO_Init+0x29c>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d020      	beq.n	80008b2 <HAL_GPIO_Init+0xae>
 8000870:	4a8c      	ldr	r2, [pc, #560]	; (8000aa4 <HAL_GPIO_Init+0x2a0>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d01d      	beq.n	80008b2 <HAL_GPIO_Init+0xae>
          break;
 8000876:	e036      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000878:	4a8b      	ldr	r2, [pc, #556]	; (8000aa8 <HAL_GPIO_Init+0x2a4>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d019      	beq.n	80008b2 <HAL_GPIO_Init+0xae>
 800087e:	4a8b      	ldr	r2, [pc, #556]	; (8000aac <HAL_GPIO_Init+0x2a8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d016      	beq.n	80008b2 <HAL_GPIO_Init+0xae>
 8000884:	4a8a      	ldr	r2, [pc, #552]	; (8000ab0 <HAL_GPIO_Init+0x2ac>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d013      	beq.n	80008b2 <HAL_GPIO_Init+0xae>
          break;
 800088a:	e02c      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	623b      	str	r3, [r7, #32]
          break;
 8000892:	e028      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	3304      	adds	r3, #4
 800089a:	623b      	str	r3, [r7, #32]
          break;
 800089c:	e023      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	3308      	adds	r3, #8
 80008a4:	623b      	str	r3, [r7, #32]
          break;
 80008a6:	e01e      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	330c      	adds	r3, #12
 80008ae:	623b      	str	r3, [r7, #32]
          break;
 80008b0:	e019      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d102      	bne.n	80008c0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ba:	2304      	movs	r3, #4
 80008bc:	623b      	str	r3, [r7, #32]
          break;
 80008be:	e012      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d105      	bne.n	80008d4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008c8:	2308      	movs	r3, #8
 80008ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	69fa      	ldr	r2, [r7, #28]
 80008d0:	611a      	str	r2, [r3, #16]
          break;
 80008d2:	e008      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008d4:	2308      	movs	r3, #8
 80008d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	69fa      	ldr	r2, [r7, #28]
 80008dc:	615a      	str	r2, [r3, #20]
          break;
 80008de:	e002      	b.n	80008e6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
          break;
 80008e4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	2bff      	cmp	r3, #255	; 0xff
 80008ea:	d801      	bhi.n	80008f0 <HAL_GPIO_Init+0xec>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	e001      	b.n	80008f4 <HAL_GPIO_Init+0xf0>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3304      	adds	r3, #4
 80008f4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	2bff      	cmp	r3, #255	; 0xff
 80008fa:	d802      	bhi.n	8000902 <HAL_GPIO_Init+0xfe>
 80008fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	e002      	b.n	8000908 <HAL_GPIO_Init+0x104>
 8000902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000904:	3b08      	subs	r3, #8
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	210f      	movs	r1, #15
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	401a      	ands	r2, r3
 800091a:	6a39      	ldr	r1, [r7, #32]
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	fa01 f303 	lsl.w	r3, r1, r3
 8000922:	431a      	orrs	r2, r3
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000930:	2b00      	cmp	r3, #0
 8000932:	f000 80a2 	beq.w	8000a7a <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000936:	4a5f      	ldr	r2, [pc, #380]	; (8000ab4 <HAL_GPIO_Init+0x2b0>)
 8000938:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <HAL_GPIO_Init+0x2b0>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6193      	str	r3, [r2, #24]
 8000942:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <HAL_GPIO_Init+0x2b0>)
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800094e:	4a5a      	ldr	r2, [pc, #360]	; (8000ab8 <HAL_GPIO_Init+0x2b4>)
 8000950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000952:	089b      	lsrs	r3, r3, #2
 8000954:	3302      	adds	r3, #2
 8000956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	f003 0303 	and.w	r3, r3, #3
 8000962:	009b      	lsls	r3, r3, #2
 8000964:	220f      	movs	r2, #15
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43db      	mvns	r3, r3
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	4013      	ands	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a51      	ldr	r2, [pc, #324]	; (8000abc <HAL_GPIO_Init+0x2b8>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d01f      	beq.n	80009ba <HAL_GPIO_Init+0x1b6>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a50      	ldr	r2, [pc, #320]	; (8000ac0 <HAL_GPIO_Init+0x2bc>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d019      	beq.n	80009b6 <HAL_GPIO_Init+0x1b2>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a4f      	ldr	r2, [pc, #316]	; (8000ac4 <HAL_GPIO_Init+0x2c0>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d013      	beq.n	80009b2 <HAL_GPIO_Init+0x1ae>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a4e      	ldr	r2, [pc, #312]	; (8000ac8 <HAL_GPIO_Init+0x2c4>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d00d      	beq.n	80009ae <HAL_GPIO_Init+0x1aa>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a4d      	ldr	r2, [pc, #308]	; (8000acc <HAL_GPIO_Init+0x2c8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d007      	beq.n	80009aa <HAL_GPIO_Init+0x1a6>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a4c      	ldr	r2, [pc, #304]	; (8000ad0 <HAL_GPIO_Init+0x2cc>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d101      	bne.n	80009a6 <HAL_GPIO_Init+0x1a2>
 80009a2:	2305      	movs	r3, #5
 80009a4:	e00a      	b.n	80009bc <HAL_GPIO_Init+0x1b8>
 80009a6:	2306      	movs	r3, #6
 80009a8:	e008      	b.n	80009bc <HAL_GPIO_Init+0x1b8>
 80009aa:	2304      	movs	r3, #4
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x1b8>
 80009ae:	2303      	movs	r3, #3
 80009b0:	e004      	b.n	80009bc <HAL_GPIO_Init+0x1b8>
 80009b2:	2302      	movs	r3, #2
 80009b4:	e002      	b.n	80009bc <HAL_GPIO_Init+0x1b8>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <HAL_GPIO_Init+0x1b8>
 80009ba:	2300      	movs	r3, #0
 80009bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009be:	f002 0203 	and.w	r2, r2, #3
 80009c2:	0092      	lsls	r2, r2, #2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009cc:	493a      	ldr	r1, [pc, #232]	; (8000ab8 <HAL_GPIO_Init+0x2b4>)
 80009ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d0:	089b      	lsrs	r3, r3, #2
 80009d2:	3302      	adds	r3, #2
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d006      	beq.n	80009f4 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009e6:	493b      	ldr	r1, [pc, #236]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 80009e8:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	69bb      	ldr	r3, [r7, #24]
 80009ee:	4313      	orrs	r3, r2
 80009f0:	600b      	str	r3, [r1, #0]
 80009f2:	e006      	b.n	8000a02 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009f4:	4937      	ldr	r1, [pc, #220]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	43db      	mvns	r3, r3
 80009fe:	4013      	ands	r3, r2
 8000a00:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a0e:	4931      	ldr	r1, [pc, #196]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a10:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	604b      	str	r3, [r1, #4]
 8000a1a:	e006      	b.n	8000a2a <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a1c:	492d      	ldr	r1, [pc, #180]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	43db      	mvns	r3, r3
 8000a26:	4013      	ands	r3, r2
 8000a28:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a36:	4927      	ldr	r1, [pc, #156]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a38:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	608b      	str	r3, [r1, #8]
 8000a42:	e006      	b.n	8000a52 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a44:	4923      	ldr	r1, [pc, #140]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a46:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	43db      	mvns	r3, r3
 8000a4e:	4013      	ands	r3, r2
 8000a50:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a5e:	491d      	ldr	r1, [pc, #116]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a62:	68da      	ldr	r2, [r3, #12]
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	60cb      	str	r3, [r1, #12]
 8000a6a:	e006      	b.n	8000a7a <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a6c:	4919      	ldr	r1, [pc, #100]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	4b19      	ldr	r3, [pc, #100]	; (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a70:	68da      	ldr	r2, [r3, #12]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	4013      	ands	r3, r2
 8000a78:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	fa22 f303 	lsr.w	r3, r2, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	f47f aec4 	bne.w	8000818 <HAL_GPIO_Init+0x14>
  }
}
 8000a90:	bf00      	nop
 8000a92:	372c      	adds	r7, #44	; 0x2c
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	10210000 	.word	0x10210000
 8000aa0:	10110000 	.word	0x10110000
 8000aa4:	10120000 	.word	0x10120000
 8000aa8:	10310000 	.word	0x10310000
 8000aac:	10320000 	.word	0x10320000
 8000ab0:	10220000 	.word	0x10220000
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	40010000 	.word	0x40010000
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40011400 	.word	0x40011400
 8000acc:	40011800 	.word	0x40011800
 8000ad0:	40011c00 	.word	0x40011c00
 8000ad4:	40010400 	.word	0x40010400

08000ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	807b      	strh	r3, [r7, #2]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ae8:	787b      	ldrb	r3, [r7, #1]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000aee:	887a      	ldrh	r2, [r7, #2]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000af4:	e003      	b.n	8000afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000af6:	887b      	ldrh	r3, [r7, #2]
 8000af8:	041a      	lsls	r2, r3, #16
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	611a      	str	r2, [r3, #16]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr

08000b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	e26c      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 8087 	beq.w	8000c36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b28:	4b92      	ldr	r3, [pc, #584]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f003 030c 	and.w	r3, r3, #12
 8000b30:	2b04      	cmp	r3, #4
 8000b32:	d00c      	beq.n	8000b4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b34:	4b8f      	ldr	r3, [pc, #572]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f003 030c 	and.w	r3, r3, #12
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	d112      	bne.n	8000b66 <HAL_RCC_OscConfig+0x5e>
 8000b40:	4b8c      	ldr	r3, [pc, #560]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b4c:	d10b      	bne.n	8000b66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b4e:	4b89      	ldr	r3, [pc, #548]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d06c      	beq.n	8000c34 <HAL_RCC_OscConfig+0x12c>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d168      	bne.n	8000c34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e246      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b6e:	d106      	bne.n	8000b7e <HAL_RCC_OscConfig+0x76>
 8000b70:	4a80      	ldr	r2, [pc, #512]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000b72:	4b80      	ldr	r3, [pc, #512]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	e02e      	b.n	8000bdc <HAL_RCC_OscConfig+0xd4>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d10c      	bne.n	8000ba0 <HAL_RCC_OscConfig+0x98>
 8000b86:	4a7b      	ldr	r2, [pc, #492]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000b88:	4b7a      	ldr	r3, [pc, #488]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	4a78      	ldr	r2, [pc, #480]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000b94:	4b77      	ldr	r3, [pc, #476]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b9c:	6013      	str	r3, [r2, #0]
 8000b9e:	e01d      	b.n	8000bdc <HAL_RCC_OscConfig+0xd4>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ba8:	d10c      	bne.n	8000bc4 <HAL_RCC_OscConfig+0xbc>
 8000baa:	4a72      	ldr	r2, [pc, #456]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	4b71      	ldr	r3, [pc, #452]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	4a6f      	ldr	r2, [pc, #444]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	4b6e      	ldr	r3, [pc, #440]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e00b      	b.n	8000bdc <HAL_RCC_OscConfig+0xd4>
 8000bc4:	4a6b      	ldr	r2, [pc, #428]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	4b6b      	ldr	r3, [pc, #428]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4a68      	ldr	r2, [pc, #416]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000bd2:	4b68      	ldr	r3, [pc, #416]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d013      	beq.n	8000c0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be4:	f7ff fb7e 	bl	80002e4 <HAL_GetTick>
 8000be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bec:	f7ff fb7a 	bl	80002e4 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b64      	cmp	r3, #100	; 0x64
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e1fa      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bfe:	4b5d      	ldr	r3, [pc, #372]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d0f0      	beq.n	8000bec <HAL_RCC_OscConfig+0xe4>
 8000c0a:	e014      	b.n	8000c36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fb6a 	bl	80002e4 <HAL_GetTick>
 8000c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c12:	e008      	b.n	8000c26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c14:	f7ff fb66 	bl	80002e4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b64      	cmp	r3, #100	; 0x64
 8000c20:	d901      	bls.n	8000c26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e1e6      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c26:	4b53      	ldr	r3, [pc, #332]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1f0      	bne.n	8000c14 <HAL_RCC_OscConfig+0x10c>
 8000c32:	e000      	b.n	8000c36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d063      	beq.n	8000d0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c42:	4b4c      	ldr	r3, [pc, #304]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 030c 	and.w	r3, r3, #12
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d00b      	beq.n	8000c66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c4e:	4b49      	ldr	r3, [pc, #292]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 030c 	and.w	r3, r3, #12
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d11c      	bne.n	8000c94 <HAL_RCC_OscConfig+0x18c>
 8000c5a:	4b46      	ldr	r3, [pc, #280]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d116      	bne.n	8000c94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c66:	4b43      	ldr	r3, [pc, #268]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <HAL_RCC_OscConfig+0x176>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	691b      	ldr	r3, [r3, #16]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d001      	beq.n	8000c7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e1ba      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c7e:	493d      	ldr	r1, [pc, #244]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	4b3c      	ldr	r3, [pc, #240]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c92:	e03a      	b.n	8000d0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d020      	beq.n	8000cde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c9c:	4b36      	ldr	r3, [pc, #216]	; (8000d78 <HAL_RCC_OscConfig+0x270>)
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca2:	f7ff fb1f 	bl	80002e4 <HAL_GetTick>
 8000ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca8:	e008      	b.n	8000cbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000caa:	f7ff fb1b 	bl	80002e4 <HAL_GetTick>
 8000cae:	4602      	mov	r2, r0
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d901      	bls.n	8000cbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	e19b      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d0f0      	beq.n	8000caa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc8:	492a      	ldr	r1, [pc, #168]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000cca:	4b2a      	ldr	r3, [pc, #168]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	600b      	str	r3, [r1, #0]
 8000cdc:	e015      	b.n	8000d0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <HAL_RCC_OscConfig+0x270>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce4:	f7ff fafe 	bl	80002e4 <HAL_GetTick>
 8000ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cea:	e008      	b.n	8000cfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cec:	f7ff fafa 	bl	80002e4 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d901      	bls.n	8000cfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	e17a      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1f0      	bne.n	8000cec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0308 	and.w	r3, r3, #8
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d03a      	beq.n	8000d8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d019      	beq.n	8000d52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <HAL_RCC_OscConfig+0x274>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d24:	f7ff fade 	bl	80002e4 <HAL_GetTick>
 8000d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d2a:	e008      	b.n	8000d3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d2c:	f7ff fada 	bl	80002e4 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d901      	bls.n	8000d3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	e15a      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d3e:	4b0d      	ldr	r3, [pc, #52]	; (8000d74 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f0      	beq.n	8000d2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f000 fada 	bl	8001304 <RCC_Delay>
 8000d50:	e01c      	b.n	8000d8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d52:	4b0a      	ldr	r3, [pc, #40]	; (8000d7c <HAL_RCC_OscConfig+0x274>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d58:	f7ff fac4 	bl	80002e4 <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5e:	e00f      	b.n	8000d80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d60:	f7ff fac0 	bl	80002e4 <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d908      	bls.n	8000d80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e140      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
 8000d72:	bf00      	nop
 8000d74:	40021000 	.word	0x40021000
 8000d78:	42420000 	.word	0x42420000
 8000d7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d80:	4b9e      	ldr	r3, [pc, #632]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d84:	f003 0302 	and.w	r3, r3, #2
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1e9      	bne.n	8000d60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0304 	and.w	r3, r3, #4
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80a6 	beq.w	8000ee6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d9e:	4b97      	ldr	r3, [pc, #604]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d10d      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	4a94      	ldr	r2, [pc, #592]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000dac:	4b93      	ldr	r3, [pc, #588]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b91      	ldr	r3, [pc, #580]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000db8:	69db      	ldr	r3, [r3, #28]
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc6:	4b8e      	ldr	r3, [pc, #568]	; (8001000 <HAL_RCC_OscConfig+0x4f8>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d118      	bne.n	8000e04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dd2:	4a8b      	ldr	r2, [pc, #556]	; (8001000 <HAL_RCC_OscConfig+0x4f8>)
 8000dd4:	4b8a      	ldr	r3, [pc, #552]	; (8001000 <HAL_RCC_OscConfig+0x4f8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dde:	f7ff fa81 	bl	80002e4 <HAL_GetTick>
 8000de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de4:	e008      	b.n	8000df8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000de6:	f7ff fa7d 	bl	80002e4 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	2b64      	cmp	r3, #100	; 0x64
 8000df2:	d901      	bls.n	8000df8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000df4:	2303      	movs	r3, #3
 8000df6:	e0fd      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000df8:	4b81      	ldr	r3, [pc, #516]	; (8001000 <HAL_RCC_OscConfig+0x4f8>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d0f0      	beq.n	8000de6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d106      	bne.n	8000e1a <HAL_RCC_OscConfig+0x312>
 8000e0c:	4a7b      	ldr	r2, [pc, #492]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e0e:	4b7b      	ldr	r3, [pc, #492]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e10:	6a1b      	ldr	r3, [r3, #32]
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	6213      	str	r3, [r2, #32]
 8000e18:	e02d      	b.n	8000e76 <HAL_RCC_OscConfig+0x36e>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	68db      	ldr	r3, [r3, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d10c      	bne.n	8000e3c <HAL_RCC_OscConfig+0x334>
 8000e22:	4a76      	ldr	r2, [pc, #472]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e24:	4b75      	ldr	r3, [pc, #468]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e26:	6a1b      	ldr	r3, [r3, #32]
 8000e28:	f023 0301 	bic.w	r3, r3, #1
 8000e2c:	6213      	str	r3, [r2, #32]
 8000e2e:	4a73      	ldr	r2, [pc, #460]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e30:	4b72      	ldr	r3, [pc, #456]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	f023 0304 	bic.w	r3, r3, #4
 8000e38:	6213      	str	r3, [r2, #32]
 8000e3a:	e01c      	b.n	8000e76 <HAL_RCC_OscConfig+0x36e>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d10c      	bne.n	8000e5e <HAL_RCC_OscConfig+0x356>
 8000e44:	4a6d      	ldr	r2, [pc, #436]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e46:	4b6d      	ldr	r3, [pc, #436]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6213      	str	r3, [r2, #32]
 8000e50:	4a6a      	ldr	r2, [pc, #424]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e52:	4b6a      	ldr	r3, [pc, #424]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6213      	str	r3, [r2, #32]
 8000e5c:	e00b      	b.n	8000e76 <HAL_RCC_OscConfig+0x36e>
 8000e5e:	4a67      	ldr	r2, [pc, #412]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e60:	4b66      	ldr	r3, [pc, #408]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	6213      	str	r3, [r2, #32]
 8000e6a:	4a64      	ldr	r2, [pc, #400]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e6c:	4b63      	ldr	r3, [pc, #396]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e6e:	6a1b      	ldr	r3, [r3, #32]
 8000e70:	f023 0304 	bic.w	r3, r3, #4
 8000e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d015      	beq.n	8000eaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7e:	f7ff fa31 	bl	80002e4 <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e84:	e00a      	b.n	8000e9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e86:	f7ff fa2d 	bl	80002e4 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e0ab      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e9c:	4b57      	ldr	r3, [pc, #348]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0ee      	beq.n	8000e86 <HAL_RCC_OscConfig+0x37e>
 8000ea8:	e014      	b.n	8000ed4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fa1b 	bl	80002e4 <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eb0:	e00a      	b.n	8000ec8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eb2:	f7ff fa17 	bl	80002e4 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d901      	bls.n	8000ec8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e095      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec8:	4b4c      	ldr	r3, [pc, #304]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	f003 0302 	and.w	r3, r3, #2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1ee      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ed4:	7dfb      	ldrb	r3, [r7, #23]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d105      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000eda:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000edc:	4b47      	ldr	r3, [pc, #284]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8081 	beq.w	8000ff2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ef0:	4b42      	ldr	r3, [pc, #264]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 030c 	and.w	r3, r3, #12
 8000ef8:	2b08      	cmp	r3, #8
 8000efa:	d061      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d146      	bne.n	8000f92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f04:	4b3f      	ldr	r3, [pc, #252]	; (8001004 <HAL_RCC_OscConfig+0x4fc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff f9eb 	bl	80002e4 <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f12:	f7ff f9e7 	bl	80002e4 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e067      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f24:	4b35      	ldr	r3, [pc, #212]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f0      	bne.n	8000f12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f38:	d108      	bne.n	8000f4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f3a:	4930      	ldr	r1, [pc, #192]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000f3c:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f4c:	482b      	ldr	r0, [pc, #172]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a19      	ldr	r1, [r3, #32]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5e:	430b      	orrs	r3, r1
 8000f60:	4313      	orrs	r3, r2
 8000f62:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f64:	4b27      	ldr	r3, [pc, #156]	; (8001004 <HAL_RCC_OscConfig+0x4fc>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f6a:	f7ff f9bb 	bl	80002e4 <HAL_GetTick>
 8000f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f70:	e008      	b.n	8000f84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff f9b7 	bl	80002e4 <HAL_GetTick>
 8000f76:	4602      	mov	r2, r0
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	2b02      	cmp	r3, #2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e037      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f84:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d0f0      	beq.n	8000f72 <HAL_RCC_OscConfig+0x46a>
 8000f90:	e02f      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_RCC_OscConfig+0x4fc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff f9a4 	bl	80002e4 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fa0:	f7ff f9a0 	bl	80002e4 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e020      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fb2:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1f0      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x498>
 8000fbe:	e018      	b.n	8000ff2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e013      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_RCC_OscConfig+0x4f4>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a1b      	ldr	r3, [r3, #32]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d106      	bne.n	8000fee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d001      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40007000 	.word	0x40007000
 8001004:	42420060 	.word	0x42420060

08001008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e0d0      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800101c:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0207 	and.w	r2, r3, #7
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d210      	bcs.n	800104c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800102a:	4967      	ldr	r1, [pc, #412]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	4b66      	ldr	r3, [pc, #408]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f023 0207 	bic.w	r2, r3, #7
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	4313      	orrs	r3, r2
 8001038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0207 	and.w	r2, r3, #7
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0b8      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001064:	4a59      	ldr	r2, [pc, #356]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001066:	4b59      	ldr	r3, [pc, #356]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800106e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800107c:	4a53      	ldr	r2, [pc, #332]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	4b53      	ldr	r3, [pc, #332]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001088:	4950      	ldr	r1, [pc, #320]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	4b50      	ldr	r3, [pc, #320]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	4313      	orrs	r3, r2
 8001098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d040      	beq.n	8001128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b47      	ldr	r3, [pc, #284]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d115      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e07f      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d107      	bne.n	80010d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c6:	4b41      	ldr	r3, [pc, #260]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e073      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0302 	and.w	r3, r3, #2
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e06b      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e6:	4939      	ldr	r1, [pc, #228]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010e8:	4b38      	ldr	r3, [pc, #224]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f023 0203 	bic.w	r2, r3, #3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f8:	f7ff f8f4 	bl	80002e4 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	e00a      	b.n	8001116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001100:	f7ff f8f0 	bl	80002e4 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f241 3288 	movw	r2, #5000	; 0x1388
 800110e:	4293      	cmp	r3, r2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e053      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f003 020c 	and.w	r2, r3, #12
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	429a      	cmp	r2, r3
 8001126:	d1eb      	bne.n	8001100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001128:	4b27      	ldr	r3, [pc, #156]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0207 	and.w	r2, r3, #7
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	429a      	cmp	r2, r3
 8001134:	d910      	bls.n	8001158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001136:	4924      	ldr	r1, [pc, #144]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001138:	4b23      	ldr	r3, [pc, #140]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 0207 	bic.w	r2, r3, #7
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	4313      	orrs	r3, r2
 8001144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_RCC_ClockConfig+0x1c0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0207 	and.w	r2, r3, #7
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e032      	b.n	80011be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001164:	4919      	ldr	r1, [pc, #100]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001182:	4912      	ldr	r1, [pc, #72]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	691b      	ldr	r3, [r3, #16]
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4313      	orrs	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001196:	f000 f821 	bl	80011dc <HAL_RCC_GetSysClockFreq>
 800119a:	4601      	mov	r1, r0
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_RCC_ClockConfig+0x1c4>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_RCC_ClockConfig+0x1c8>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	fa21 f303 	lsr.w	r3, r1, r3
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_RCC_ClockConfig+0x1cc>)
 80011b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_RCC_ClockConfig+0x1d0>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f852 	bl	8000260 <HAL_InitTick>

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40022000 	.word	0x40022000
 80011cc:	40021000 	.word	0x40021000
 80011d0:	08003a78 	.word	0x08003a78
 80011d4:	20000008 	.word	0x20000008
 80011d8:	20000000 	.word	0x20000000

080011dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011dc:	b490      	push	{r4, r7}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <HAL_RCC_GetSysClockFreq+0xb0>)
 80011e4:	1d3c      	adds	r4, r7, #4
 80011e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <HAL_RCC_GetSysClockFreq+0xb4>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001206:	4b23      	ldr	r3, [pc, #140]	; (8001294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b04      	cmp	r3, #4
 8001214:	d002      	beq.n	800121c <HAL_RCC_GetSysClockFreq+0x40>
 8001216:	2b08      	cmp	r3, #8
 8001218:	d003      	beq.n	8001222 <HAL_RCC_GetSysClockFreq+0x46>
 800121a:	e02d      	b.n	8001278 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800121e:	623b      	str	r3, [r7, #32]
      break;
 8001220:	e02d      	b.n	800127e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	0c9b      	lsrs	r3, r3, #18
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800122e:	4413      	add	r3, r2
 8001230:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001234:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	0c5b      	lsrs	r3, r3, #17
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800124e:	4413      	add	r3, r2
 8001250:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001254:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	4a0f      	ldr	r2, [pc, #60]	; (8001298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800125a:	fb02 f203 	mul.w	r2, r2, r3
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	fbb2 f3f3 	udiv	r3, r2, r3
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
 8001266:	e004      	b.n	8001272 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <HAL_RCC_GetSysClockFreq+0xc0>)
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001274:	623b      	str	r3, [r7, #32]
      break;
 8001276:	e002      	b.n	800127e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800127a:	623b      	str	r3, [r7, #32]
      break;
 800127c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800127e:	6a3b      	ldr	r3, [r7, #32]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3728      	adds	r7, #40	; 0x28
 8001284:	46bd      	mov	sp, r7
 8001286:	bc90      	pop	{r4, r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	080039fc 	.word	0x080039fc
 8001290:	08003a0c 	.word	0x08003a0c
 8001294:	40021000 	.word	0x40021000
 8001298:	007a1200 	.word	0x007a1200
 800129c:	003d0900 	.word	0x003d0900

080012a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012a4:	4b02      	ldr	r3, [pc, #8]	; (80012b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80012a6:	681b      	ldr	r3, [r3, #0]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80012b8:	f7ff fff2 	bl	80012a0 <HAL_RCC_GetHCLKFreq>
 80012bc:	4601      	mov	r1, r0
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	f003 0307 	and.w	r3, r3, #7
 80012c8:	4a03      	ldr	r2, [pc, #12]	; (80012d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012ca:	5cd3      	ldrb	r3, [r2, r3]
 80012cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40021000 	.word	0x40021000
 80012d8:	08003a88 	.word	0x08003a88

080012dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012e0:	f7ff ffde 	bl	80012a0 <HAL_RCC_GetHCLKFreq>
 80012e4:	4601      	mov	r1, r0
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	0adb      	lsrs	r3, r3, #11
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	4a03      	ldr	r2, [pc, #12]	; (8001300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012f2:	5cd3      	ldrb	r3, [r2, r3]
 80012f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40021000 	.word	0x40021000
 8001300:	08003a88 	.word	0x08003a88

08001304 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <RCC_Delay+0x34>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a0a      	ldr	r2, [pc, #40]	; (800133c <RCC_Delay+0x38>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0a5b      	lsrs	r3, r3, #9
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001320:	bf00      	nop
  }
  while (Delay --);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	1e5a      	subs	r2, r3, #1
 8001326:	60fa      	str	r2, [r7, #12]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f9      	bne.n	8001320 <RCC_Delay+0x1c>
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	10624dd3 	.word	0x10624dd3

08001340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e03f      	b.n	80013d2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d106      	bne.n	800136c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f001 f8b4 	bl	80024d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2224      	movs	r2, #36	; 0x24
 8001370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	6812      	ldr	r2, [r2, #0]
 800137c:	68d2      	ldr	r2, [r2, #12]
 800137e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f000 fd27 	bl	8001dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	6912      	ldr	r2, [r2, #16]
 8001394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6812      	ldr	r2, [r2, #0]
 80013a2:	6952      	ldr	r2, [r2, #20]
 80013a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	68d2      	ldr	r2, [r2, #12]
 80013b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2220      	movs	r2, #32
 80013c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2220      	movs	r2, #32
 80013cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b08a      	sub	sp, #40	; 0x28
 80013de:	af02      	add	r7, sp, #8
 80013e0:	60f8      	str	r0, [r7, #12]
 80013e2:	60b9      	str	r1, [r7, #8]
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4613      	mov	r3, r2
 80013e8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b20      	cmp	r3, #32
 80013f8:	d17b      	bne.n	80014f2 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <HAL_UART_Transmit+0x2c>
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d101      	bne.n	800140a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e074      	b.n	80014f4 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001410:	2b01      	cmp	r3, #1
 8001412:	d101      	bne.n	8001418 <HAL_UART_Transmit+0x3e>
 8001414:	2302      	movs	r3, #2
 8001416:	e06d      	b.n	80014f4 <HAL_UART_Transmit+0x11a>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2201      	movs	r2, #1
 800141c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	2221      	movs	r2, #33	; 0x21
 800142a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800142e:	f7fe ff59 	bl	80002e4 <HAL_GetTick>
 8001432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	88fa      	ldrh	r2, [r7, #6]
 800143e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001448:	d108      	bne.n	800145c <HAL_UART_Transmit+0x82>
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d104      	bne.n	800145c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	61bb      	str	r3, [r7, #24]
 800145a:	e003      	b.n	8001464 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800146c:	e029      	b.n	80014c2 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2200      	movs	r2, #0
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 fada 	bl	8001a32 <UART_WaitOnFlagUntilTimeout>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e035      	b.n	80014f4 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10a      	bne.n	80014a4 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	8812      	ldrh	r2, [r2, #0]
 8001496:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800149a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	3302      	adds	r3, #2
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	e007      	b.n	80014b4 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	69fa      	ldr	r2, [r7, #28]
 80014aa:	7812      	ldrb	r2, [r2, #0]
 80014ac:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3301      	adds	r3, #1
 80014b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	3b01      	subs	r3, #1
 80014bc:	b29a      	uxth	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1d0      	bne.n	800146e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	2200      	movs	r2, #0
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 faab 	bl	8001a32 <UART_WaitOnFlagUntilTimeout>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e006      	b.n	80014f4 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2220      	movs	r2, #32
 80014ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80014f2:	2302      	movs	r3, #2
  }
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3720      	adds	r7, #32
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08a      	sub	sp, #40	; 0x28
 8001500:	af02      	add	r7, sp, #8
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	4613      	mov	r3, r2
 800150a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b20      	cmp	r3, #32
 800151a:	f040 808c 	bne.w	8001636 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d002      	beq.n	800152a <HAL_UART_Receive+0x2e>
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e084      	b.n	8001638 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_UART_Receive+0x40>
 8001538:	2302      	movs	r3, #2
 800153a:	e07d      	b.n	8001638 <HAL_UART_Receive+0x13c>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2222      	movs	r2, #34	; 0x22
 800154e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001558:	f7fe fec4 	bl	80002e4 <HAL_GetTick>
 800155c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	88fa      	ldrh	r2, [r7, #6]
 8001562:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	88fa      	ldrh	r2, [r7, #6]
 8001568:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001572:	d108      	bne.n	8001586 <HAL_UART_Receive+0x8a>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d104      	bne.n	8001586 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	61bb      	str	r3, [r7, #24]
 8001584:	e003      	b.n	800158e <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001596:	e043      	b.n	8001620 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	2200      	movs	r2, #0
 80015a0:	2120      	movs	r1, #32
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 fa45 	bl	8001a32 <UART_WaitOnFlagUntilTimeout>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e042      	b.n	8001638 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10c      	bne.n	80015d2 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	3302      	adds	r3, #2
 80015ce:	61bb      	str	r3, [r7, #24]
 80015d0:	e01f      	b.n	8001612 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015da:	d007      	beq.n	80015ec <HAL_UART_Receive+0xf0>
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d10a      	bne.n	80015fa <HAL_UART_Receive+0xfe>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d106      	bne.n	80015fa <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e008      	b.n	800160c <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001606:	b2da      	uxtb	r2, r3
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	3301      	adds	r3, #1
 8001610:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001616:	b29b      	uxth	r3, r3
 8001618:	3b01      	subs	r3, #1
 800161a:	b29a      	uxth	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001624:	b29b      	uxth	r3, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1b6      	bne.n	8001598 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2220      	movs	r2, #32
 800162e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001636:	2302      	movs	r3, #2
  }
}
 8001638:	4618      	mov	r0, r3
 800163a:	3720      	adds	r7, #32
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	4613      	mov	r3, r2
 800164c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b20      	cmp	r3, #32
 8001658:	d11d      	bne.n	8001696 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HAL_UART_Receive_IT+0x26>
 8001660:	88fb      	ldrh	r3, [r7, #6]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e016      	b.n	8001698 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <HAL_UART_Receive_IT+0x38>
 8001674:	2302      	movs	r3, #2
 8001676:	e00f      	b.n	8001698 <HAL_UART_Receive_IT+0x58>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	461a      	mov	r2, r3
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	68f8      	ldr	r0, [r7, #12]
 800168e:	f000 fa1a 	bl	8001ac6 <UART_Start_Receive_IT>
 8001692:	4603      	mov	r3, r0
 8001694:	e000      	b.n	8001698 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001696:	2302      	movs	r3, #2
  }
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10d      	bne.n	80016f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d008      	beq.n	80016f2 <HAL_UART_IRQHandler+0x52>
 80016e0:	6a3b      	ldr	r3, [r7, #32]
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 faca 	bl	8001c84 <UART_Receive_IT>
      return;
 80016f0:	e17c      	b.n	80019ec <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80b1 	beq.w	800185c <HAL_UART_IRQHandler+0x1bc>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <HAL_UART_IRQHandler+0x70>
 8001704:	6a3b      	ldr	r3, [r7, #32]
 8001706:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80a6 	beq.w	800185c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00a      	beq.n	8001730 <HAL_UART_IRQHandler+0x90>
 800171a:	6a3b      	ldr	r3, [r7, #32]
 800171c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f043 0201 	orr.w	r2, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00a      	beq.n	8001750 <HAL_UART_IRQHandler+0xb0>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d005      	beq.n	8001750 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	f043 0202 	orr.w	r2, r3, #2
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <HAL_UART_IRQHandler+0xd0>
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	d005      	beq.n	8001770 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f043 0204 	orr.w	r2, r3, #4
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00f      	beq.n	800179a <HAL_UART_IRQHandler+0xfa>
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	f003 0320 	and.w	r3, r3, #32
 8001780:	2b00      	cmp	r3, #0
 8001782:	d104      	bne.n	800178e <HAL_UART_IRQHandler+0xee>
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f043 0208 	orr.w	r2, r3, #8
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 811f 	beq.w	80019e2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	f003 0320 	and.w	r3, r3, #32
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d007      	beq.n	80017be <HAL_UART_IRQHandler+0x11e>
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	f003 0320 	and.w	r3, r3, #32
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d002      	beq.n	80017be <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fa63 	bl	8001c84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	bf14      	ite	ne
 80017cc:	2301      	movne	r3, #1
 80017ce:	2300      	moveq	r3, #0
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <HAL_UART_IRQHandler+0x146>
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d031      	beq.n	800184a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f9a6 	bl	8001b38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d023      	beq.n	8001842 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6812      	ldr	r2, [r2, #0]
 8001802:	6952      	ldr	r2, [r2, #20]
 8001804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001808:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180e:	2b00      	cmp	r3, #0
 8001810:	d013      	beq.n	800183a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001816:	4a77      	ldr	r2, [pc, #476]	; (80019f4 <HAL_UART_IRQHandler+0x354>)
 8001818:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fed2 	bl	80005c8 <HAL_DMA_Abort_IT>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d016      	beq.n	8001858 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001834:	4610      	mov	r0, r2
 8001836:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001838:	e00e      	b.n	8001858 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 f8e5 	bl	8001a0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001840:	e00a      	b.n	8001858 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f8e1 	bl	8001a0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001848:	e006      	b.n	8001858 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f8dd 	bl	8001a0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8001856:	e0c4      	b.n	80019e2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001858:	bf00      	nop
    return;
 800185a:	e0c2      	b.n	80019e2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	2b01      	cmp	r3, #1
 8001862:	f040 80a1 	bne.w	80019a8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 809b 	beq.w	80019a8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	2b00      	cmp	r3, #0
 800187a:	f000 8095 	beq.w	80019a8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d04e      	beq.n	8001940 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 80018ac:	8a7b      	ldrh	r3, [r7, #18]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8099 	beq.w	80019e6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80018b8:	8a7a      	ldrh	r2, [r7, #18]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	f080 8093 	bcs.w	80019e6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	8a7a      	ldrh	r2, [r7, #18]
 80018c4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d02b      	beq.n	8001928 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	68d2      	ldr	r2, [r2, #12]
 80018da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018de:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	6952      	ldr	r2, [r2, #20]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	6952      	ldr	r2, [r2, #20]
 80018fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018fe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	68d2      	ldr	r2, [r2, #12]
 8001918:	f022 0210 	bic.w	r2, r2, #16
 800191c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fe15 	bl	8000552 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001930:	b29b      	uxth	r3, r3
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	b29b      	uxth	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f86f 	bl	8001a1c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800193e:	e052      	b.n	80019e6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001948:	b29b      	uxth	r3, r3
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001952:	b29b      	uxth	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d048      	beq.n	80019ea <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8001958:	8a3b      	ldrh	r3, [r7, #16]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d045      	beq.n	80019ea <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	68d2      	ldr	r2, [r2, #12]
 8001968:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800196c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	6952      	ldr	r2, [r2, #20]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2220      	movs	r2, #32
 8001982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	68d2      	ldr	r2, [r2, #12]
 8001996:	f022 0210 	bic.w	r2, r2, #16
 800199a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800199c:	8a3b      	ldrh	r3, [r7, #16]
 800199e:	4619      	mov	r1, r3
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f83b 	bl	8001a1c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80019a6:	e020      	b.n	80019ea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d008      	beq.n	80019c4 <HAL_UART_IRQHandler+0x324>
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f8fb 	bl	8001bb8 <UART_Transmit_IT>
    return;
 80019c2:	e013      	b.n	80019ec <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00e      	beq.n	80019ec <HAL_UART_IRQHandler+0x34c>
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d009      	beq.n	80019ec <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f000 f93b 	bl	8001c54 <UART_EndTransmit_IT>
    return;
 80019de:	bf00      	nop
 80019e0:	e004      	b.n	80019ec <HAL_UART_IRQHandler+0x34c>
    return;
 80019e2:	bf00      	nop
 80019e4:	e002      	b.n	80019ec <HAL_UART_IRQHandler+0x34c>
      return;
 80019e6:	bf00      	nop
 80019e8:	e000      	b.n	80019ec <HAL_UART_IRQHandler+0x34c>
      return;
 80019ea:	bf00      	nop
  }
}
 80019ec:	3728      	adds	r7, #40	; 0x28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	08001b91 	.word	0x08001b91

080019f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr

08001a1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a42:	e02c      	b.n	8001a9e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4a:	d028      	beq.n	8001a9e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d007      	beq.n	8001a62 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a52:	f7fe fc47 	bl	80002e4 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	1ad2      	subs	r2, r2, r3
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d91d      	bls.n	8001a9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	68d2      	ldr	r2, [r2, #12]
 8001a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001a70:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	6952      	ldr	r2, [r2, #20]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2220      	movs	r2, #32
 8001a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e00f      	b.n	8001abe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	bf0c      	ite	eq
 8001aae:	2301      	moveq	r3, #1
 8001ab0:	2300      	movne	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	79fb      	ldrb	r3, [r7, #7]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d0c3      	beq.n	8001a44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	60f8      	str	r0, [r7, #12]
 8001ace:	60b9      	str	r1, [r7, #8]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	88fa      	ldrh	r2, [r7, #6]
 8001ade:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2222      	movs	r2, #34	; 0x22
 8001af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	68d2      	ldr	r2, [r2, #12]
 8001b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	6952      	ldr	r2, [r2, #20]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68fa      	ldr	r2, [r7, #12]
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	68d2      	ldr	r2, [r2, #12]
 8001b26:	f042 0220 	orr.w	r2, r2, #32
 8001b2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	68d2      	ldr	r2, [r2, #12]
 8001b4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001b4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	6952      	ldr	r2, [r2, #20]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d107      	bne.n	8001b78 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6812      	ldr	r2, [r2, #0]
 8001b70:	68d2      	ldr	r2, [r2, #12]
 8001b72:	f022 0210 	bic.w	r2, r2, #16
 8001b76:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f7ff ff2d 	bl	8001a0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b21      	cmp	r3, #33	; 0x21
 8001bca:	d13d      	bne.n	8001c48 <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bd4:	d113      	bne.n	8001bfe <UART_Transmit_IT+0x46>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10f      	bne.n	8001bfe <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68fa      	ldr	r2, [r7, #12]
 8001bea:	8812      	ldrh	r2, [r2, #0]
 8001bec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bf0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	1c9a      	adds	r2, r3, #2
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	621a      	str	r2, [r3, #32]
 8001bfc:	e008      	b.n	8001c10 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	1c58      	adds	r0, r3, #1
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	6208      	str	r0, [r1, #32]
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10f      	bne.n	8001c44 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	68d2      	ldr	r2, [r2, #12]
 8001c2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	68d2      	ldr	r2, [r2, #12]
 8001c3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	e000      	b.n	8001c4a <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 8001c48:	2302      	movs	r3, #2
  }
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6812      	ldr	r2, [r2, #0]
 8001c64:	68d2      	ldr	r2, [r2, #12]
 8001c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f7ff febf 	bl	80019f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b22      	cmp	r3, #34	; 0x22
 8001c96:	f040 8099 	bne.w	8001dcc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca2:	d117      	bne.n	8001cd4 <UART_Receive_IT+0x50>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d113      	bne.n	8001cd4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	1c9a      	adds	r2, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd2:	e026      	b.n	8001d22 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ce6:	d007      	beq.n	8001cf8 <UART_Receive_IT+0x74>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10a      	bne.n	8001d06 <UART_Receive_IT+0x82>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d106      	bne.n	8001d06 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	e008      	b.n	8001d18 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d1c:	1c5a      	adds	r2, r3, #1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d148      	bne.n	8001dc8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	68d2      	ldr	r2, [r2, #12]
 8001d40:	f022 0220 	bic.w	r2, r2, #32
 8001d44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	68d2      	ldr	r2, [r2, #12]
 8001d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	6812      	ldr	r2, [r2, #0]
 8001d5e:	6952      	ldr	r2, [r2, #20]
 8001d60:	f022 0201 	bic.w	r2, r2, #1
 8001d64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d123      	bne.n	8001dbe <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	68d2      	ldr	r2, [r2, #12]
 8001d86:	f022 0210 	bic.w	r2, r2, #16
 8001d8a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d10a      	bne.n	8001db0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fe30 	bl	8001a1c <HAL_UARTEx_RxEventCallback>
 8001dbc:	e002      	b.n	8001dc4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f994 	bl	80020ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e002      	b.n	8001dce <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
	...

08001dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	6912      	ldr	r2, [r2, #16]
 8001dea:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68d2      	ldr	r2, [r2, #12]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001e16:	f023 030c 	bic.w	r3, r3, #12
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	430b      	orrs	r3, r1
 8001e1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	6952      	ldr	r2, [r2, #20]
 8001e2a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	6992      	ldr	r2, [r2, #24]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a2c      	ldr	r2, [pc, #176]	; (8001eec <UART_SetConfig+0x114>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d103      	bne.n	8001e48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001e40:	f7ff fa4c 	bl	80012dc <HAL_RCC_GetPCLK2Freq>
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	e002      	b.n	8001e4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001e48:	f7ff fa34 	bl	80012b4 <HAL_RCC_GetPCLK1Freq>
 8001e4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	009a      	lsls	r2, r3, #2
 8001e5c:	441a      	add	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	4a21      	ldr	r2, [pc, #132]	; (8001ef0 <UART_SetConfig+0x118>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	0118      	lsls	r0, r3, #4
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	009a      	lsls	r2, r3, #2
 8001e7c:	441a      	add	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <UART_SetConfig+0x118>)
 8001e8a:	fba3 4302 	umull	r4, r3, r3, r2
 8001e8e:	095b      	lsrs	r3, r3, #5
 8001e90:	2464      	movs	r4, #100	; 0x64
 8001e92:	fb04 f303 	mul.w	r3, r4, r3
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	3332      	adds	r3, #50	; 0x32
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <UART_SetConfig+0x118>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ea8:	4418      	add	r0, r3
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009a      	lsls	r2, r3, #2
 8001eb4:	441a      	add	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <UART_SetConfig+0x118>)
 8001ec2:	fba3 4302 	umull	r4, r3, r3, r2
 8001ec6:	095b      	lsrs	r3, r3, #5
 8001ec8:	2464      	movs	r4, #100	; 0x64
 8001eca:	fb04 f303 	mul.w	r3, r4, r3
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	3332      	adds	r3, #50	; 0x32
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <UART_SetConfig+0x118>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	f003 030f 	and.w	r3, r3, #15
 8001ee0:	4403      	add	r3, r0
 8001ee2:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ee4:	bf00      	nop
 8001ee6:	3714      	adds	r7, #20
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd90      	pop	{r4, r7, pc}
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	51eb851f 	.word	0x51eb851f

08001ef4 <LCD_sendCmd>:
#include "../Inc/lcd.h"
#include "stdio.h"
#include "stdarg.h"

void LCD_sendCmd( uint8_t data) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <LCD_sendCmd+0x28>)
 8001f06:	f7fe fde7 	bl	8000ad8 <HAL_GPIO_WritePin>
    LCD_sendByte(data);
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f000 f86b 	bl	8001fe8 <LCD_sendByte>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40011000 	.word	0x40011000

08001f20 <LCD_sendChar>:

void LCD_sendChar(uint8_t data) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f30:	4805      	ldr	r0, [pc, #20]	; (8001f48 <LCD_sendChar+0x28>)
 8001f32:	f7fe fdd1 	bl	8000ad8 <HAL_GPIO_WritePin>
    LCD_sendByte(data);
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f000 f855 	bl	8001fe8 <LCD_sendByte>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40011000 	.word	0x40011000

08001f4c <LCD_sendNibble>:

void LCD_sendNibble(uint8_t data) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	461a      	mov	r2, r3
 8001f68:	2110      	movs	r1, #16
 8001f6a:	481e      	ldr	r0, [pc, #120]	; (8001fe4 <LCD_sendNibble+0x98>)
 8001f6c:	f7fe fdb4 	bl	8000ad8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	461a      	mov	r2, r3
 8001f82:	2120      	movs	r1, #32
 8001f84:	4817      	ldr	r0, [pc, #92]	; (8001fe4 <LCD_sendNibble+0x98>)
 8001f86:	f7fe fda7 	bl	8000ad8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	2140      	movs	r1, #64	; 0x40
 8001f9e:	4811      	ldr	r0, [pc, #68]	; (8001fe4 <LCD_sendNibble+0x98>)
 8001fa0:	f7fe fd9a 	bl	8000ad8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	480a      	ldr	r0, [pc, #40]	; (8001fe4 <LCD_sendNibble+0x98>)
 8001fba:	f7fe fd8d 	bl	8000ad8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc4:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <LCD_sendNibble+0x98>)
 8001fc6:	f7fe fd87 	bl	8000ad8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f7fe f994 	bl	80002f8 <HAL_Delay>
    HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fd6:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <LCD_sendNibble+0x98>)
 8001fd8:	f7fe fd7e 	bl	8000ad8 <HAL_GPIO_WritePin>
}
 8001fdc:	bf00      	nop
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40011000 	.word	0x40011000

08001fe8 <LCD_sendByte>:

void LCD_sendByte(uint8_t data) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
    LCD_sendNibble(data >> 4); // High order bit
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ffa7 	bl	8001f4c <LCD_sendNibble>
    LCD_sendNibble(data); // Low order bit
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ffa3 	bl	8001f4c <LCD_sendNibble>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <LCD_puts>:

void LCD_puts(char * data) {
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
    while (data[0] != '\0') {
 8002016:	e007      	b.n	8002028 <LCD_puts+0x1a>
        LCD_sendChar(data[0]);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff7f 	bl	8001f20 <LCD_sendChar>
        data++;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3301      	adds	r3, #1
 8002026:	607b      	str	r3, [r7, #4]
    while (data[0] != '\0') {
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f3      	bne.n	8002018 <LCD_puts+0xa>
    }
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <LCD_init>:

void LCD_init(){
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
    LCD_sendCmd(0x33); // Initialize controller
 800203c:	2033      	movs	r0, #51	; 0x33
 800203e:	f7ff ff59 	bl	8001ef4 <LCD_sendCmd>
    LCD_sendCmd(0x32); // Set 4-bit mode
 8002042:	2032      	movs	r0, #50	; 0x32
 8002044:	f7ff ff56 	bl	8001ef4 <LCD_sendCmd>
    LCD_sendCmd(0x28); // 4 bit, 2 line, 5x7
 8002048:	2028      	movs	r0, #40	; 0x28
 800204a:	f7ff ff53 	bl	8001ef4 <LCD_sendCmd>
    LCD_sendCmd(0x06); // Cursor direction -> right
 800204e:	2006      	movs	r0, #6
 8002050:	f7ff ff50 	bl	8001ef4 <LCD_sendCmd>
    LCD_sendCmd(0x0C); // Display on, cursor off
 8002054:	200c      	movs	r0, #12
 8002056:	f7ff ff4d 	bl	8001ef4 <LCD_sendCmd>
    LCD_sendCmd(0x01); // Clear display
 800205a:	2001      	movs	r0, #1
 800205c:	f7ff ff4a 	bl	8001ef4 <LCD_sendCmd>
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <LCD_clear>:

void LCD_clear(){
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
    LCD_sendCmd(0x01);
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff ff43 	bl	8001ef4 <LCD_sendCmd>
    HAL_Delay(2);
 800206e:	2002      	movs	r0, #2
 8002070:	f7fe f942 	bl	80002f8 <HAL_Delay>
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <LCD_setCursor>:

void LCD_setCursor(char row, char col){
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	460a      	mov	r2, r1
 8002082:	71fb      	strb	r3, [r7, #7]
 8002084:	4613      	mov	r3, r2
 8002086:	71bb      	strb	r3, [r7, #6]
	char val = (row == 0) ? 0x00: 0x40;
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <LCD_setCursor+0x1a>
 800208e:	2300      	movs	r3, #0
 8002090:	e000      	b.n	8002094 <LCD_setCursor+0x1c>
 8002092:	2340      	movs	r3, #64	; 0x40
 8002094:	73fb      	strb	r3, [r7, #15]
	val += col;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	79bb      	ldrb	r3, [r7, #6]
 800209a:	4413      	add	r3, r2
 800209c:	73fb      	strb	r3, [r7, #15]
	LCD_sendCmd(LCD_SETDDRAMADDR | val );
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff24 	bl	8001ef4 <LCD_sendCmd>
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <LCD_printf>:
		LCD_sendCmd(LCD_ENTRYMODESET | LCD_ENTRYSHIFTINCREMENT);
	}
}

int LCD_printf(const char* fmt,...)
{
 80020b4:	b40f      	push	{r0, r1, r2, r3}
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
	int done;
	va_list args;
	static char buffer[256];
	va_start(args,fmt);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	603b      	str	r3, [r7, #0]

	done = vsnprintf(buffer,256,fmt,args);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ca:	4807      	ldr	r0, [pc, #28]	; (80020e8 <LCD_printf+0x34>)
 80020cc:	f000 fbb2 	bl	8002834 <vsniprintf>
 80020d0:	6078      	str	r0, [r7, #4]

	LCD_puts(buffer);
 80020d2:	4805      	ldr	r0, [pc, #20]	; (80020e8 <LCD_printf+0x34>)
 80020d4:	f7ff ff9b 	bl	800200e <LCD_puts>

	va_end(args);
	return done;
 80020d8:	687b      	ldr	r3, [r7, #4]
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020e4:	b004      	add	sp, #16
 80020e6:	4770      	bx	lr
 80020e8:	200001f8 	.word	0x200001f8

080020ec <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	 if(huart->Instance == USART3)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_UART_RxCpltCallback+0x90>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d135      	bne.n	800216a <HAL_UART_RxCpltCallback+0x7e>
	 {
		 switch(receive_data_itr)
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_UART_RxCpltCallback+0x94>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b62      	cmp	r3, #98	; 0x62
 8002104:	d00e      	beq.n	8002124 <HAL_UART_RxCpltCallback+0x38>
 8002106:	2b63      	cmp	r3, #99	; 0x63
 8002108:	d017      	beq.n	800213a <HAL_UART_RxCpltCallback+0x4e>
 800210a:	2b61      	cmp	r3, #97	; 0x61
 800210c:	d120      	bne.n	8002150 <HAL_UART_RxCpltCallback+0x64>
		 {
			 case 'a':
			 {
				 send_data = receive_data_itr;
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_UART_RxCpltCallback+0x94>)
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <HAL_UART_RxCpltCallback+0x98>)
 8002114:	701a      	strb	r2, [r3, #0]
				 HAL_UART_Transmit(&huart1, &send_data, sizeof(send_data) ,100);
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	2201      	movs	r2, #1
 800211a:	491a      	ldr	r1, [pc, #104]	; (8002184 <HAL_UART_RxCpltCallback+0x98>)
 800211c:	481a      	ldr	r0, [pc, #104]	; (8002188 <HAL_UART_RxCpltCallback+0x9c>)
 800211e:	f7ff f95c 	bl	80013da <HAL_UART_Transmit>
			 }
			 break;
 8002122:	e022      	b.n	800216a <HAL_UART_RxCpltCallback+0x7e>
			 case 'b':
			 {
				 send_data = receive_data_itr;
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_UART_RxCpltCallback+0x94>)
 8002126:	781a      	ldrb	r2, [r3, #0]
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <HAL_UART_RxCpltCallback+0x98>)
 800212a:	701a      	strb	r2, [r3, #0]
				 HAL_UART_Transmit(&huart1, &send_data, sizeof(send_data) ,100);
 800212c:	2364      	movs	r3, #100	; 0x64
 800212e:	2201      	movs	r2, #1
 8002130:	4914      	ldr	r1, [pc, #80]	; (8002184 <HAL_UART_RxCpltCallback+0x98>)
 8002132:	4815      	ldr	r0, [pc, #84]	; (8002188 <HAL_UART_RxCpltCallback+0x9c>)
 8002134:	f7ff f951 	bl	80013da <HAL_UART_Transmit>
			 }
			 break;
 8002138:	e017      	b.n	800216a <HAL_UART_RxCpltCallback+0x7e>
			 case 'c':
			 {
				 send_data = receive_data_itr;
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_UART_RxCpltCallback+0x94>)
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_UART_RxCpltCallback+0x98>)
 8002140:	701a      	strb	r2, [r3, #0]
				 HAL_UART_Transmit(&huart1, &send_data, sizeof(send_data) ,100);
 8002142:	2364      	movs	r3, #100	; 0x64
 8002144:	2201      	movs	r2, #1
 8002146:	490f      	ldr	r1, [pc, #60]	; (8002184 <HAL_UART_RxCpltCallback+0x98>)
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <HAL_UART_RxCpltCallback+0x9c>)
 800214a:	f7ff f946 	bl	80013da <HAL_UART_Transmit>
			 }
			 break;
 800214e:	e00c      	b.n	800216a <HAL_UART_RxCpltCallback+0x7e>
			 default:
			 {
				 send_data = 'y';
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <HAL_UART_RxCpltCallback+0x98>)
 8002152:	2279      	movs	r2, #121	; 0x79
 8002154:	701a      	strb	r2, [r3, #0]
				 HAL_UART_Transmit(&huart1, &send_data, sizeof(send_data) ,100);
 8002156:	2364      	movs	r3, #100	; 0x64
 8002158:	2201      	movs	r2, #1
 800215a:	490a      	ldr	r1, [pc, #40]	; (8002184 <HAL_UART_RxCpltCallback+0x98>)
 800215c:	480a      	ldr	r0, [pc, #40]	; (8002188 <HAL_UART_RxCpltCallback+0x9c>)
 800215e:	f7ff f93c 	bl	80013da <HAL_UART_Transmit>
				 receive_data_itr = 0;
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_UART_RxCpltCallback+0x94>)
 8002164:	2200      	movs	r2, #0
 8002166:	701a      	strb	r2, [r3, #0]
			 }
			 break;
 8002168:	bf00      	nop
		 }
	 }
	 HAL_UART_Receive_IT(&huart3, &receive_data_itr, sizeof(receive_data_itr));
 800216a:	2201      	movs	r2, #1
 800216c:	4904      	ldr	r1, [pc, #16]	; (8002180 <HAL_UART_RxCpltCallback+0x94>)
 800216e:	4807      	ldr	r0, [pc, #28]	; (800218c <HAL_UART_RxCpltCallback+0xa0>)
 8002170:	f7ff fa66 	bl	8001640 <HAL_UART_Receive_IT>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40004800 	.word	0x40004800
 8002180:	20000395 	.word	0x20000395
 8002184:	20000398 	.word	0x20000398
 8002188:	2000034c 	.word	0x2000034c
 800218c:	20000308 	.word	0x20000308

08002190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002194:	f7fe f84e 	bl	8000234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002198:	f000 f87e 	bl	8002298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800219c:	f000 f90c 	bl	80023b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80021a0:	f000 f8b6 	bl	8002310 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80021a4:	f000 f8de 	bl	8002364 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_init();
 80021a8:	f7ff ff46 	bl	8002038 <LCD_init>

  HAL_UART_Receive_IT(&huart3, &receive_data_itr, sizeof(receive_data_itr));
 80021ac:	2201      	movs	r2, #1
 80021ae:	492d      	ldr	r1, [pc, #180]	; (8002264 <main+0xd4>)
 80021b0:	482d      	ldr	r0, [pc, #180]	; (8002268 <main+0xd8>)
 80021b2:	f7ff fa45 	bl	8001640 <HAL_UART_Receive_IT>
	  else
	  {
		  LCD_printf("Trang thai:nghi");
	  }
	  */
	  if (HAL_UART_Receive(&huart1, &receive_data , sizeof(receive_data), 100) == HAL_OK)
 80021b6:	2364      	movs	r3, #100	; 0x64
 80021b8:	2205      	movs	r2, #5
 80021ba:	492c      	ldr	r1, [pc, #176]	; (800226c <main+0xdc>)
 80021bc:	482c      	ldr	r0, [pc, #176]	; (8002270 <main+0xe0>)
 80021be:	f7ff f99d 	bl	80014fc <HAL_UART_Receive>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d132      	bne.n	800222e <main+0x9e>
	  {
		  sscanf(receive_data, "%d", &receive);
 80021c8:	4a2a      	ldr	r2, [pc, #168]	; (8002274 <main+0xe4>)
 80021ca:	492b      	ldr	r1, [pc, #172]	; (8002278 <main+0xe8>)
 80021cc:	4827      	ldr	r0, [pc, #156]	; (800226c <main+0xdc>)
 80021ce:	f000 fad9 	bl	8002784 <siscanf>
		  LCD_setCursor(0,0);
 80021d2:	2100      	movs	r1, #0
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7ff ff4f 	bl	8002078 <LCD_setCursor>
		  if (receive < 300)
 80021da:	4b26      	ldr	r3, [pc, #152]	; (8002274 <main+0xe4>)
 80021dc:	881b      	ldrh	r3, [r3, #0]
 80021de:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80021e2:	d20a      	bcs.n	80021fa <main+0x6a>
		  {
			LCD_printf("Hay dan dien cuc");
 80021e4:	4825      	ldr	r0, [pc, #148]	; (800227c <main+0xec>)
 80021e6:	f7ff ff65 	bl	80020b4 <LCD_printf>
			LCD_setCursor(1,0);
 80021ea:	2100      	movs	r1, #0
 80021ec:	2001      	movs	r0, #1
 80021ee:	f7ff ff43 	bl	8002078 <LCD_setCursor>
			LCD_printf("len vi tri batki");
 80021f2:	4823      	ldr	r0, [pc, #140]	; (8002280 <main+0xf0>)
 80021f4:	f7ff ff5e 	bl	80020b4 <LCD_printf>
 80021f8:	e005      	b.n	8002206 <main+0x76>
		  }
		  else
		  {
			  LCD_printf("Trang thai:");
 80021fa:	4822      	ldr	r0, [pc, #136]	; (8002284 <main+0xf4>)
 80021fc:	f7ff ff5a 	bl	80020b4 <LCD_printf>
			  LCD_printf(receive_data);
 8002200:	481a      	ldr	r0, [pc, #104]	; (800226c <main+0xdc>)
 8002202:	f7ff ff57 	bl	80020b4 <LCD_printf>
		  }

		  if (receive > 1900)
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <main+0xe4>)
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	f240 726c 	movw	r2, #1900	; 0x76c
 800220e:	4293      	cmp	r3, r2
 8002210:	d906      	bls.n	8002220 <main+0x90>
		  {
			LCD_setCursor(1,0);
 8002212:	2100      	movs	r1, #0
 8002214:	2001      	movs	r0, #1
 8002216:	f7ff ff2f 	bl	8002078 <LCD_setCursor>
			LCD_printf("Dang co");
 800221a:	481b      	ldr	r0, [pc, #108]	; (8002288 <main+0xf8>)
 800221c:	f7ff ff4a 	bl	80020b4 <LCD_printf>
		  }
		  HAL_Delay(1000);
 8002220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002224:	f7fe f868 	bl	80002f8 <HAL_Delay>
		  LCD_clear();
 8002228:	f7ff ff1c 	bl	8002064 <LCD_clear>
 800222c:	e006      	b.n	800223c <main+0xac>
	  }
	  else
	  {
		  LCD_setCursor(0,0);
 800222e:	2100      	movs	r1, #0
 8002230:	2000      	movs	r0, #0
 8002232:	f7ff ff21 	bl	8002078 <LCD_setCursor>
		  LCD_printf("Khong co du lieu");
 8002236:	4815      	ldr	r0, [pc, #84]	; (800228c <main+0xfc>)
 8002238:	f7ff ff3c 	bl	80020b4 <LCD_printf>
	  }

	  if (send_data == 'a' || send_data == 'b' || send_data == 'c')
 800223c:	4b14      	ldr	r3, [pc, #80]	; (8002290 <main+0x100>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b61      	cmp	r3, #97	; 0x61
 8002242:	d007      	beq.n	8002254 <main+0xc4>
 8002244:	4b12      	ldr	r3, [pc, #72]	; (8002290 <main+0x100>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b62      	cmp	r3, #98	; 0x62
 800224a:	d003      	beq.n	8002254 <main+0xc4>
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <main+0x100>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b63      	cmp	r3, #99	; 0x63
 8002252:	d1b0      	bne.n	80021b6 <main+0x26>
	  {
		  LCD_setCursor(1,0);
 8002254:	2100      	movs	r1, #0
 8002256:	2001      	movs	r0, #1
 8002258:	f7ff ff0e 	bl	8002078 <LCD_setCursor>
		  LCD_printf("Manual");
 800225c:	480d      	ldr	r0, [pc, #52]	; (8002294 <main+0x104>)
 800225e:	f7ff ff29 	bl	80020b4 <LCD_printf>
	  if (HAL_UART_Receive(&huart1, &receive_data , sizeof(receive_data), 100) == HAL_OK)
 8002262:	e7a8      	b.n	80021b6 <main+0x26>
 8002264:	20000395 	.word	0x20000395
 8002268:	20000308 	.word	0x20000308
 800226c:	20000390 	.word	0x20000390
 8002270:	2000034c 	.word	0x2000034c
 8002274:	20000396 	.word	0x20000396
 8002278:	08003a10 	.word	0x08003a10
 800227c:	08003a14 	.word	0x08003a14
 8002280:	08003a28 	.word	0x08003a28
 8002284:	08003a3c 	.word	0x08003a3c
 8002288:	08003a48 	.word	0x08003a48
 800228c:	08003a50 	.word	0x08003a50
 8002290:	20000398 	.word	0x20000398
 8002294:	08003a64 	.word	0x08003a64

08002298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b090      	sub	sp, #64	; 0x40
 800229c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229e:	f107 0318 	add.w	r3, r7, #24
 80022a2:	2228      	movs	r2, #40	; 0x28
 80022a4:	2100      	movs	r1, #0
 80022a6:	4618      	mov	r0, r3
 80022a8:	f000 fa64 	bl	8002774 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
 80022b2:	605a      	str	r2, [r3, #4]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	60da      	str	r2, [r3, #12]
 80022b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022ba:	2302      	movs	r3, #2
 80022bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022be:	2301      	movs	r3, #1
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022c2:	2310      	movs	r3, #16
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022ca:	f107 0318 	add.w	r3, r7, #24
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7fe fc1a 	bl	8000b08 <HAL_RCC_OscConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80022da:	f000 f8c5 	bl	8002468 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022de:	230f      	movs	r3, #15
 80022e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022ea:	2300      	movs	r3, #0
 80022ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80022f2:	1d3b      	adds	r3, r7, #4
 80022f4:	2100      	movs	r1, #0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fe86 	bl	8001008 <HAL_RCC_ClockConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002302:	f000 f8b1 	bl	8002468 <Error_Handler>
  }
}
 8002306:	bf00      	nop
 8002308:	3740      	adds	r7, #64	; 0x40
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <MX_USART1_UART_Init+0x4c>)
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <MX_USART1_UART_Init+0x50>)
 8002318:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <MX_USART1_UART_Init+0x4c>)
 800231c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002320:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002322:	4b0e      	ldr	r3, [pc, #56]	; (800235c <MX_USART1_UART_Init+0x4c>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <MX_USART1_UART_Init+0x4c>)
 800232a:	2200      	movs	r2, #0
 800232c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <MX_USART1_UART_Init+0x4c>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <MX_USART1_UART_Init+0x4c>)
 8002336:	220c      	movs	r2, #12
 8002338:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <MX_USART1_UART_Init+0x4c>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <MX_USART1_UART_Init+0x4c>)
 8002342:	2200      	movs	r2, #0
 8002344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <MX_USART1_UART_Init+0x4c>)
 8002348:	f7fe fffa 	bl	8001340 <HAL_UART_Init>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002352:	f000 f889 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	2000034c 	.word	0x2000034c
 8002360:	40013800 	.word	0x40013800

08002364 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <MX_USART3_UART_Init+0x4c>)
 800236a:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <MX_USART3_UART_Init+0x50>)
 800236c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <MX_USART3_UART_Init+0x4c>)
 8002370:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002374:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <MX_USART3_UART_Init+0x4c>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <MX_USART3_UART_Init+0x4c>)
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002382:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <MX_USART3_UART_Init+0x4c>)
 8002384:	2200      	movs	r2, #0
 8002386:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <MX_USART3_UART_Init+0x4c>)
 800238a:	220c      	movs	r2, #12
 800238c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800238e:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <MX_USART3_UART_Init+0x4c>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <MX_USART3_UART_Init+0x4c>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <MX_USART3_UART_Init+0x4c>)
 800239c:	f7fe ffd0 	bl	8001340 <HAL_UART_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023a6:	f000 f85f 	bl	8002468 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000308 	.word	0x20000308
 80023b4:	40004800 	.word	0x40004800

080023b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	2200      	movs	r2, #0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	605a      	str	r2, [r3, #4]
 80023c8:	609a      	str	r2, [r3, #8]
 80023ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023cc:	4a24      	ldr	r2, [pc, #144]	; (8002460 <MX_GPIO_Init+0xa8>)
 80023ce:	4b24      	ldr	r3, [pc, #144]	; (8002460 <MX_GPIO_Init+0xa8>)
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f043 0310 	orr.w	r3, r3, #16
 80023d6:	6193      	str	r3, [r2, #24]
 80023d8:	4b21      	ldr	r3, [pc, #132]	; (8002460 <MX_GPIO_Init+0xa8>)
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e4:	4a1e      	ldr	r2, [pc, #120]	; (8002460 <MX_GPIO_Init+0xa8>)
 80023e6:	4b1e      	ldr	r3, [pc, #120]	; (8002460 <MX_GPIO_Init+0xa8>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	f043 0320 	orr.w	r3, r3, #32
 80023ee:	6193      	str	r3, [r2, #24]
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <MX_GPIO_Init+0xa8>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fc:	4a18      	ldr	r2, [pc, #96]	; (8002460 <MX_GPIO_Init+0xa8>)
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <MX_GPIO_Init+0xa8>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f043 0308 	orr.w	r3, r3, #8
 8002406:	6193      	str	r3, [r2, #24]
 8002408:	4b15      	ldr	r3, [pc, #84]	; (8002460 <MX_GPIO_Init+0xa8>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	607b      	str	r3, [r7, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002414:	4a12      	ldr	r2, [pc, #72]	; (8002460 <MX_GPIO_Init+0xa8>)
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <MX_GPIO_Init+0xa8>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f043 0304 	orr.w	r3, r3, #4
 800241e:	6193      	str	r3, [r2, #24]
 8002420:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <MX_GPIO_Init+0xa8>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	603b      	str	r3, [r7, #0]
 800242a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800242c:	2200      	movs	r2, #0
 800242e:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8002432:	480c      	ldr	r0, [pc, #48]	; (8002464 <MX_GPIO_Init+0xac>)
 8002434:	f7fe fb50 	bl	8000ad8 <HAL_GPIO_WritePin>
                          |RS_Pin|EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           RS_Pin EN_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002438:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800243c:	613b      	str	r3, [r7, #16]
                          |RS_Pin|EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243e:	2301      	movs	r3, #1
 8002440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2302      	movs	r3, #2
 8002448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244a:	f107 0310 	add.w	r3, r7, #16
 800244e:	4619      	mov	r1, r3
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <MX_GPIO_Init+0xac>)
 8002452:	f7fe f9d7 	bl	8000804 <HAL_GPIO_Init>

}
 8002456:	bf00      	nop
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	40011000 	.word	0x40011000

08002468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800246e:	e7fe      	b.n	800246e <Error_Handler+0x6>

08002470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002476:	4a15      	ldr	r2, [pc, #84]	; (80024cc <HAL_MspInit+0x5c>)
 8002478:	4b14      	ldr	r3, [pc, #80]	; (80024cc <HAL_MspInit+0x5c>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	6193      	str	r3, [r2, #24]
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_MspInit+0x5c>)
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4a0f      	ldr	r2, [pc, #60]	; (80024cc <HAL_MspInit+0x5c>)
 8002490:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <HAL_MspInit+0x5c>)
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002498:	61d3      	str	r3, [r2, #28]
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_MspInit+0x5c>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80024a6:	4b0a      	ldr	r3, [pc, #40]	; (80024d0 <HAL_MspInit+0x60>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <HAL_MspInit+0x60>)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010000 	.word	0x40010000

080024d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	; 0x30
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a42      	ldr	r2, [pc, #264]	; (80025f8 <HAL_UART_MspInit+0x124>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d13e      	bne.n	8002572 <HAL_UART_MspInit+0x9e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f4:	4a41      	ldr	r2, [pc, #260]	; (80025fc <HAL_UART_MspInit+0x128>)
 80024f6:	4b41      	ldr	r3, [pc, #260]	; (80025fc <HAL_UART_MspInit+0x128>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024fe:	6193      	str	r3, [r2, #24]
 8002500:	4b3e      	ldr	r3, [pc, #248]	; (80025fc <HAL_UART_MspInit+0x128>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	61bb      	str	r3, [r7, #24]
 800250a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250c:	4a3b      	ldr	r2, [pc, #236]	; (80025fc <HAL_UART_MspInit+0x128>)
 800250e:	4b3b      	ldr	r3, [pc, #236]	; (80025fc <HAL_UART_MspInit+0x128>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	6193      	str	r3, [r2, #24]
 8002518:	4b38      	ldr	r3, [pc, #224]	; (80025fc <HAL_UART_MspInit+0x128>)
 800251a:	699b      	ldr	r3, [r3, #24]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002524:	2340      	movs	r3, #64	; 0x40
 8002526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002528:	2302      	movs	r3, #2
 800252a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800252c:	2303      	movs	r3, #3
 800252e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	4619      	mov	r1, r3
 8002536:	4832      	ldr	r0, [pc, #200]	; (8002600 <HAL_UART_MspInit+0x12c>)
 8002538:	f7fe f964 	bl	8000804 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002540:	2300      	movs	r3, #0
 8002542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4619      	mov	r1, r3
 800254e:	482c      	ldr	r0, [pc, #176]	; (8002600 <HAL_UART_MspInit+0x12c>)
 8002550:	f7fe f958 	bl	8000804 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002554:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <HAL_UART_MspInit+0x130>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002564:	f043 0304 	orr.w	r3, r3, #4
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256a:	4a26      	ldr	r2, [pc, #152]	; (8002604 <HAL_UART_MspInit+0x130>)
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002570:	e03e      	b.n	80025f0 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART3)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a24      	ldr	r2, [pc, #144]	; (8002608 <HAL_UART_MspInit+0x134>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d139      	bne.n	80025f0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800257c:	4a1f      	ldr	r2, [pc, #124]	; (80025fc <HAL_UART_MspInit+0x128>)
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <HAL_UART_MspInit+0x128>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002586:	61d3      	str	r3, [r2, #28]
 8002588:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <HAL_UART_MspInit+0x128>)
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <HAL_UART_MspInit+0x128>)
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_UART_MspInit+0x128>)
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	6193      	str	r3, [r2, #24]
 80025a0:	4b16      	ldr	r3, [pc, #88]	; (80025fc <HAL_UART_MspInit+0x128>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80025ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80025b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b2:	2302      	movs	r3, #2
 80025b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	4619      	mov	r1, r3
 80025c0:	480f      	ldr	r0, [pc, #60]	; (8002600 <HAL_UART_MspInit+0x12c>)
 80025c2:	f7fe f91f 	bl	8000804 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025cc:	2300      	movs	r3, #0
 80025ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f107 031c 	add.w	r3, r7, #28
 80025d8:	4619      	mov	r1, r3
 80025da:	4809      	ldr	r0, [pc, #36]	; (8002600 <HAL_UART_MspInit+0x12c>)
 80025dc:	f7fe f912 	bl	8000804 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2100      	movs	r1, #0
 80025e4:	2027      	movs	r0, #39	; 0x27
 80025e6:	f7fd ff7e 	bl	80004e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025ea:	2027      	movs	r0, #39	; 0x27
 80025ec:	f7fd ff97 	bl	800051e <HAL_NVIC_EnableIRQ>
}
 80025f0:	bf00      	nop
 80025f2:	3730      	adds	r7, #48	; 0x30
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40013800 	.word	0x40013800
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010c00 	.word	0x40010c00
 8002604:	40010000 	.word	0x40010000
 8002608:	40004800 	.word	0x40004800

0800260c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <NMI_Handler+0x4>

08002612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <HardFault_Handler+0x4>

08002618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <MemManage_Handler+0x4>

0800261e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002622:	e7fe      	b.n	8002622 <BusFault_Handler+0x4>

08002624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002628:	e7fe      	b.n	8002628 <UsageFault_Handler+0x4>

0800262a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002636:	b480      	push	{r7}
 8002638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800263a:	bf00      	nop
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002642:	b480      	push	{r7}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	46bd      	mov	sp, r7
 800264a:	bc80      	pop	{r7}
 800264c:	4770      	bx	lr

0800264e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002652:	f7fd fe35 	bl	80002c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <USART3_IRQHandler+0x10>)
 8002662:	f7ff f81d 	bl	80016a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000308 	.word	0x20000308

08002670 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <_sbrk+0x50>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d102      	bne.n	8002686 <_sbrk+0x16>
		heap_end = &end;
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <_sbrk+0x50>)
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <_sbrk+0x54>)
 8002684:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <_sbrk+0x50>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <_sbrk+0x50>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4413      	add	r3, r2
 8002694:	466a      	mov	r2, sp
 8002696:	4293      	cmp	r3, r2
 8002698:	d907      	bls.n	80026aa <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800269a:	f000 f841 	bl	8002720 <__errno>
 800269e:	4602      	mov	r2, r0
 80026a0:	230c      	movs	r3, #12
 80026a2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80026a4:	f04f 33ff 	mov.w	r3, #4294967295
 80026a8:	e006      	b.n	80026b8 <_sbrk+0x48>
	}

	heap_end += incr;
 80026aa:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <_sbrk+0x50>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	4a03      	ldr	r2, [pc, #12]	; (80026c0 <_sbrk+0x50>)
 80026b4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80026b6:	68fb      	ldr	r3, [r7, #12]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200002f8 	.word	0x200002f8
 80026c4:	200003a0 	.word	0x200003a0

080026c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026cc:	bf00      	nop
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026d6:	490d      	ldr	r1, [pc, #52]	; (800270c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026dc:	e002      	b.n	80026e4 <LoopCopyDataInit>

080026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e2:	3304      	adds	r3, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e8:	d3f9      	bcc.n	80026de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026ec:	4c0a      	ldr	r4, [pc, #40]	; (8002718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f0:	e001      	b.n	80026f6 <LoopFillZerobss>

080026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f4:	3204      	adds	r2, #4

080026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f8:	d3fb      	bcc.n	80026f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026fa:	f7ff ffe5 	bl	80026c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fe:	f000 f815 	bl	800272c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002702:	f7ff fd45 	bl	8002190 <main>
  bx lr
 8002706:	4770      	bx	lr
  ldr r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800270c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002710:	08003c54 	.word	0x08003c54
  ldr r2, =_sbss
 8002714:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002718:	200003a0 	.word	0x200003a0

0800271c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC1_2_IRQHandler>
	...

08002720 <__errno>:
 8002720:	4b01      	ldr	r3, [pc, #4]	; (8002728 <__errno+0x8>)
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	2000000c 	.word	0x2000000c

0800272c <__libc_init_array>:
 800272c:	b570      	push	{r4, r5, r6, lr}
 800272e:	2500      	movs	r5, #0
 8002730:	4e0c      	ldr	r6, [pc, #48]	; (8002764 <__libc_init_array+0x38>)
 8002732:	4c0d      	ldr	r4, [pc, #52]	; (8002768 <__libc_init_array+0x3c>)
 8002734:	1ba4      	subs	r4, r4, r6
 8002736:	10a4      	asrs	r4, r4, #2
 8002738:	42a5      	cmp	r5, r4
 800273a:	d109      	bne.n	8002750 <__libc_init_array+0x24>
 800273c:	f001 f952 	bl	80039e4 <_init>
 8002740:	2500      	movs	r5, #0
 8002742:	4e0a      	ldr	r6, [pc, #40]	; (800276c <__libc_init_array+0x40>)
 8002744:	4c0a      	ldr	r4, [pc, #40]	; (8002770 <__libc_init_array+0x44>)
 8002746:	1ba4      	subs	r4, r4, r6
 8002748:	10a4      	asrs	r4, r4, #2
 800274a:	42a5      	cmp	r5, r4
 800274c:	d105      	bne.n	800275a <__libc_init_array+0x2e>
 800274e:	bd70      	pop	{r4, r5, r6, pc}
 8002750:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002754:	4798      	blx	r3
 8002756:	3501      	adds	r5, #1
 8002758:	e7ee      	b.n	8002738 <__libc_init_array+0xc>
 800275a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800275e:	4798      	blx	r3
 8002760:	3501      	adds	r5, #1
 8002762:	e7f2      	b.n	800274a <__libc_init_array+0x1e>
 8002764:	08003c4c 	.word	0x08003c4c
 8002768:	08003c4c 	.word	0x08003c4c
 800276c:	08003c4c 	.word	0x08003c4c
 8002770:	08003c50 	.word	0x08003c50

08002774 <memset>:
 8002774:	4603      	mov	r3, r0
 8002776:	4402      	add	r2, r0
 8002778:	4293      	cmp	r3, r2
 800277a:	d100      	bne.n	800277e <memset+0xa>
 800277c:	4770      	bx	lr
 800277e:	f803 1b01 	strb.w	r1, [r3], #1
 8002782:	e7f9      	b.n	8002778 <memset+0x4>

08002784 <siscanf>:
 8002784:	b40e      	push	{r1, r2, r3}
 8002786:	f44f 7201 	mov.w	r2, #516	; 0x204
 800278a:	b530      	push	{r4, r5, lr}
 800278c:	b09c      	sub	sp, #112	; 0x70
 800278e:	ac1f      	add	r4, sp, #124	; 0x7c
 8002790:	f854 5b04 	ldr.w	r5, [r4], #4
 8002794:	f8ad 2014 	strh.w	r2, [sp, #20]
 8002798:	9002      	str	r0, [sp, #8]
 800279a:	9006      	str	r0, [sp, #24]
 800279c:	f7fd fd42 	bl	8000224 <strlen>
 80027a0:	4b0b      	ldr	r3, [pc, #44]	; (80027d0 <siscanf+0x4c>)
 80027a2:	9003      	str	r0, [sp, #12]
 80027a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80027a6:	2300      	movs	r3, #0
 80027a8:	930f      	str	r3, [sp, #60]	; 0x3c
 80027aa:	9314      	str	r3, [sp, #80]	; 0x50
 80027ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027b0:	9007      	str	r0, [sp, #28]
 80027b2:	4808      	ldr	r0, [pc, #32]	; (80027d4 <siscanf+0x50>)
 80027b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80027b8:	462a      	mov	r2, r5
 80027ba:	4623      	mov	r3, r4
 80027bc:	a902      	add	r1, sp, #8
 80027be:	6800      	ldr	r0, [r0, #0]
 80027c0:	9401      	str	r4, [sp, #4]
 80027c2:	f000 f9ef 	bl	8002ba4 <__ssvfiscanf_r>
 80027c6:	b01c      	add	sp, #112	; 0x70
 80027c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80027cc:	b003      	add	sp, #12
 80027ce:	4770      	bx	lr
 80027d0:	080027d9 	.word	0x080027d9
 80027d4:	2000000c 	.word	0x2000000c

080027d8 <__seofread>:
 80027d8:	2000      	movs	r0, #0
 80027da:	4770      	bx	lr

080027dc <_vsniprintf_r>:
 80027dc:	b530      	push	{r4, r5, lr}
 80027de:	1e14      	subs	r4, r2, #0
 80027e0:	4605      	mov	r5, r0
 80027e2:	b09b      	sub	sp, #108	; 0x6c
 80027e4:	4618      	mov	r0, r3
 80027e6:	da05      	bge.n	80027f4 <_vsniprintf_r+0x18>
 80027e8:	238b      	movs	r3, #139	; 0x8b
 80027ea:	f04f 30ff 	mov.w	r0, #4294967295
 80027ee:	602b      	str	r3, [r5, #0]
 80027f0:	b01b      	add	sp, #108	; 0x6c
 80027f2:	bd30      	pop	{r4, r5, pc}
 80027f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80027f8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80027fc:	bf0c      	ite	eq
 80027fe:	4623      	moveq	r3, r4
 8002800:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002804:	9302      	str	r3, [sp, #8]
 8002806:	9305      	str	r3, [sp, #20]
 8002808:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800280c:	9100      	str	r1, [sp, #0]
 800280e:	9104      	str	r1, [sp, #16]
 8002810:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002814:	4602      	mov	r2, r0
 8002816:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002818:	4669      	mov	r1, sp
 800281a:	4628      	mov	r0, r5
 800281c:	f000 f874 	bl	8002908 <_svfiprintf_r>
 8002820:	1c43      	adds	r3, r0, #1
 8002822:	bfbc      	itt	lt
 8002824:	238b      	movlt	r3, #139	; 0x8b
 8002826:	602b      	strlt	r3, [r5, #0]
 8002828:	2c00      	cmp	r4, #0
 800282a:	d0e1      	beq.n	80027f0 <_vsniprintf_r+0x14>
 800282c:	2200      	movs	r2, #0
 800282e:	9b00      	ldr	r3, [sp, #0]
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e7dd      	b.n	80027f0 <_vsniprintf_r+0x14>

08002834 <vsniprintf>:
 8002834:	b507      	push	{r0, r1, r2, lr}
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	460a      	mov	r2, r1
 800283c:	4601      	mov	r1, r0
 800283e:	4803      	ldr	r0, [pc, #12]	; (800284c <vsniprintf+0x18>)
 8002840:	6800      	ldr	r0, [r0, #0]
 8002842:	f7ff ffcb 	bl	80027dc <_vsniprintf_r>
 8002846:	b003      	add	sp, #12
 8002848:	f85d fb04 	ldr.w	pc, [sp], #4
 800284c:	2000000c 	.word	0x2000000c

08002850 <__ssputs_r>:
 8002850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002854:	688e      	ldr	r6, [r1, #8]
 8002856:	4682      	mov	sl, r0
 8002858:	429e      	cmp	r6, r3
 800285a:	460c      	mov	r4, r1
 800285c:	4691      	mov	r9, r2
 800285e:	4698      	mov	r8, r3
 8002860:	d835      	bhi.n	80028ce <__ssputs_r+0x7e>
 8002862:	898a      	ldrh	r2, [r1, #12]
 8002864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002868:	d031      	beq.n	80028ce <__ssputs_r+0x7e>
 800286a:	2302      	movs	r3, #2
 800286c:	6825      	ldr	r5, [r4, #0]
 800286e:	6909      	ldr	r1, [r1, #16]
 8002870:	1a6f      	subs	r7, r5, r1
 8002872:	6965      	ldr	r5, [r4, #20]
 8002874:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002878:	fb95 f5f3 	sdiv	r5, r5, r3
 800287c:	f108 0301 	add.w	r3, r8, #1
 8002880:	443b      	add	r3, r7
 8002882:	429d      	cmp	r5, r3
 8002884:	bf38      	it	cc
 8002886:	461d      	movcc	r5, r3
 8002888:	0553      	lsls	r3, r2, #21
 800288a:	d531      	bpl.n	80028f0 <__ssputs_r+0xa0>
 800288c:	4629      	mov	r1, r5
 800288e:	f000 fffd 	bl	800388c <_malloc_r>
 8002892:	4606      	mov	r6, r0
 8002894:	b950      	cbnz	r0, 80028ac <__ssputs_r+0x5c>
 8002896:	230c      	movs	r3, #12
 8002898:	f8ca 3000 	str.w	r3, [sl]
 800289c:	89a3      	ldrh	r3, [r4, #12]
 800289e:	f04f 30ff 	mov.w	r0, #4294967295
 80028a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028a6:	81a3      	strh	r3, [r4, #12]
 80028a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028ac:	463a      	mov	r2, r7
 80028ae:	6921      	ldr	r1, [r4, #16]
 80028b0:	f000 ff7a 	bl	80037a8 <memcpy>
 80028b4:	89a3      	ldrh	r3, [r4, #12]
 80028b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80028ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028be:	81a3      	strh	r3, [r4, #12]
 80028c0:	6126      	str	r6, [r4, #16]
 80028c2:	443e      	add	r6, r7
 80028c4:	6026      	str	r6, [r4, #0]
 80028c6:	4646      	mov	r6, r8
 80028c8:	6165      	str	r5, [r4, #20]
 80028ca:	1bed      	subs	r5, r5, r7
 80028cc:	60a5      	str	r5, [r4, #8]
 80028ce:	4546      	cmp	r6, r8
 80028d0:	bf28      	it	cs
 80028d2:	4646      	movcs	r6, r8
 80028d4:	4649      	mov	r1, r9
 80028d6:	4632      	mov	r2, r6
 80028d8:	6820      	ldr	r0, [r4, #0]
 80028da:	f000 ff70 	bl	80037be <memmove>
 80028de:	68a3      	ldr	r3, [r4, #8]
 80028e0:	2000      	movs	r0, #0
 80028e2:	1b9b      	subs	r3, r3, r6
 80028e4:	60a3      	str	r3, [r4, #8]
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	441e      	add	r6, r3
 80028ea:	6026      	str	r6, [r4, #0]
 80028ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028f0:	462a      	mov	r2, r5
 80028f2:	f001 f829 	bl	8003948 <_realloc_r>
 80028f6:	4606      	mov	r6, r0
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d1e1      	bne.n	80028c0 <__ssputs_r+0x70>
 80028fc:	6921      	ldr	r1, [r4, #16]
 80028fe:	4650      	mov	r0, sl
 8002900:	f000 ff78 	bl	80037f4 <_free_r>
 8002904:	e7c7      	b.n	8002896 <__ssputs_r+0x46>
	...

08002908 <_svfiprintf_r>:
 8002908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800290c:	b09d      	sub	sp, #116	; 0x74
 800290e:	9303      	str	r3, [sp, #12]
 8002910:	898b      	ldrh	r3, [r1, #12]
 8002912:	4680      	mov	r8, r0
 8002914:	061c      	lsls	r4, r3, #24
 8002916:	460d      	mov	r5, r1
 8002918:	4616      	mov	r6, r2
 800291a:	d50f      	bpl.n	800293c <_svfiprintf_r+0x34>
 800291c:	690b      	ldr	r3, [r1, #16]
 800291e:	b96b      	cbnz	r3, 800293c <_svfiprintf_r+0x34>
 8002920:	2140      	movs	r1, #64	; 0x40
 8002922:	f000 ffb3 	bl	800388c <_malloc_r>
 8002926:	6028      	str	r0, [r5, #0]
 8002928:	6128      	str	r0, [r5, #16]
 800292a:	b928      	cbnz	r0, 8002938 <_svfiprintf_r+0x30>
 800292c:	230c      	movs	r3, #12
 800292e:	f8c8 3000 	str.w	r3, [r8]
 8002932:	f04f 30ff 	mov.w	r0, #4294967295
 8002936:	e0c4      	b.n	8002ac2 <_svfiprintf_r+0x1ba>
 8002938:	2340      	movs	r3, #64	; 0x40
 800293a:	616b      	str	r3, [r5, #20]
 800293c:	2300      	movs	r3, #0
 800293e:	9309      	str	r3, [sp, #36]	; 0x24
 8002940:	2320      	movs	r3, #32
 8002942:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002946:	2330      	movs	r3, #48	; 0x30
 8002948:	f04f 0b01 	mov.w	fp, #1
 800294c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002950:	4637      	mov	r7, r6
 8002952:	463c      	mov	r4, r7
 8002954:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d13c      	bne.n	80029d6 <_svfiprintf_r+0xce>
 800295c:	ebb7 0a06 	subs.w	sl, r7, r6
 8002960:	d00b      	beq.n	800297a <_svfiprintf_r+0x72>
 8002962:	4653      	mov	r3, sl
 8002964:	4632      	mov	r2, r6
 8002966:	4629      	mov	r1, r5
 8002968:	4640      	mov	r0, r8
 800296a:	f7ff ff71 	bl	8002850 <__ssputs_r>
 800296e:	3001      	adds	r0, #1
 8002970:	f000 80a2 	beq.w	8002ab8 <_svfiprintf_r+0x1b0>
 8002974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002976:	4453      	add	r3, sl
 8002978:	9309      	str	r3, [sp, #36]	; 0x24
 800297a:	783b      	ldrb	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 809b 	beq.w	8002ab8 <_svfiprintf_r+0x1b0>
 8002982:	2300      	movs	r3, #0
 8002984:	f04f 32ff 	mov.w	r2, #4294967295
 8002988:	9304      	str	r3, [sp, #16]
 800298a:	9307      	str	r3, [sp, #28]
 800298c:	9205      	str	r2, [sp, #20]
 800298e:	9306      	str	r3, [sp, #24]
 8002990:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002994:	931a      	str	r3, [sp, #104]	; 0x68
 8002996:	2205      	movs	r2, #5
 8002998:	7821      	ldrb	r1, [r4, #0]
 800299a:	4850      	ldr	r0, [pc, #320]	; (8002adc <_svfiprintf_r+0x1d4>)
 800299c:	f000 fef6 	bl	800378c <memchr>
 80029a0:	1c67      	adds	r7, r4, #1
 80029a2:	9b04      	ldr	r3, [sp, #16]
 80029a4:	b9d8      	cbnz	r0, 80029de <_svfiprintf_r+0xd6>
 80029a6:	06d9      	lsls	r1, r3, #27
 80029a8:	bf44      	itt	mi
 80029aa:	2220      	movmi	r2, #32
 80029ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029b0:	071a      	lsls	r2, r3, #28
 80029b2:	bf44      	itt	mi
 80029b4:	222b      	movmi	r2, #43	; 0x2b
 80029b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029ba:	7822      	ldrb	r2, [r4, #0]
 80029bc:	2a2a      	cmp	r2, #42	; 0x2a
 80029be:	d016      	beq.n	80029ee <_svfiprintf_r+0xe6>
 80029c0:	2100      	movs	r1, #0
 80029c2:	200a      	movs	r0, #10
 80029c4:	9a07      	ldr	r2, [sp, #28]
 80029c6:	4627      	mov	r7, r4
 80029c8:	783b      	ldrb	r3, [r7, #0]
 80029ca:	3401      	adds	r4, #1
 80029cc:	3b30      	subs	r3, #48	; 0x30
 80029ce:	2b09      	cmp	r3, #9
 80029d0:	d950      	bls.n	8002a74 <_svfiprintf_r+0x16c>
 80029d2:	b1c9      	cbz	r1, 8002a08 <_svfiprintf_r+0x100>
 80029d4:	e011      	b.n	80029fa <_svfiprintf_r+0xf2>
 80029d6:	2b25      	cmp	r3, #37	; 0x25
 80029d8:	d0c0      	beq.n	800295c <_svfiprintf_r+0x54>
 80029da:	4627      	mov	r7, r4
 80029dc:	e7b9      	b.n	8002952 <_svfiprintf_r+0x4a>
 80029de:	4a3f      	ldr	r2, [pc, #252]	; (8002adc <_svfiprintf_r+0x1d4>)
 80029e0:	463c      	mov	r4, r7
 80029e2:	1a80      	subs	r0, r0, r2
 80029e4:	fa0b f000 	lsl.w	r0, fp, r0
 80029e8:	4318      	orrs	r0, r3
 80029ea:	9004      	str	r0, [sp, #16]
 80029ec:	e7d3      	b.n	8002996 <_svfiprintf_r+0x8e>
 80029ee:	9a03      	ldr	r2, [sp, #12]
 80029f0:	1d11      	adds	r1, r2, #4
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	9103      	str	r1, [sp, #12]
 80029f6:	2a00      	cmp	r2, #0
 80029f8:	db01      	blt.n	80029fe <_svfiprintf_r+0xf6>
 80029fa:	9207      	str	r2, [sp, #28]
 80029fc:	e004      	b.n	8002a08 <_svfiprintf_r+0x100>
 80029fe:	4252      	negs	r2, r2
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	9207      	str	r2, [sp, #28]
 8002a06:	9304      	str	r3, [sp, #16]
 8002a08:	783b      	ldrb	r3, [r7, #0]
 8002a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8002a0c:	d10d      	bne.n	8002a2a <_svfiprintf_r+0x122>
 8002a0e:	787b      	ldrb	r3, [r7, #1]
 8002a10:	1c79      	adds	r1, r7, #1
 8002a12:	2b2a      	cmp	r3, #42	; 0x2a
 8002a14:	d132      	bne.n	8002a7c <_svfiprintf_r+0x174>
 8002a16:	9b03      	ldr	r3, [sp, #12]
 8002a18:	3702      	adds	r7, #2
 8002a1a:	1d1a      	adds	r2, r3, #4
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	9203      	str	r2, [sp, #12]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	bfb8      	it	lt
 8002a24:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a28:	9305      	str	r3, [sp, #20]
 8002a2a:	4c2d      	ldr	r4, [pc, #180]	; (8002ae0 <_svfiprintf_r+0x1d8>)
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	7839      	ldrb	r1, [r7, #0]
 8002a30:	4620      	mov	r0, r4
 8002a32:	f000 feab 	bl	800378c <memchr>
 8002a36:	b138      	cbz	r0, 8002a48 <_svfiprintf_r+0x140>
 8002a38:	2340      	movs	r3, #64	; 0x40
 8002a3a:	1b00      	subs	r0, r0, r4
 8002a3c:	fa03 f000 	lsl.w	r0, r3, r0
 8002a40:	9b04      	ldr	r3, [sp, #16]
 8002a42:	3701      	adds	r7, #1
 8002a44:	4303      	orrs	r3, r0
 8002a46:	9304      	str	r3, [sp, #16]
 8002a48:	7839      	ldrb	r1, [r7, #0]
 8002a4a:	2206      	movs	r2, #6
 8002a4c:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <_svfiprintf_r+0x1dc>)
 8002a4e:	1c7e      	adds	r6, r7, #1
 8002a50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a54:	f000 fe9a 	bl	800378c <memchr>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d035      	beq.n	8002ac8 <_svfiprintf_r+0x1c0>
 8002a5c:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <_svfiprintf_r+0x1e0>)
 8002a5e:	b9fb      	cbnz	r3, 8002aa0 <_svfiprintf_r+0x198>
 8002a60:	9b03      	ldr	r3, [sp, #12]
 8002a62:	3307      	adds	r3, #7
 8002a64:	f023 0307 	bic.w	r3, r3, #7
 8002a68:	3308      	adds	r3, #8
 8002a6a:	9303      	str	r3, [sp, #12]
 8002a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a6e:	444b      	add	r3, r9
 8002a70:	9309      	str	r3, [sp, #36]	; 0x24
 8002a72:	e76d      	b.n	8002950 <_svfiprintf_r+0x48>
 8002a74:	fb00 3202 	mla	r2, r0, r2, r3
 8002a78:	2101      	movs	r1, #1
 8002a7a:	e7a4      	b.n	80029c6 <_svfiprintf_r+0xbe>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	240a      	movs	r4, #10
 8002a80:	4618      	mov	r0, r3
 8002a82:	9305      	str	r3, [sp, #20]
 8002a84:	460f      	mov	r7, r1
 8002a86:	783a      	ldrb	r2, [r7, #0]
 8002a88:	3101      	adds	r1, #1
 8002a8a:	3a30      	subs	r2, #48	; 0x30
 8002a8c:	2a09      	cmp	r2, #9
 8002a8e:	d903      	bls.n	8002a98 <_svfiprintf_r+0x190>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0ca      	beq.n	8002a2a <_svfiprintf_r+0x122>
 8002a94:	9005      	str	r0, [sp, #20]
 8002a96:	e7c8      	b.n	8002a2a <_svfiprintf_r+0x122>
 8002a98:	fb04 2000 	mla	r0, r4, r0, r2
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e7f1      	b.n	8002a84 <_svfiprintf_r+0x17c>
 8002aa0:	ab03      	add	r3, sp, #12
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	462a      	mov	r2, r5
 8002aa6:	4b11      	ldr	r3, [pc, #68]	; (8002aec <_svfiprintf_r+0x1e4>)
 8002aa8:	a904      	add	r1, sp, #16
 8002aaa:	4640      	mov	r0, r8
 8002aac:	f3af 8000 	nop.w
 8002ab0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ab4:	4681      	mov	r9, r0
 8002ab6:	d1d9      	bne.n	8002a6c <_svfiprintf_r+0x164>
 8002ab8:	89ab      	ldrh	r3, [r5, #12]
 8002aba:	065b      	lsls	r3, r3, #25
 8002abc:	f53f af39 	bmi.w	8002932 <_svfiprintf_r+0x2a>
 8002ac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ac2:	b01d      	add	sp, #116	; 0x74
 8002ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac8:	ab03      	add	r3, sp, #12
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	462a      	mov	r2, r5
 8002ace:	4b07      	ldr	r3, [pc, #28]	; (8002aec <_svfiprintf_r+0x1e4>)
 8002ad0:	a904      	add	r1, sp, #16
 8002ad2:	4640      	mov	r0, r8
 8002ad4:	f000 fa32 	bl	8002f3c <_printf_i>
 8002ad8:	e7ea      	b.n	8002ab0 <_svfiprintf_r+0x1a8>
 8002ada:	bf00      	nop
 8002adc:	08003a90 	.word	0x08003a90
 8002ae0:	08003a96 	.word	0x08003a96
 8002ae4:	08003a9a 	.word	0x08003a9a
 8002ae8:	00000000 	.word	0x00000000
 8002aec:	08002851 	.word	0x08002851

08002af0 <_sungetc_r>:
 8002af0:	b538      	push	{r3, r4, r5, lr}
 8002af2:	1c4b      	adds	r3, r1, #1
 8002af4:	4614      	mov	r4, r2
 8002af6:	d103      	bne.n	8002b00 <_sungetc_r+0x10>
 8002af8:	f04f 35ff 	mov.w	r5, #4294967295
 8002afc:	4628      	mov	r0, r5
 8002afe:	bd38      	pop	{r3, r4, r5, pc}
 8002b00:	8993      	ldrh	r3, [r2, #12]
 8002b02:	b2cd      	uxtb	r5, r1
 8002b04:	f023 0320 	bic.w	r3, r3, #32
 8002b08:	8193      	strh	r3, [r2, #12]
 8002b0a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002b0c:	6852      	ldr	r2, [r2, #4]
 8002b0e:	b18b      	cbz	r3, 8002b34 <_sungetc_r+0x44>
 8002b10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b12:	429a      	cmp	r2, r3
 8002b14:	da08      	bge.n	8002b28 <_sungetc_r+0x38>
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	1e5a      	subs	r2, r3, #1
 8002b1a:	6022      	str	r2, [r4, #0]
 8002b1c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8002b20:	6863      	ldr	r3, [r4, #4]
 8002b22:	3301      	adds	r3, #1
 8002b24:	6063      	str	r3, [r4, #4]
 8002b26:	e7e9      	b.n	8002afc <_sungetc_r+0xc>
 8002b28:	4621      	mov	r1, r4
 8002b2a:	f000 fdd3 	bl	80036d4 <__submore>
 8002b2e:	2800      	cmp	r0, #0
 8002b30:	d0f1      	beq.n	8002b16 <_sungetc_r+0x26>
 8002b32:	e7e1      	b.n	8002af8 <_sungetc_r+0x8>
 8002b34:	6921      	ldr	r1, [r4, #16]
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	b151      	cbz	r1, 8002b50 <_sungetc_r+0x60>
 8002b3a:	4299      	cmp	r1, r3
 8002b3c:	d208      	bcs.n	8002b50 <_sungetc_r+0x60>
 8002b3e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8002b42:	428d      	cmp	r5, r1
 8002b44:	d104      	bne.n	8002b50 <_sungetc_r+0x60>
 8002b46:	3b01      	subs	r3, #1
 8002b48:	3201      	adds	r2, #1
 8002b4a:	6023      	str	r3, [r4, #0]
 8002b4c:	6062      	str	r2, [r4, #4]
 8002b4e:	e7d5      	b.n	8002afc <_sungetc_r+0xc>
 8002b50:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002b52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b56:	6363      	str	r3, [r4, #52]	; 0x34
 8002b58:	2303      	movs	r3, #3
 8002b5a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002b5c:	4623      	mov	r3, r4
 8002b5e:	6422      	str	r2, [r4, #64]	; 0x40
 8002b60:	f803 5f46 	strb.w	r5, [r3, #70]!
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	2301      	movs	r3, #1
 8002b68:	e7dc      	b.n	8002b24 <_sungetc_r+0x34>

08002b6a <__ssrefill_r>:
 8002b6a:	b510      	push	{r4, lr}
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8002b70:	b169      	cbz	r1, 8002b8e <__ssrefill_r+0x24>
 8002b72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b76:	4299      	cmp	r1, r3
 8002b78:	d001      	beq.n	8002b7e <__ssrefill_r+0x14>
 8002b7a:	f000 fe3b 	bl	80037f4 <_free_r>
 8002b7e:	2000      	movs	r0, #0
 8002b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b82:	6360      	str	r0, [r4, #52]	; 0x34
 8002b84:	6063      	str	r3, [r4, #4]
 8002b86:	b113      	cbz	r3, 8002b8e <__ssrefill_r+0x24>
 8002b88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b8a:	6023      	str	r3, [r4, #0]
 8002b8c:	bd10      	pop	{r4, pc}
 8002b8e:	6923      	ldr	r3, [r4, #16]
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	6023      	str	r3, [r4, #0]
 8002b96:	2300      	movs	r3, #0
 8002b98:	6063      	str	r3, [r4, #4]
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	f043 0320 	orr.w	r3, r3, #32
 8002ba0:	81a3      	strh	r3, [r4, #12]
 8002ba2:	bd10      	pop	{r4, pc}

08002ba4 <__ssvfiscanf_r>:
 8002ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ba8:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	2300      	movs	r3, #0
 8002bb0:	4606      	mov	r6, r0
 8002bb2:	460c      	mov	r4, r1
 8002bb4:	4692      	mov	sl, r2
 8002bb6:	270a      	movs	r7, #10
 8002bb8:	9346      	str	r3, [sp, #280]	; 0x118
 8002bba:	9347      	str	r3, [sp, #284]	; 0x11c
 8002bbc:	4b9f      	ldr	r3, [pc, #636]	; (8002e3c <__ssvfiscanf_r+0x298>)
 8002bbe:	f10d 080c 	add.w	r8, sp, #12
 8002bc2:	93a2      	str	r3, [sp, #648]	; 0x288
 8002bc4:	4b9e      	ldr	r3, [pc, #632]	; (8002e40 <__ssvfiscanf_r+0x29c>)
 8002bc6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8002e44 <__ssvfiscanf_r+0x2a0>
 8002bca:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8002bce:	93a3      	str	r3, [sp, #652]	; 0x28c
 8002bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 812f 	beq.w	8002e38 <__ssvfiscanf_r+0x294>
 8002bda:	f000 fdb7 	bl	800374c <__locale_ctype_ptr>
 8002bde:	f89a b000 	ldrb.w	fp, [sl]
 8002be2:	4458      	add	r0, fp
 8002be4:	7843      	ldrb	r3, [r0, #1]
 8002be6:	f013 0308 	ands.w	r3, r3, #8
 8002bea:	d143      	bne.n	8002c74 <__ssvfiscanf_r+0xd0>
 8002bec:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8002bf0:	f10a 0501 	add.w	r5, sl, #1
 8002bf4:	f040 8099 	bne.w	8002d2a <__ssvfiscanf_r+0x186>
 8002bf8:	9345      	str	r3, [sp, #276]	; 0x114
 8002bfa:	9343      	str	r3, [sp, #268]	; 0x10c
 8002bfc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8002c00:	2b2a      	cmp	r3, #42	; 0x2a
 8002c02:	d103      	bne.n	8002c0c <__ssvfiscanf_r+0x68>
 8002c04:	2310      	movs	r3, #16
 8002c06:	f10a 0502 	add.w	r5, sl, #2
 8002c0a:	9343      	str	r3, [sp, #268]	; 0x10c
 8002c0c:	7829      	ldrb	r1, [r5, #0]
 8002c0e:	46aa      	mov	sl, r5
 8002c10:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8002c14:	2a09      	cmp	r2, #9
 8002c16:	f105 0501 	add.w	r5, r5, #1
 8002c1a:	d941      	bls.n	8002ca0 <__ssvfiscanf_r+0xfc>
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	4889      	ldr	r0, [pc, #548]	; (8002e44 <__ssvfiscanf_r+0x2a0>)
 8002c20:	f000 fdb4 	bl	800378c <memchr>
 8002c24:	b138      	cbz	r0, 8002c36 <__ssvfiscanf_r+0x92>
 8002c26:	eba0 0309 	sub.w	r3, r0, r9
 8002c2a:	2001      	movs	r0, #1
 8002c2c:	46aa      	mov	sl, r5
 8002c2e:	4098      	lsls	r0, r3
 8002c30:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002c32:	4318      	orrs	r0, r3
 8002c34:	9043      	str	r0, [sp, #268]	; 0x10c
 8002c36:	f89a 3000 	ldrb.w	r3, [sl]
 8002c3a:	f10a 0501 	add.w	r5, sl, #1
 8002c3e:	2b67      	cmp	r3, #103	; 0x67
 8002c40:	d84a      	bhi.n	8002cd8 <__ssvfiscanf_r+0x134>
 8002c42:	2b65      	cmp	r3, #101	; 0x65
 8002c44:	f080 80b7 	bcs.w	8002db6 <__ssvfiscanf_r+0x212>
 8002c48:	2b47      	cmp	r3, #71	; 0x47
 8002c4a:	d82f      	bhi.n	8002cac <__ssvfiscanf_r+0x108>
 8002c4c:	2b45      	cmp	r3, #69	; 0x45
 8002c4e:	f080 80b2 	bcs.w	8002db6 <__ssvfiscanf_r+0x212>
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8082 	beq.w	8002d5c <__ssvfiscanf_r+0x1b8>
 8002c58:	2b25      	cmp	r3, #37	; 0x25
 8002c5a:	d066      	beq.n	8002d2a <__ssvfiscanf_r+0x186>
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	9744      	str	r7, [sp, #272]	; 0x110
 8002c60:	9349      	str	r3, [sp, #292]	; 0x124
 8002c62:	e045      	b.n	8002cf0 <__ssvfiscanf_r+0x14c>
 8002c64:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8002c66:	3301      	adds	r3, #1
 8002c68:	3101      	adds	r1, #1
 8002c6a:	9147      	str	r1, [sp, #284]	; 0x11c
 8002c6c:	6861      	ldr	r1, [r4, #4]
 8002c6e:	6023      	str	r3, [r4, #0]
 8002c70:	3901      	subs	r1, #1
 8002c72:	6061      	str	r1, [r4, #4]
 8002c74:	6863      	ldr	r3, [r4, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	dd0b      	ble.n	8002c92 <__ssvfiscanf_r+0xee>
 8002c7a:	f000 fd67 	bl	800374c <__locale_ctype_ptr>
 8002c7e:	6823      	ldr	r3, [r4, #0]
 8002c80:	7819      	ldrb	r1, [r3, #0]
 8002c82:	4408      	add	r0, r1
 8002c84:	7841      	ldrb	r1, [r0, #1]
 8002c86:	070d      	lsls	r5, r1, #28
 8002c88:	d4ec      	bmi.n	8002c64 <__ssvfiscanf_r+0xc0>
 8002c8a:	f10a 0501 	add.w	r5, sl, #1
 8002c8e:	46aa      	mov	sl, r5
 8002c90:	e79e      	b.n	8002bd0 <__ssvfiscanf_r+0x2c>
 8002c92:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002c94:	4621      	mov	r1, r4
 8002c96:	4630      	mov	r0, r6
 8002c98:	4798      	blx	r3
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d0ed      	beq.n	8002c7a <__ssvfiscanf_r+0xd6>
 8002c9e:	e7f4      	b.n	8002c8a <__ssvfiscanf_r+0xe6>
 8002ca0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8002ca2:	fb07 1303 	mla	r3, r7, r3, r1
 8002ca6:	3b30      	subs	r3, #48	; 0x30
 8002ca8:	9345      	str	r3, [sp, #276]	; 0x114
 8002caa:	e7af      	b.n	8002c0c <__ssvfiscanf_r+0x68>
 8002cac:	2b5b      	cmp	r3, #91	; 0x5b
 8002cae:	d061      	beq.n	8002d74 <__ssvfiscanf_r+0x1d0>
 8002cb0:	d80c      	bhi.n	8002ccc <__ssvfiscanf_r+0x128>
 8002cb2:	2b58      	cmp	r3, #88	; 0x58
 8002cb4:	d1d2      	bne.n	8002c5c <__ssvfiscanf_r+0xb8>
 8002cb6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8002cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbc:	9243      	str	r2, [sp, #268]	; 0x10c
 8002cbe:	2210      	movs	r2, #16
 8002cc0:	9244      	str	r2, [sp, #272]	; 0x110
 8002cc2:	2b6f      	cmp	r3, #111	; 0x6f
 8002cc4:	bfb4      	ite	lt
 8002cc6:	2303      	movlt	r3, #3
 8002cc8:	2304      	movge	r3, #4
 8002cca:	e010      	b.n	8002cee <__ssvfiscanf_r+0x14a>
 8002ccc:	2b63      	cmp	r3, #99	; 0x63
 8002cce:	d05c      	beq.n	8002d8a <__ssvfiscanf_r+0x1e6>
 8002cd0:	2b64      	cmp	r3, #100	; 0x64
 8002cd2:	d1c3      	bne.n	8002c5c <__ssvfiscanf_r+0xb8>
 8002cd4:	9744      	str	r7, [sp, #272]	; 0x110
 8002cd6:	e7f4      	b.n	8002cc2 <__ssvfiscanf_r+0x11e>
 8002cd8:	2b70      	cmp	r3, #112	; 0x70
 8002cda:	d042      	beq.n	8002d62 <__ssvfiscanf_r+0x1be>
 8002cdc:	d81d      	bhi.n	8002d1a <__ssvfiscanf_r+0x176>
 8002cde:	2b6e      	cmp	r3, #110	; 0x6e
 8002ce0:	d059      	beq.n	8002d96 <__ssvfiscanf_r+0x1f2>
 8002ce2:	d843      	bhi.n	8002d6c <__ssvfiscanf_r+0x1c8>
 8002ce4:	2b69      	cmp	r3, #105	; 0x69
 8002ce6:	d1b9      	bne.n	8002c5c <__ssvfiscanf_r+0xb8>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	9344      	str	r3, [sp, #272]	; 0x110
 8002cec:	2303      	movs	r3, #3
 8002cee:	9349      	str	r3, [sp, #292]	; 0x124
 8002cf0:	6863      	ldr	r3, [r4, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	dd61      	ble.n	8002dba <__ssvfiscanf_r+0x216>
 8002cf6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002cf8:	0659      	lsls	r1, r3, #25
 8002cfa:	d56f      	bpl.n	8002ddc <__ssvfiscanf_r+0x238>
 8002cfc:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	dc7c      	bgt.n	8002dfc <__ssvfiscanf_r+0x258>
 8002d02:	ab01      	add	r3, sp, #4
 8002d04:	4622      	mov	r2, r4
 8002d06:	a943      	add	r1, sp, #268	; 0x10c
 8002d08:	4630      	mov	r0, r6
 8002d0a:	f000 fa37 	bl	800317c <_scanf_chars>
 8002d0e:	2801      	cmp	r0, #1
 8002d10:	f000 8092 	beq.w	8002e38 <__ssvfiscanf_r+0x294>
 8002d14:	2802      	cmp	r0, #2
 8002d16:	d1ba      	bne.n	8002c8e <__ssvfiscanf_r+0xea>
 8002d18:	e01d      	b.n	8002d56 <__ssvfiscanf_r+0x1b2>
 8002d1a:	2b75      	cmp	r3, #117	; 0x75
 8002d1c:	d0da      	beq.n	8002cd4 <__ssvfiscanf_r+0x130>
 8002d1e:	2b78      	cmp	r3, #120	; 0x78
 8002d20:	d0c9      	beq.n	8002cb6 <__ssvfiscanf_r+0x112>
 8002d22:	2b73      	cmp	r3, #115	; 0x73
 8002d24:	d19a      	bne.n	8002c5c <__ssvfiscanf_r+0xb8>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e7e1      	b.n	8002cee <__ssvfiscanf_r+0x14a>
 8002d2a:	6863      	ldr	r3, [r4, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	dd0c      	ble.n	8002d4a <__ssvfiscanf_r+0x1a6>
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	4593      	cmp	fp, r2
 8002d36:	d17f      	bne.n	8002e38 <__ssvfiscanf_r+0x294>
 8002d38:	3301      	adds	r3, #1
 8002d3a:	6862      	ldr	r2, [r4, #4]
 8002d3c:	6023      	str	r3, [r4, #0]
 8002d3e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002d40:	3a01      	subs	r2, #1
 8002d42:	3301      	adds	r3, #1
 8002d44:	6062      	str	r2, [r4, #4]
 8002d46:	9347      	str	r3, [sp, #284]	; 0x11c
 8002d48:	e7a1      	b.n	8002c8e <__ssvfiscanf_r+0xea>
 8002d4a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	4630      	mov	r0, r6
 8002d50:	4798      	blx	r3
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d0ec      	beq.n	8002d30 <__ssvfiscanf_r+0x18c>
 8002d56:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d163      	bne.n	8002e24 <__ssvfiscanf_r+0x280>
 8002d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d60:	e066      	b.n	8002e30 <__ssvfiscanf_r+0x28c>
 8002d62:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8002d64:	f042 0220 	orr.w	r2, r2, #32
 8002d68:	9243      	str	r2, [sp, #268]	; 0x10c
 8002d6a:	e7a4      	b.n	8002cb6 <__ssvfiscanf_r+0x112>
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	9344      	str	r3, [sp, #272]	; 0x110
 8002d70:	2304      	movs	r3, #4
 8002d72:	e7bc      	b.n	8002cee <__ssvfiscanf_r+0x14a>
 8002d74:	4629      	mov	r1, r5
 8002d76:	4640      	mov	r0, r8
 8002d78:	f000 fb5a 	bl	8003430 <__sccl>
 8002d7c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002d7e:	4605      	mov	r5, r0
 8002d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d84:	9343      	str	r3, [sp, #268]	; 0x10c
 8002d86:	2301      	movs	r3, #1
 8002d88:	e7b1      	b.n	8002cee <__ssvfiscanf_r+0x14a>
 8002d8a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8002d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d90:	9343      	str	r3, [sp, #268]	; 0x10c
 8002d92:	2300      	movs	r3, #0
 8002d94:	e7ab      	b.n	8002cee <__ssvfiscanf_r+0x14a>
 8002d96:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8002d98:	06d0      	lsls	r0, r2, #27
 8002d9a:	f53f af78 	bmi.w	8002c8e <__ssvfiscanf_r+0xea>
 8002d9e:	f012 0f01 	tst.w	r2, #1
 8002da2:	9a01      	ldr	r2, [sp, #4]
 8002da4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8002da6:	f102 0104 	add.w	r1, r2, #4
 8002daa:	9101      	str	r1, [sp, #4]
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	bf14      	ite	ne
 8002db0:	8013      	strhne	r3, [r2, #0]
 8002db2:	6013      	streq	r3, [r2, #0]
 8002db4:	e76b      	b.n	8002c8e <__ssvfiscanf_r+0xea>
 8002db6:	2305      	movs	r3, #5
 8002db8:	e799      	b.n	8002cee <__ssvfiscanf_r+0x14a>
 8002dba:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	4798      	blx	r3
 8002dc2:	2800      	cmp	r0, #0
 8002dc4:	d097      	beq.n	8002cf6 <__ssvfiscanf_r+0x152>
 8002dc6:	e7c6      	b.n	8002d56 <__ssvfiscanf_r+0x1b2>
 8002dc8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8002dca:	3201      	adds	r2, #1
 8002dcc:	9247      	str	r2, [sp, #284]	; 0x11c
 8002dce:	6862      	ldr	r2, [r4, #4]
 8002dd0:	3a01      	subs	r2, #1
 8002dd2:	2a00      	cmp	r2, #0
 8002dd4:	6062      	str	r2, [r4, #4]
 8002dd6:	dd0a      	ble.n	8002dee <__ssvfiscanf_r+0x24a>
 8002dd8:	3301      	adds	r3, #1
 8002dda:	6023      	str	r3, [r4, #0]
 8002ddc:	f000 fcb6 	bl	800374c <__locale_ctype_ptr>
 8002de0:	6823      	ldr	r3, [r4, #0]
 8002de2:	781a      	ldrb	r2, [r3, #0]
 8002de4:	4410      	add	r0, r2
 8002de6:	7842      	ldrb	r2, [r0, #1]
 8002de8:	0712      	lsls	r2, r2, #28
 8002dea:	d4ed      	bmi.n	8002dc8 <__ssvfiscanf_r+0x224>
 8002dec:	e786      	b.n	8002cfc <__ssvfiscanf_r+0x158>
 8002dee:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8002df0:	4621      	mov	r1, r4
 8002df2:	4630      	mov	r0, r6
 8002df4:	4798      	blx	r3
 8002df6:	2800      	cmp	r0, #0
 8002df8:	d0f0      	beq.n	8002ddc <__ssvfiscanf_r+0x238>
 8002dfa:	e7ac      	b.n	8002d56 <__ssvfiscanf_r+0x1b2>
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	dc06      	bgt.n	8002e0e <__ssvfiscanf_r+0x26a>
 8002e00:	ab01      	add	r3, sp, #4
 8002e02:	4622      	mov	r2, r4
 8002e04:	a943      	add	r1, sp, #268	; 0x10c
 8002e06:	4630      	mov	r0, r6
 8002e08:	f000 fa1c 	bl	8003244 <_scanf_i>
 8002e0c:	e77f      	b.n	8002d0e <__ssvfiscanf_r+0x16a>
 8002e0e:	4b0e      	ldr	r3, [pc, #56]	; (8002e48 <__ssvfiscanf_r+0x2a4>)
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f43f af3c 	beq.w	8002c8e <__ssvfiscanf_r+0xea>
 8002e16:	ab01      	add	r3, sp, #4
 8002e18:	4622      	mov	r2, r4
 8002e1a:	a943      	add	r1, sp, #268	; 0x10c
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f3af 8000 	nop.w
 8002e22:	e774      	b.n	8002d0e <__ssvfiscanf_r+0x16a>
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e2a:	bf18      	it	ne
 8002e2c:	f04f 30ff 	movne.w	r0, #4294967295
 8002e30:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8002e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e38:	9846      	ldr	r0, [sp, #280]	; 0x118
 8002e3a:	e7f9      	b.n	8002e30 <__ssvfiscanf_r+0x28c>
 8002e3c:	08002af1 	.word	0x08002af1
 8002e40:	08002b6b 	.word	0x08002b6b
 8002e44:	08003a96 	.word	0x08003a96
 8002e48:	00000000 	.word	0x00000000

08002e4c <_printf_common>:
 8002e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e50:	4691      	mov	r9, r2
 8002e52:	461f      	mov	r7, r3
 8002e54:	688a      	ldr	r2, [r1, #8]
 8002e56:	690b      	ldr	r3, [r1, #16]
 8002e58:	4606      	mov	r6, r0
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	bfb8      	it	lt
 8002e5e:	4613      	movlt	r3, r2
 8002e60:	f8c9 3000 	str.w	r3, [r9]
 8002e64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e68:	460c      	mov	r4, r1
 8002e6a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e6e:	b112      	cbz	r2, 8002e76 <_printf_common+0x2a>
 8002e70:	3301      	adds	r3, #1
 8002e72:	f8c9 3000 	str.w	r3, [r9]
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	0699      	lsls	r1, r3, #26
 8002e7a:	bf42      	ittt	mi
 8002e7c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e80:	3302      	addmi	r3, #2
 8002e82:	f8c9 3000 	strmi.w	r3, [r9]
 8002e86:	6825      	ldr	r5, [r4, #0]
 8002e88:	f015 0506 	ands.w	r5, r5, #6
 8002e8c:	d107      	bne.n	8002e9e <_printf_common+0x52>
 8002e8e:	f104 0a19 	add.w	sl, r4, #25
 8002e92:	68e3      	ldr	r3, [r4, #12]
 8002e94:	f8d9 2000 	ldr.w	r2, [r9]
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	429d      	cmp	r5, r3
 8002e9c:	db2a      	blt.n	8002ef4 <_printf_common+0xa8>
 8002e9e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ea2:	6822      	ldr	r2, [r4, #0]
 8002ea4:	3300      	adds	r3, #0
 8002ea6:	bf18      	it	ne
 8002ea8:	2301      	movne	r3, #1
 8002eaa:	0692      	lsls	r2, r2, #26
 8002eac:	d42f      	bmi.n	8002f0e <_printf_common+0xc2>
 8002eae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eb2:	4639      	mov	r1, r7
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	47c0      	blx	r8
 8002eb8:	3001      	adds	r0, #1
 8002eba:	d022      	beq.n	8002f02 <_printf_common+0xb6>
 8002ebc:	6823      	ldr	r3, [r4, #0]
 8002ebe:	68e5      	ldr	r5, [r4, #12]
 8002ec0:	f003 0306 	and.w	r3, r3, #6
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	bf18      	it	ne
 8002ec8:	2500      	movne	r5, #0
 8002eca:	f8d9 2000 	ldr.w	r2, [r9]
 8002ece:	f04f 0900 	mov.w	r9, #0
 8002ed2:	bf08      	it	eq
 8002ed4:	1aad      	subeq	r5, r5, r2
 8002ed6:	68a3      	ldr	r3, [r4, #8]
 8002ed8:	6922      	ldr	r2, [r4, #16]
 8002eda:	bf08      	it	eq
 8002edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bfc4      	itt	gt
 8002ee4:	1a9b      	subgt	r3, r3, r2
 8002ee6:	18ed      	addgt	r5, r5, r3
 8002ee8:	341a      	adds	r4, #26
 8002eea:	454d      	cmp	r5, r9
 8002eec:	d11b      	bne.n	8002f26 <_printf_common+0xda>
 8002eee:	2000      	movs	r0, #0
 8002ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	4652      	mov	r2, sl
 8002ef8:	4639      	mov	r1, r7
 8002efa:	4630      	mov	r0, r6
 8002efc:	47c0      	blx	r8
 8002efe:	3001      	adds	r0, #1
 8002f00:	d103      	bne.n	8002f0a <_printf_common+0xbe>
 8002f02:	f04f 30ff 	mov.w	r0, #4294967295
 8002f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f0a:	3501      	adds	r5, #1
 8002f0c:	e7c1      	b.n	8002e92 <_printf_common+0x46>
 8002f0e:	2030      	movs	r0, #48	; 0x30
 8002f10:	18e1      	adds	r1, r4, r3
 8002f12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f16:	1c5a      	adds	r2, r3, #1
 8002f18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f1c:	4422      	add	r2, r4
 8002f1e:	3302      	adds	r3, #2
 8002f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f24:	e7c3      	b.n	8002eae <_printf_common+0x62>
 8002f26:	2301      	movs	r3, #1
 8002f28:	4622      	mov	r2, r4
 8002f2a:	4639      	mov	r1, r7
 8002f2c:	4630      	mov	r0, r6
 8002f2e:	47c0      	blx	r8
 8002f30:	3001      	adds	r0, #1
 8002f32:	d0e6      	beq.n	8002f02 <_printf_common+0xb6>
 8002f34:	f109 0901 	add.w	r9, r9, #1
 8002f38:	e7d7      	b.n	8002eea <_printf_common+0x9e>
	...

08002f3c <_printf_i>:
 8002f3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f40:	4617      	mov	r7, r2
 8002f42:	7e0a      	ldrb	r2, [r1, #24]
 8002f44:	b085      	sub	sp, #20
 8002f46:	2a6e      	cmp	r2, #110	; 0x6e
 8002f48:	4698      	mov	r8, r3
 8002f4a:	4606      	mov	r6, r0
 8002f4c:	460c      	mov	r4, r1
 8002f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f50:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002f54:	f000 80bc 	beq.w	80030d0 <_printf_i+0x194>
 8002f58:	d81a      	bhi.n	8002f90 <_printf_i+0x54>
 8002f5a:	2a63      	cmp	r2, #99	; 0x63
 8002f5c:	d02e      	beq.n	8002fbc <_printf_i+0x80>
 8002f5e:	d80a      	bhi.n	8002f76 <_printf_i+0x3a>
 8002f60:	2a00      	cmp	r2, #0
 8002f62:	f000 80c8 	beq.w	80030f6 <_printf_i+0x1ba>
 8002f66:	2a58      	cmp	r2, #88	; 0x58
 8002f68:	f000 808a 	beq.w	8003080 <_printf_i+0x144>
 8002f6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f70:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002f74:	e02a      	b.n	8002fcc <_printf_i+0x90>
 8002f76:	2a64      	cmp	r2, #100	; 0x64
 8002f78:	d001      	beq.n	8002f7e <_printf_i+0x42>
 8002f7a:	2a69      	cmp	r2, #105	; 0x69
 8002f7c:	d1f6      	bne.n	8002f6c <_printf_i+0x30>
 8002f7e:	6821      	ldr	r1, [r4, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002f86:	d023      	beq.n	8002fd0 <_printf_i+0x94>
 8002f88:	1d11      	adds	r1, r2, #4
 8002f8a:	6019      	str	r1, [r3, #0]
 8002f8c:	6813      	ldr	r3, [r2, #0]
 8002f8e:	e027      	b.n	8002fe0 <_printf_i+0xa4>
 8002f90:	2a73      	cmp	r2, #115	; 0x73
 8002f92:	f000 80b4 	beq.w	80030fe <_printf_i+0x1c2>
 8002f96:	d808      	bhi.n	8002faa <_printf_i+0x6e>
 8002f98:	2a6f      	cmp	r2, #111	; 0x6f
 8002f9a:	d02a      	beq.n	8002ff2 <_printf_i+0xb6>
 8002f9c:	2a70      	cmp	r2, #112	; 0x70
 8002f9e:	d1e5      	bne.n	8002f6c <_printf_i+0x30>
 8002fa0:	680a      	ldr	r2, [r1, #0]
 8002fa2:	f042 0220 	orr.w	r2, r2, #32
 8002fa6:	600a      	str	r2, [r1, #0]
 8002fa8:	e003      	b.n	8002fb2 <_printf_i+0x76>
 8002faa:	2a75      	cmp	r2, #117	; 0x75
 8002fac:	d021      	beq.n	8002ff2 <_printf_i+0xb6>
 8002fae:	2a78      	cmp	r2, #120	; 0x78
 8002fb0:	d1dc      	bne.n	8002f6c <_printf_i+0x30>
 8002fb2:	2278      	movs	r2, #120	; 0x78
 8002fb4:	496f      	ldr	r1, [pc, #444]	; (8003174 <_printf_i+0x238>)
 8002fb6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002fba:	e064      	b.n	8003086 <_printf_i+0x14a>
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002fc2:	1d11      	adds	r1, r2, #4
 8002fc4:	6019      	str	r1, [r3, #0]
 8002fc6:	6813      	ldr	r3, [r2, #0]
 8002fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0a3      	b.n	8003118 <_printf_i+0x1dc>
 8002fd0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002fd4:	f102 0104 	add.w	r1, r2, #4
 8002fd8:	6019      	str	r1, [r3, #0]
 8002fda:	d0d7      	beq.n	8002f8c <_printf_i+0x50>
 8002fdc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	da03      	bge.n	8002fec <_printf_i+0xb0>
 8002fe4:	222d      	movs	r2, #45	; 0x2d
 8002fe6:	425b      	negs	r3, r3
 8002fe8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002fec:	4962      	ldr	r1, [pc, #392]	; (8003178 <_printf_i+0x23c>)
 8002fee:	220a      	movs	r2, #10
 8002ff0:	e017      	b.n	8003022 <_printf_i+0xe6>
 8002ff2:	6820      	ldr	r0, [r4, #0]
 8002ff4:	6819      	ldr	r1, [r3, #0]
 8002ff6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002ffa:	d003      	beq.n	8003004 <_printf_i+0xc8>
 8002ffc:	1d08      	adds	r0, r1, #4
 8002ffe:	6018      	str	r0, [r3, #0]
 8003000:	680b      	ldr	r3, [r1, #0]
 8003002:	e006      	b.n	8003012 <_printf_i+0xd6>
 8003004:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003008:	f101 0004 	add.w	r0, r1, #4
 800300c:	6018      	str	r0, [r3, #0]
 800300e:	d0f7      	beq.n	8003000 <_printf_i+0xc4>
 8003010:	880b      	ldrh	r3, [r1, #0]
 8003012:	2a6f      	cmp	r2, #111	; 0x6f
 8003014:	bf14      	ite	ne
 8003016:	220a      	movne	r2, #10
 8003018:	2208      	moveq	r2, #8
 800301a:	4957      	ldr	r1, [pc, #348]	; (8003178 <_printf_i+0x23c>)
 800301c:	2000      	movs	r0, #0
 800301e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003022:	6865      	ldr	r5, [r4, #4]
 8003024:	2d00      	cmp	r5, #0
 8003026:	60a5      	str	r5, [r4, #8]
 8003028:	f2c0 809c 	blt.w	8003164 <_printf_i+0x228>
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	f020 0004 	bic.w	r0, r0, #4
 8003032:	6020      	str	r0, [r4, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d13f      	bne.n	80030b8 <_printf_i+0x17c>
 8003038:	2d00      	cmp	r5, #0
 800303a:	f040 8095 	bne.w	8003168 <_printf_i+0x22c>
 800303e:	4675      	mov	r5, lr
 8003040:	2a08      	cmp	r2, #8
 8003042:	d10b      	bne.n	800305c <_printf_i+0x120>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	07da      	lsls	r2, r3, #31
 8003048:	d508      	bpl.n	800305c <_printf_i+0x120>
 800304a:	6923      	ldr	r3, [r4, #16]
 800304c:	6862      	ldr	r2, [r4, #4]
 800304e:	429a      	cmp	r2, r3
 8003050:	bfde      	ittt	le
 8003052:	2330      	movle	r3, #48	; 0x30
 8003054:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003058:	f105 35ff 	addle.w	r5, r5, #4294967295
 800305c:	ebae 0305 	sub.w	r3, lr, r5
 8003060:	6123      	str	r3, [r4, #16]
 8003062:	f8cd 8000 	str.w	r8, [sp]
 8003066:	463b      	mov	r3, r7
 8003068:	aa03      	add	r2, sp, #12
 800306a:	4621      	mov	r1, r4
 800306c:	4630      	mov	r0, r6
 800306e:	f7ff feed 	bl	8002e4c <_printf_common>
 8003072:	3001      	adds	r0, #1
 8003074:	d155      	bne.n	8003122 <_printf_i+0x1e6>
 8003076:	f04f 30ff 	mov.w	r0, #4294967295
 800307a:	b005      	add	sp, #20
 800307c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003080:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003084:	493c      	ldr	r1, [pc, #240]	; (8003178 <_printf_i+0x23c>)
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	6818      	ldr	r0, [r3, #0]
 800308a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800308e:	f100 0504 	add.w	r5, r0, #4
 8003092:	601d      	str	r5, [r3, #0]
 8003094:	d001      	beq.n	800309a <_printf_i+0x15e>
 8003096:	6803      	ldr	r3, [r0, #0]
 8003098:	e002      	b.n	80030a0 <_printf_i+0x164>
 800309a:	0655      	lsls	r5, r2, #25
 800309c:	d5fb      	bpl.n	8003096 <_printf_i+0x15a>
 800309e:	8803      	ldrh	r3, [r0, #0]
 80030a0:	07d0      	lsls	r0, r2, #31
 80030a2:	bf44      	itt	mi
 80030a4:	f042 0220 	orrmi.w	r2, r2, #32
 80030a8:	6022      	strmi	r2, [r4, #0]
 80030aa:	b91b      	cbnz	r3, 80030b4 <_printf_i+0x178>
 80030ac:	6822      	ldr	r2, [r4, #0]
 80030ae:	f022 0220 	bic.w	r2, r2, #32
 80030b2:	6022      	str	r2, [r4, #0]
 80030b4:	2210      	movs	r2, #16
 80030b6:	e7b1      	b.n	800301c <_printf_i+0xe0>
 80030b8:	4675      	mov	r5, lr
 80030ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80030be:	fb02 3310 	mls	r3, r2, r0, r3
 80030c2:	5ccb      	ldrb	r3, [r1, r3]
 80030c4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80030c8:	4603      	mov	r3, r0
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d1f5      	bne.n	80030ba <_printf_i+0x17e>
 80030ce:	e7b7      	b.n	8003040 <_printf_i+0x104>
 80030d0:	6808      	ldr	r0, [r1, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80030d8:	6949      	ldr	r1, [r1, #20]
 80030da:	d004      	beq.n	80030e6 <_printf_i+0x1aa>
 80030dc:	1d10      	adds	r0, r2, #4
 80030de:	6018      	str	r0, [r3, #0]
 80030e0:	6813      	ldr	r3, [r2, #0]
 80030e2:	6019      	str	r1, [r3, #0]
 80030e4:	e007      	b.n	80030f6 <_printf_i+0x1ba>
 80030e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030ea:	f102 0004 	add.w	r0, r2, #4
 80030ee:	6018      	str	r0, [r3, #0]
 80030f0:	6813      	ldr	r3, [r2, #0]
 80030f2:	d0f6      	beq.n	80030e2 <_printf_i+0x1a6>
 80030f4:	8019      	strh	r1, [r3, #0]
 80030f6:	2300      	movs	r3, #0
 80030f8:	4675      	mov	r5, lr
 80030fa:	6123      	str	r3, [r4, #16]
 80030fc:	e7b1      	b.n	8003062 <_printf_i+0x126>
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	1d11      	adds	r1, r2, #4
 8003102:	6019      	str	r1, [r3, #0]
 8003104:	6815      	ldr	r5, [r2, #0]
 8003106:	2100      	movs	r1, #0
 8003108:	6862      	ldr	r2, [r4, #4]
 800310a:	4628      	mov	r0, r5
 800310c:	f000 fb3e 	bl	800378c <memchr>
 8003110:	b108      	cbz	r0, 8003116 <_printf_i+0x1da>
 8003112:	1b40      	subs	r0, r0, r5
 8003114:	6060      	str	r0, [r4, #4]
 8003116:	6863      	ldr	r3, [r4, #4]
 8003118:	6123      	str	r3, [r4, #16]
 800311a:	2300      	movs	r3, #0
 800311c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003120:	e79f      	b.n	8003062 <_printf_i+0x126>
 8003122:	6923      	ldr	r3, [r4, #16]
 8003124:	462a      	mov	r2, r5
 8003126:	4639      	mov	r1, r7
 8003128:	4630      	mov	r0, r6
 800312a:	47c0      	blx	r8
 800312c:	3001      	adds	r0, #1
 800312e:	d0a2      	beq.n	8003076 <_printf_i+0x13a>
 8003130:	6823      	ldr	r3, [r4, #0]
 8003132:	079b      	lsls	r3, r3, #30
 8003134:	d507      	bpl.n	8003146 <_printf_i+0x20a>
 8003136:	2500      	movs	r5, #0
 8003138:	f104 0919 	add.w	r9, r4, #25
 800313c:	68e3      	ldr	r3, [r4, #12]
 800313e:	9a03      	ldr	r2, [sp, #12]
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	429d      	cmp	r5, r3
 8003144:	db05      	blt.n	8003152 <_printf_i+0x216>
 8003146:	68e0      	ldr	r0, [r4, #12]
 8003148:	9b03      	ldr	r3, [sp, #12]
 800314a:	4298      	cmp	r0, r3
 800314c:	bfb8      	it	lt
 800314e:	4618      	movlt	r0, r3
 8003150:	e793      	b.n	800307a <_printf_i+0x13e>
 8003152:	2301      	movs	r3, #1
 8003154:	464a      	mov	r2, r9
 8003156:	4639      	mov	r1, r7
 8003158:	4630      	mov	r0, r6
 800315a:	47c0      	blx	r8
 800315c:	3001      	adds	r0, #1
 800315e:	d08a      	beq.n	8003076 <_printf_i+0x13a>
 8003160:	3501      	adds	r5, #1
 8003162:	e7eb      	b.n	800313c <_printf_i+0x200>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1a7      	bne.n	80030b8 <_printf_i+0x17c>
 8003168:	780b      	ldrb	r3, [r1, #0]
 800316a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800316e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003172:	e765      	b.n	8003040 <_printf_i+0x104>
 8003174:	08003ab2 	.word	0x08003ab2
 8003178:	08003aa1 	.word	0x08003aa1

0800317c <_scanf_chars>:
 800317c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003180:	4615      	mov	r5, r2
 8003182:	688a      	ldr	r2, [r1, #8]
 8003184:	4680      	mov	r8, r0
 8003186:	460c      	mov	r4, r1
 8003188:	b932      	cbnz	r2, 8003198 <_scanf_chars+0x1c>
 800318a:	698a      	ldr	r2, [r1, #24]
 800318c:	2a00      	cmp	r2, #0
 800318e:	bf0c      	ite	eq
 8003190:	2201      	moveq	r2, #1
 8003192:	f04f 32ff 	movne.w	r2, #4294967295
 8003196:	608a      	str	r2, [r1, #8]
 8003198:	2600      	movs	r6, #0
 800319a:	6822      	ldr	r2, [r4, #0]
 800319c:	06d1      	lsls	r1, r2, #27
 800319e:	bf5f      	itttt	pl
 80031a0:	681a      	ldrpl	r2, [r3, #0]
 80031a2:	1d11      	addpl	r1, r2, #4
 80031a4:	6019      	strpl	r1, [r3, #0]
 80031a6:	6817      	ldrpl	r7, [r2, #0]
 80031a8:	69a3      	ldr	r3, [r4, #24]
 80031aa:	b1db      	cbz	r3, 80031e4 <_scanf_chars+0x68>
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <_scanf_chars+0x44>
 80031b0:	682b      	ldr	r3, [r5, #0]
 80031b2:	6962      	ldr	r2, [r4, #20]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	b9a3      	cbnz	r3, 80031e4 <_scanf_chars+0x68>
 80031ba:	2e00      	cmp	r6, #0
 80031bc:	d131      	bne.n	8003222 <_scanf_chars+0xa6>
 80031be:	e006      	b.n	80031ce <_scanf_chars+0x52>
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d007      	beq.n	80031d4 <_scanf_chars+0x58>
 80031c4:	2e00      	cmp	r6, #0
 80031c6:	d12c      	bne.n	8003222 <_scanf_chars+0xa6>
 80031c8:	69a3      	ldr	r3, [r4, #24]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d129      	bne.n	8003222 <_scanf_chars+0xa6>
 80031ce:	2001      	movs	r0, #1
 80031d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031d4:	f000 faba 	bl	800374c <__locale_ctype_ptr>
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4418      	add	r0, r3
 80031de:	7843      	ldrb	r3, [r0, #1]
 80031e0:	071b      	lsls	r3, r3, #28
 80031e2:	d4ef      	bmi.n	80031c4 <_scanf_chars+0x48>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	3601      	adds	r6, #1
 80031e8:	06da      	lsls	r2, r3, #27
 80031ea:	bf5e      	ittt	pl
 80031ec:	682b      	ldrpl	r3, [r5, #0]
 80031ee:	781b      	ldrbpl	r3, [r3, #0]
 80031f0:	703b      	strbpl	r3, [r7, #0]
 80031f2:	682a      	ldr	r2, [r5, #0]
 80031f4:	686b      	ldr	r3, [r5, #4]
 80031f6:	f102 0201 	add.w	r2, r2, #1
 80031fa:	602a      	str	r2, [r5, #0]
 80031fc:	68a2      	ldr	r2, [r4, #8]
 80031fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8003202:	f102 32ff 	add.w	r2, r2, #4294967295
 8003206:	606b      	str	r3, [r5, #4]
 8003208:	bf58      	it	pl
 800320a:	3701      	addpl	r7, #1
 800320c:	60a2      	str	r2, [r4, #8]
 800320e:	b142      	cbz	r2, 8003222 <_scanf_chars+0xa6>
 8003210:	2b00      	cmp	r3, #0
 8003212:	dcc9      	bgt.n	80031a8 <_scanf_chars+0x2c>
 8003214:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003218:	4629      	mov	r1, r5
 800321a:	4640      	mov	r0, r8
 800321c:	4798      	blx	r3
 800321e:	2800      	cmp	r0, #0
 8003220:	d0c2      	beq.n	80031a8 <_scanf_chars+0x2c>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	f013 0310 	ands.w	r3, r3, #16
 8003228:	d105      	bne.n	8003236 <_scanf_chars+0xba>
 800322a:	68e2      	ldr	r2, [r4, #12]
 800322c:	3201      	adds	r2, #1
 800322e:	60e2      	str	r2, [r4, #12]
 8003230:	69a2      	ldr	r2, [r4, #24]
 8003232:	b102      	cbz	r2, 8003236 <_scanf_chars+0xba>
 8003234:	703b      	strb	r3, [r7, #0]
 8003236:	6923      	ldr	r3, [r4, #16]
 8003238:	2000      	movs	r0, #0
 800323a:	441e      	add	r6, r3
 800323c:	6126      	str	r6, [r4, #16]
 800323e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003244 <_scanf_i>:
 8003244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003248:	460c      	mov	r4, r1
 800324a:	469a      	mov	sl, r3
 800324c:	4b74      	ldr	r3, [pc, #464]	; (8003420 <_scanf_i+0x1dc>)
 800324e:	b087      	sub	sp, #28
 8003250:	4683      	mov	fp, r0
 8003252:	4616      	mov	r6, r2
 8003254:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003258:	ab03      	add	r3, sp, #12
 800325a:	68a7      	ldr	r7, [r4, #8]
 800325c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003260:	4b70      	ldr	r3, [pc, #448]	; (8003424 <_scanf_i+0x1e0>)
 8003262:	69a1      	ldr	r1, [r4, #24]
 8003264:	4a70      	ldr	r2, [pc, #448]	; (8003428 <_scanf_i+0x1e4>)
 8003266:	f104 091c 	add.w	r9, r4, #28
 800326a:	2903      	cmp	r1, #3
 800326c:	bf18      	it	ne
 800326e:	461a      	movne	r2, r3
 8003270:	1e7b      	subs	r3, r7, #1
 8003272:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8003276:	bf84      	itt	hi
 8003278:	f240 135d 	movwhi	r3, #349	; 0x15d
 800327c:	60a3      	strhi	r3, [r4, #8]
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	bf88      	it	hi
 8003282:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003286:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	bf98      	it	ls
 800328e:	2700      	movls	r7, #0
 8003290:	464b      	mov	r3, r9
 8003292:	f04f 0800 	mov.w	r8, #0
 8003296:	9200      	str	r2, [sp, #0]
 8003298:	bf88      	it	hi
 800329a:	197f      	addhi	r7, r7, r5
 800329c:	6831      	ldr	r1, [r6, #0]
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	ab03      	add	r3, sp, #12
 80032a2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80032a6:	2202      	movs	r2, #2
 80032a8:	7809      	ldrb	r1, [r1, #0]
 80032aa:	f000 fa6f 	bl	800378c <memchr>
 80032ae:	9b01      	ldr	r3, [sp, #4]
 80032b0:	b328      	cbz	r0, 80032fe <_scanf_i+0xba>
 80032b2:	f1b8 0f01 	cmp.w	r8, #1
 80032b6:	d156      	bne.n	8003366 <_scanf_i+0x122>
 80032b8:	6862      	ldr	r2, [r4, #4]
 80032ba:	b92a      	cbnz	r2, 80032c8 <_scanf_i+0x84>
 80032bc:	2208      	movs	r2, #8
 80032be:	6062      	str	r2, [r4, #4]
 80032c0:	6822      	ldr	r2, [r4, #0]
 80032c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032c6:	6022      	str	r2, [r4, #0]
 80032c8:	6822      	ldr	r2, [r4, #0]
 80032ca:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80032ce:	6022      	str	r2, [r4, #0]
 80032d0:	68a2      	ldr	r2, [r4, #8]
 80032d2:	1e51      	subs	r1, r2, #1
 80032d4:	60a1      	str	r1, [r4, #8]
 80032d6:	b192      	cbz	r2, 80032fe <_scanf_i+0xba>
 80032d8:	6832      	ldr	r2, [r6, #0]
 80032da:	1c5d      	adds	r5, r3, #1
 80032dc:	1c51      	adds	r1, r2, #1
 80032de:	6031      	str	r1, [r6, #0]
 80032e0:	7812      	ldrb	r2, [r2, #0]
 80032e2:	701a      	strb	r2, [r3, #0]
 80032e4:	6873      	ldr	r3, [r6, #4]
 80032e6:	3b01      	subs	r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	6073      	str	r3, [r6, #4]
 80032ec:	dc06      	bgt.n	80032fc <_scanf_i+0xb8>
 80032ee:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80032f2:	4631      	mov	r1, r6
 80032f4:	4658      	mov	r0, fp
 80032f6:	4798      	blx	r3
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d177      	bne.n	80033ec <_scanf_i+0x1a8>
 80032fc:	462b      	mov	r3, r5
 80032fe:	f108 0801 	add.w	r8, r8, #1
 8003302:	f1b8 0f03 	cmp.w	r8, #3
 8003306:	d1c9      	bne.n	800329c <_scanf_i+0x58>
 8003308:	6862      	ldr	r2, [r4, #4]
 800330a:	b90a      	cbnz	r2, 8003310 <_scanf_i+0xcc>
 800330c:	220a      	movs	r2, #10
 800330e:	6062      	str	r2, [r4, #4]
 8003310:	6862      	ldr	r2, [r4, #4]
 8003312:	4946      	ldr	r1, [pc, #280]	; (800342c <_scanf_i+0x1e8>)
 8003314:	6960      	ldr	r0, [r4, #20]
 8003316:	1a89      	subs	r1, r1, r2
 8003318:	9301      	str	r3, [sp, #4]
 800331a:	f000 f889 	bl	8003430 <__sccl>
 800331e:	9b01      	ldr	r3, [sp, #4]
 8003320:	f04f 0800 	mov.w	r8, #0
 8003324:	461d      	mov	r5, r3
 8003326:	68a3      	ldr	r3, [r4, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d039      	beq.n	80033a0 <_scanf_i+0x15c>
 800332c:	6831      	ldr	r1, [r6, #0]
 800332e:	6960      	ldr	r0, [r4, #20]
 8003330:	780a      	ldrb	r2, [r1, #0]
 8003332:	5c80      	ldrb	r0, [r0, r2]
 8003334:	2800      	cmp	r0, #0
 8003336:	d033      	beq.n	80033a0 <_scanf_i+0x15c>
 8003338:	2a30      	cmp	r2, #48	; 0x30
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	d121      	bne.n	8003382 <_scanf_i+0x13e>
 800333e:	0510      	lsls	r0, r2, #20
 8003340:	d51f      	bpl.n	8003382 <_scanf_i+0x13e>
 8003342:	f108 0801 	add.w	r8, r8, #1
 8003346:	b117      	cbz	r7, 800334e <_scanf_i+0x10a>
 8003348:	3301      	adds	r3, #1
 800334a:	3f01      	subs	r7, #1
 800334c:	60a3      	str	r3, [r4, #8]
 800334e:	6873      	ldr	r3, [r6, #4]
 8003350:	3b01      	subs	r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	6073      	str	r3, [r6, #4]
 8003356:	dd1c      	ble.n	8003392 <_scanf_i+0x14e>
 8003358:	6833      	ldr	r3, [r6, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	6033      	str	r3, [r6, #0]
 800335e:	68a3      	ldr	r3, [r4, #8]
 8003360:	3b01      	subs	r3, #1
 8003362:	60a3      	str	r3, [r4, #8]
 8003364:	e7df      	b.n	8003326 <_scanf_i+0xe2>
 8003366:	f1b8 0f02 	cmp.w	r8, #2
 800336a:	d1b1      	bne.n	80032d0 <_scanf_i+0x8c>
 800336c:	6822      	ldr	r2, [r4, #0]
 800336e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8003372:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003376:	d1c2      	bne.n	80032fe <_scanf_i+0xba>
 8003378:	2110      	movs	r1, #16
 800337a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800337e:	6061      	str	r1, [r4, #4]
 8003380:	e7a5      	b.n	80032ce <_scanf_i+0x8a>
 8003382:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8003386:	6022      	str	r2, [r4, #0]
 8003388:	780b      	ldrb	r3, [r1, #0]
 800338a:	3501      	adds	r5, #1
 800338c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8003390:	e7dd      	b.n	800334e <_scanf_i+0x10a>
 8003392:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003396:	4631      	mov	r1, r6
 8003398:	4658      	mov	r0, fp
 800339a:	4798      	blx	r3
 800339c:	2800      	cmp	r0, #0
 800339e:	d0de      	beq.n	800335e <_scanf_i+0x11a>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	05d9      	lsls	r1, r3, #23
 80033a4:	d50c      	bpl.n	80033c0 <_scanf_i+0x17c>
 80033a6:	454d      	cmp	r5, r9
 80033a8:	d908      	bls.n	80033bc <_scanf_i+0x178>
 80033aa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80033ae:	1e6f      	subs	r7, r5, #1
 80033b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80033b4:	4632      	mov	r2, r6
 80033b6:	4658      	mov	r0, fp
 80033b8:	4798      	blx	r3
 80033ba:	463d      	mov	r5, r7
 80033bc:	454d      	cmp	r5, r9
 80033be:	d02c      	beq.n	800341a <_scanf_i+0x1d6>
 80033c0:	6822      	ldr	r2, [r4, #0]
 80033c2:	f012 0210 	ands.w	r2, r2, #16
 80033c6:	d11e      	bne.n	8003406 <_scanf_i+0x1c2>
 80033c8:	702a      	strb	r2, [r5, #0]
 80033ca:	6863      	ldr	r3, [r4, #4]
 80033cc:	4649      	mov	r1, r9
 80033ce:	4658      	mov	r0, fp
 80033d0:	9e00      	ldr	r6, [sp, #0]
 80033d2:	47b0      	blx	r6
 80033d4:	6822      	ldr	r2, [r4, #0]
 80033d6:	f8da 3000 	ldr.w	r3, [sl]
 80033da:	f012 0f20 	tst.w	r2, #32
 80033de:	d008      	beq.n	80033f2 <_scanf_i+0x1ae>
 80033e0:	1d1a      	adds	r2, r3, #4
 80033e2:	f8ca 2000 	str.w	r2, [sl]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6018      	str	r0, [r3, #0]
 80033ea:	e009      	b.n	8003400 <_scanf_i+0x1bc>
 80033ec:	f04f 0800 	mov.w	r8, #0
 80033f0:	e7d6      	b.n	80033a0 <_scanf_i+0x15c>
 80033f2:	07d2      	lsls	r2, r2, #31
 80033f4:	d5f4      	bpl.n	80033e0 <_scanf_i+0x19c>
 80033f6:	1d1a      	adds	r2, r3, #4
 80033f8:	f8ca 2000 	str.w	r2, [sl]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	8018      	strh	r0, [r3, #0]
 8003400:	68e3      	ldr	r3, [r4, #12]
 8003402:	3301      	adds	r3, #1
 8003404:	60e3      	str	r3, [r4, #12]
 8003406:	2000      	movs	r0, #0
 8003408:	eba5 0509 	sub.w	r5, r5, r9
 800340c:	44a8      	add	r8, r5
 800340e:	6925      	ldr	r5, [r4, #16]
 8003410:	4445      	add	r5, r8
 8003412:	6125      	str	r5, [r4, #16]
 8003414:	b007      	add	sp, #28
 8003416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800341a:	2001      	movs	r0, #1
 800341c:	e7fa      	b.n	8003414 <_scanf_i+0x1d0>
 800341e:	bf00      	nop
 8003420:	08003a6c 	.word	0x08003a6c
 8003424:	080036b1 	.word	0x080036b1
 8003428:	08003591 	.word	0x08003591
 800342c:	08003ad3 	.word	0x08003ad3

08003430 <__sccl>:
 8003430:	b570      	push	{r4, r5, r6, lr}
 8003432:	780b      	ldrb	r3, [r1, #0]
 8003434:	1e44      	subs	r4, r0, #1
 8003436:	2b5e      	cmp	r3, #94	; 0x5e
 8003438:	bf13      	iteet	ne
 800343a:	1c4a      	addne	r2, r1, #1
 800343c:	1c8a      	addeq	r2, r1, #2
 800343e:	784b      	ldrbeq	r3, [r1, #1]
 8003440:	2100      	movne	r1, #0
 8003442:	bf08      	it	eq
 8003444:	2101      	moveq	r1, #1
 8003446:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800344a:	f804 1f01 	strb.w	r1, [r4, #1]!
 800344e:	42a5      	cmp	r5, r4
 8003450:	d1fb      	bne.n	800344a <__sccl+0x1a>
 8003452:	b913      	cbnz	r3, 800345a <__sccl+0x2a>
 8003454:	3a01      	subs	r2, #1
 8003456:	4610      	mov	r0, r2
 8003458:	bd70      	pop	{r4, r5, r6, pc}
 800345a:	f081 0401 	eor.w	r4, r1, #1
 800345e:	4611      	mov	r1, r2
 8003460:	54c4      	strb	r4, [r0, r3]
 8003462:	780d      	ldrb	r5, [r1, #0]
 8003464:	1c4a      	adds	r2, r1, #1
 8003466:	2d2d      	cmp	r5, #45	; 0x2d
 8003468:	d006      	beq.n	8003478 <__sccl+0x48>
 800346a:	2d5d      	cmp	r5, #93	; 0x5d
 800346c:	d0f3      	beq.n	8003456 <__sccl+0x26>
 800346e:	b90d      	cbnz	r5, 8003474 <__sccl+0x44>
 8003470:	460a      	mov	r2, r1
 8003472:	e7f0      	b.n	8003456 <__sccl+0x26>
 8003474:	462b      	mov	r3, r5
 8003476:	e7f2      	b.n	800345e <__sccl+0x2e>
 8003478:	784e      	ldrb	r6, [r1, #1]
 800347a:	2e5d      	cmp	r6, #93	; 0x5d
 800347c:	d0fa      	beq.n	8003474 <__sccl+0x44>
 800347e:	42b3      	cmp	r3, r6
 8003480:	dcf8      	bgt.n	8003474 <__sccl+0x44>
 8003482:	3102      	adds	r1, #2
 8003484:	3301      	adds	r3, #1
 8003486:	429e      	cmp	r6, r3
 8003488:	54c4      	strb	r4, [r0, r3]
 800348a:	dcfb      	bgt.n	8003484 <__sccl+0x54>
 800348c:	e7e9      	b.n	8003462 <__sccl+0x32>

0800348e <_strtol_l.isra.0>:
 800348e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003492:	4680      	mov	r8, r0
 8003494:	4689      	mov	r9, r1
 8003496:	4692      	mov	sl, r2
 8003498:	461f      	mov	r7, r3
 800349a:	468b      	mov	fp, r1
 800349c:	465d      	mov	r5, fp
 800349e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80034a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034a4:	f000 f94f 	bl	8003746 <__locale_ctype_ptr_l>
 80034a8:	4420      	add	r0, r4
 80034aa:	7846      	ldrb	r6, [r0, #1]
 80034ac:	f016 0608 	ands.w	r6, r6, #8
 80034b0:	d10b      	bne.n	80034ca <_strtol_l.isra.0+0x3c>
 80034b2:	2c2d      	cmp	r4, #45	; 0x2d
 80034b4:	d10b      	bne.n	80034ce <_strtol_l.isra.0+0x40>
 80034b6:	2601      	movs	r6, #1
 80034b8:	782c      	ldrb	r4, [r5, #0]
 80034ba:	f10b 0502 	add.w	r5, fp, #2
 80034be:	b167      	cbz	r7, 80034da <_strtol_l.isra.0+0x4c>
 80034c0:	2f10      	cmp	r7, #16
 80034c2:	d114      	bne.n	80034ee <_strtol_l.isra.0+0x60>
 80034c4:	2c30      	cmp	r4, #48	; 0x30
 80034c6:	d00a      	beq.n	80034de <_strtol_l.isra.0+0x50>
 80034c8:	e011      	b.n	80034ee <_strtol_l.isra.0+0x60>
 80034ca:	46ab      	mov	fp, r5
 80034cc:	e7e6      	b.n	800349c <_strtol_l.isra.0+0xe>
 80034ce:	2c2b      	cmp	r4, #43	; 0x2b
 80034d0:	bf04      	itt	eq
 80034d2:	782c      	ldrbeq	r4, [r5, #0]
 80034d4:	f10b 0502 	addeq.w	r5, fp, #2
 80034d8:	e7f1      	b.n	80034be <_strtol_l.isra.0+0x30>
 80034da:	2c30      	cmp	r4, #48	; 0x30
 80034dc:	d127      	bne.n	800352e <_strtol_l.isra.0+0xa0>
 80034de:	782b      	ldrb	r3, [r5, #0]
 80034e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80034e4:	2b58      	cmp	r3, #88	; 0x58
 80034e6:	d14b      	bne.n	8003580 <_strtol_l.isra.0+0xf2>
 80034e8:	2710      	movs	r7, #16
 80034ea:	786c      	ldrb	r4, [r5, #1]
 80034ec:	3502      	adds	r5, #2
 80034ee:	2e00      	cmp	r6, #0
 80034f0:	bf0c      	ite	eq
 80034f2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80034f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80034fa:	2200      	movs	r2, #0
 80034fc:	fbb1 fef7 	udiv	lr, r1, r7
 8003500:	4610      	mov	r0, r2
 8003502:	fb07 1c1e 	mls	ip, r7, lr, r1
 8003506:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800350a:	2b09      	cmp	r3, #9
 800350c:	d811      	bhi.n	8003532 <_strtol_l.isra.0+0xa4>
 800350e:	461c      	mov	r4, r3
 8003510:	42a7      	cmp	r7, r4
 8003512:	dd1d      	ble.n	8003550 <_strtol_l.isra.0+0xc2>
 8003514:	1c53      	adds	r3, r2, #1
 8003516:	d007      	beq.n	8003528 <_strtol_l.isra.0+0x9a>
 8003518:	4586      	cmp	lr, r0
 800351a:	d316      	bcc.n	800354a <_strtol_l.isra.0+0xbc>
 800351c:	d101      	bne.n	8003522 <_strtol_l.isra.0+0x94>
 800351e:	45a4      	cmp	ip, r4
 8003520:	db13      	blt.n	800354a <_strtol_l.isra.0+0xbc>
 8003522:	2201      	movs	r2, #1
 8003524:	fb00 4007 	mla	r0, r0, r7, r4
 8003528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800352c:	e7eb      	b.n	8003506 <_strtol_l.isra.0+0x78>
 800352e:	270a      	movs	r7, #10
 8003530:	e7dd      	b.n	80034ee <_strtol_l.isra.0+0x60>
 8003532:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003536:	2b19      	cmp	r3, #25
 8003538:	d801      	bhi.n	800353e <_strtol_l.isra.0+0xb0>
 800353a:	3c37      	subs	r4, #55	; 0x37
 800353c:	e7e8      	b.n	8003510 <_strtol_l.isra.0+0x82>
 800353e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003542:	2b19      	cmp	r3, #25
 8003544:	d804      	bhi.n	8003550 <_strtol_l.isra.0+0xc2>
 8003546:	3c57      	subs	r4, #87	; 0x57
 8003548:	e7e2      	b.n	8003510 <_strtol_l.isra.0+0x82>
 800354a:	f04f 32ff 	mov.w	r2, #4294967295
 800354e:	e7eb      	b.n	8003528 <_strtol_l.isra.0+0x9a>
 8003550:	1c53      	adds	r3, r2, #1
 8003552:	d108      	bne.n	8003566 <_strtol_l.isra.0+0xd8>
 8003554:	2322      	movs	r3, #34	; 0x22
 8003556:	4608      	mov	r0, r1
 8003558:	f8c8 3000 	str.w	r3, [r8]
 800355c:	f1ba 0f00 	cmp.w	sl, #0
 8003560:	d107      	bne.n	8003572 <_strtol_l.isra.0+0xe4>
 8003562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003566:	b106      	cbz	r6, 800356a <_strtol_l.isra.0+0xdc>
 8003568:	4240      	negs	r0, r0
 800356a:	f1ba 0f00 	cmp.w	sl, #0
 800356e:	d00c      	beq.n	800358a <_strtol_l.isra.0+0xfc>
 8003570:	b122      	cbz	r2, 800357c <_strtol_l.isra.0+0xee>
 8003572:	3d01      	subs	r5, #1
 8003574:	f8ca 5000 	str.w	r5, [sl]
 8003578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800357c:	464d      	mov	r5, r9
 800357e:	e7f9      	b.n	8003574 <_strtol_l.isra.0+0xe6>
 8003580:	2430      	movs	r4, #48	; 0x30
 8003582:	2f00      	cmp	r7, #0
 8003584:	d1b3      	bne.n	80034ee <_strtol_l.isra.0+0x60>
 8003586:	2708      	movs	r7, #8
 8003588:	e7b1      	b.n	80034ee <_strtol_l.isra.0+0x60>
 800358a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003590 <_strtol_r>:
 8003590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003592:	4c06      	ldr	r4, [pc, #24]	; (80035ac <_strtol_r+0x1c>)
 8003594:	4d06      	ldr	r5, [pc, #24]	; (80035b0 <_strtol_r+0x20>)
 8003596:	6824      	ldr	r4, [r4, #0]
 8003598:	6a24      	ldr	r4, [r4, #32]
 800359a:	2c00      	cmp	r4, #0
 800359c:	bf08      	it	eq
 800359e:	462c      	moveq	r4, r5
 80035a0:	9400      	str	r4, [sp, #0]
 80035a2:	f7ff ff74 	bl	800348e <_strtol_l.isra.0>
 80035a6:	b003      	add	sp, #12
 80035a8:	bd30      	pop	{r4, r5, pc}
 80035aa:	bf00      	nop
 80035ac:	2000000c 	.word	0x2000000c
 80035b0:	20000070 	.word	0x20000070

080035b4 <_strtoul_l.isra.0>:
 80035b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035b8:	4680      	mov	r8, r0
 80035ba:	4689      	mov	r9, r1
 80035bc:	4692      	mov	sl, r2
 80035be:	461e      	mov	r6, r3
 80035c0:	460f      	mov	r7, r1
 80035c2:	463d      	mov	r5, r7
 80035c4:	9808      	ldr	r0, [sp, #32]
 80035c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035ca:	f000 f8bc 	bl	8003746 <__locale_ctype_ptr_l>
 80035ce:	4420      	add	r0, r4
 80035d0:	7843      	ldrb	r3, [r0, #1]
 80035d2:	f013 0308 	ands.w	r3, r3, #8
 80035d6:	d10a      	bne.n	80035ee <_strtoul_l.isra.0+0x3a>
 80035d8:	2c2d      	cmp	r4, #45	; 0x2d
 80035da:	d10a      	bne.n	80035f2 <_strtoul_l.isra.0+0x3e>
 80035dc:	2301      	movs	r3, #1
 80035de:	782c      	ldrb	r4, [r5, #0]
 80035e0:	1cbd      	adds	r5, r7, #2
 80035e2:	b15e      	cbz	r6, 80035fc <_strtoul_l.isra.0+0x48>
 80035e4:	2e10      	cmp	r6, #16
 80035e6:	d113      	bne.n	8003610 <_strtoul_l.isra.0+0x5c>
 80035e8:	2c30      	cmp	r4, #48	; 0x30
 80035ea:	d009      	beq.n	8003600 <_strtoul_l.isra.0+0x4c>
 80035ec:	e010      	b.n	8003610 <_strtoul_l.isra.0+0x5c>
 80035ee:	462f      	mov	r7, r5
 80035f0:	e7e7      	b.n	80035c2 <_strtoul_l.isra.0+0xe>
 80035f2:	2c2b      	cmp	r4, #43	; 0x2b
 80035f4:	bf04      	itt	eq
 80035f6:	782c      	ldrbeq	r4, [r5, #0]
 80035f8:	1cbd      	addeq	r5, r7, #2
 80035fa:	e7f2      	b.n	80035e2 <_strtoul_l.isra.0+0x2e>
 80035fc:	2c30      	cmp	r4, #48	; 0x30
 80035fe:	d125      	bne.n	800364c <_strtoul_l.isra.0+0x98>
 8003600:	782a      	ldrb	r2, [r5, #0]
 8003602:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003606:	2a58      	cmp	r2, #88	; 0x58
 8003608:	d14a      	bne.n	80036a0 <_strtoul_l.isra.0+0xec>
 800360a:	2610      	movs	r6, #16
 800360c:	786c      	ldrb	r4, [r5, #1]
 800360e:	3502      	adds	r5, #2
 8003610:	f04f 31ff 	mov.w	r1, #4294967295
 8003614:	fbb1 f1f6 	udiv	r1, r1, r6
 8003618:	2700      	movs	r7, #0
 800361a:	fb06 fe01 	mul.w	lr, r6, r1
 800361e:	4638      	mov	r0, r7
 8003620:	ea6f 0e0e 	mvn.w	lr, lr
 8003624:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8003628:	2a09      	cmp	r2, #9
 800362a:	d811      	bhi.n	8003650 <_strtoul_l.isra.0+0x9c>
 800362c:	4614      	mov	r4, r2
 800362e:	42a6      	cmp	r6, r4
 8003630:	dd1d      	ble.n	800366e <_strtoul_l.isra.0+0xba>
 8003632:	2f00      	cmp	r7, #0
 8003634:	db18      	blt.n	8003668 <_strtoul_l.isra.0+0xb4>
 8003636:	4281      	cmp	r1, r0
 8003638:	d316      	bcc.n	8003668 <_strtoul_l.isra.0+0xb4>
 800363a:	d101      	bne.n	8003640 <_strtoul_l.isra.0+0x8c>
 800363c:	45a6      	cmp	lr, r4
 800363e:	db13      	blt.n	8003668 <_strtoul_l.isra.0+0xb4>
 8003640:	2701      	movs	r7, #1
 8003642:	fb00 4006 	mla	r0, r0, r6, r4
 8003646:	f815 4b01 	ldrb.w	r4, [r5], #1
 800364a:	e7eb      	b.n	8003624 <_strtoul_l.isra.0+0x70>
 800364c:	260a      	movs	r6, #10
 800364e:	e7df      	b.n	8003610 <_strtoul_l.isra.0+0x5c>
 8003650:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8003654:	2a19      	cmp	r2, #25
 8003656:	d801      	bhi.n	800365c <_strtoul_l.isra.0+0xa8>
 8003658:	3c37      	subs	r4, #55	; 0x37
 800365a:	e7e8      	b.n	800362e <_strtoul_l.isra.0+0x7a>
 800365c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8003660:	2a19      	cmp	r2, #25
 8003662:	d804      	bhi.n	800366e <_strtoul_l.isra.0+0xba>
 8003664:	3c57      	subs	r4, #87	; 0x57
 8003666:	e7e2      	b.n	800362e <_strtoul_l.isra.0+0x7a>
 8003668:	f04f 37ff 	mov.w	r7, #4294967295
 800366c:	e7eb      	b.n	8003646 <_strtoul_l.isra.0+0x92>
 800366e:	2f00      	cmp	r7, #0
 8003670:	da09      	bge.n	8003686 <_strtoul_l.isra.0+0xd2>
 8003672:	2322      	movs	r3, #34	; 0x22
 8003674:	f04f 30ff 	mov.w	r0, #4294967295
 8003678:	f8c8 3000 	str.w	r3, [r8]
 800367c:	f1ba 0f00 	cmp.w	sl, #0
 8003680:	d107      	bne.n	8003692 <_strtoul_l.isra.0+0xde>
 8003682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003686:	b103      	cbz	r3, 800368a <_strtoul_l.isra.0+0xd6>
 8003688:	4240      	negs	r0, r0
 800368a:	f1ba 0f00 	cmp.w	sl, #0
 800368e:	d00c      	beq.n	80036aa <_strtoul_l.isra.0+0xf6>
 8003690:	b127      	cbz	r7, 800369c <_strtoul_l.isra.0+0xe8>
 8003692:	3d01      	subs	r5, #1
 8003694:	f8ca 5000 	str.w	r5, [sl]
 8003698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800369c:	464d      	mov	r5, r9
 800369e:	e7f9      	b.n	8003694 <_strtoul_l.isra.0+0xe0>
 80036a0:	2430      	movs	r4, #48	; 0x30
 80036a2:	2e00      	cmp	r6, #0
 80036a4:	d1b4      	bne.n	8003610 <_strtoul_l.isra.0+0x5c>
 80036a6:	2608      	movs	r6, #8
 80036a8:	e7b2      	b.n	8003610 <_strtoul_l.isra.0+0x5c>
 80036aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080036b0 <_strtoul_r>:
 80036b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80036b2:	4c06      	ldr	r4, [pc, #24]	; (80036cc <_strtoul_r+0x1c>)
 80036b4:	4d06      	ldr	r5, [pc, #24]	; (80036d0 <_strtoul_r+0x20>)
 80036b6:	6824      	ldr	r4, [r4, #0]
 80036b8:	6a24      	ldr	r4, [r4, #32]
 80036ba:	2c00      	cmp	r4, #0
 80036bc:	bf08      	it	eq
 80036be:	462c      	moveq	r4, r5
 80036c0:	9400      	str	r4, [sp, #0]
 80036c2:	f7ff ff77 	bl	80035b4 <_strtoul_l.isra.0>
 80036c6:	b003      	add	sp, #12
 80036c8:	bd30      	pop	{r4, r5, pc}
 80036ca:	bf00      	nop
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	20000070 	.word	0x20000070

080036d4 <__submore>:
 80036d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036d8:	460c      	mov	r4, r1
 80036da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80036dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80036e0:	4299      	cmp	r1, r3
 80036e2:	d11c      	bne.n	800371e <__submore+0x4a>
 80036e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036e8:	f000 f8d0 	bl	800388c <_malloc_r>
 80036ec:	b918      	cbnz	r0, 80036f6 <__submore+0x22>
 80036ee:	f04f 30ff 	mov.w	r0, #4294967295
 80036f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80036fc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8003700:	6360      	str	r0, [r4, #52]	; 0x34
 8003702:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8003706:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800370a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800370e:	7043      	strb	r3, [r0, #1]
 8003710:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003714:	7003      	strb	r3, [r0, #0]
 8003716:	6020      	str	r0, [r4, #0]
 8003718:	2000      	movs	r0, #0
 800371a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800371e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003720:	0077      	lsls	r7, r6, #1
 8003722:	463a      	mov	r2, r7
 8003724:	f000 f910 	bl	8003948 <_realloc_r>
 8003728:	4605      	mov	r5, r0
 800372a:	2800      	cmp	r0, #0
 800372c:	d0df      	beq.n	80036ee <__submore+0x1a>
 800372e:	eb00 0806 	add.w	r8, r0, r6
 8003732:	4601      	mov	r1, r0
 8003734:	4632      	mov	r2, r6
 8003736:	4640      	mov	r0, r8
 8003738:	f000 f836 	bl	80037a8 <memcpy>
 800373c:	f8c4 8000 	str.w	r8, [r4]
 8003740:	6365      	str	r5, [r4, #52]	; 0x34
 8003742:	63a7      	str	r7, [r4, #56]	; 0x38
 8003744:	e7e8      	b.n	8003718 <__submore+0x44>

08003746 <__locale_ctype_ptr_l>:
 8003746:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800374a:	4770      	bx	lr

0800374c <__locale_ctype_ptr>:
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <__locale_ctype_ptr+0x14>)
 800374e:	4a05      	ldr	r2, [pc, #20]	; (8003764 <__locale_ctype_ptr+0x18>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf08      	it	eq
 8003758:	4613      	moveq	r3, r2
 800375a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800375e:	4770      	bx	lr
 8003760:	2000000c 	.word	0x2000000c
 8003764:	20000070 	.word	0x20000070

08003768 <__ascii_mbtowc>:
 8003768:	b082      	sub	sp, #8
 800376a:	b901      	cbnz	r1, 800376e <__ascii_mbtowc+0x6>
 800376c:	a901      	add	r1, sp, #4
 800376e:	b142      	cbz	r2, 8003782 <__ascii_mbtowc+0x1a>
 8003770:	b14b      	cbz	r3, 8003786 <__ascii_mbtowc+0x1e>
 8003772:	7813      	ldrb	r3, [r2, #0]
 8003774:	600b      	str	r3, [r1, #0]
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	1c10      	adds	r0, r2, #0
 800377a:	bf18      	it	ne
 800377c:	2001      	movne	r0, #1
 800377e:	b002      	add	sp, #8
 8003780:	4770      	bx	lr
 8003782:	4610      	mov	r0, r2
 8003784:	e7fb      	b.n	800377e <__ascii_mbtowc+0x16>
 8003786:	f06f 0001 	mvn.w	r0, #1
 800378a:	e7f8      	b.n	800377e <__ascii_mbtowc+0x16>

0800378c <memchr>:
 800378c:	b510      	push	{r4, lr}
 800378e:	b2c9      	uxtb	r1, r1
 8003790:	4402      	add	r2, r0
 8003792:	4290      	cmp	r0, r2
 8003794:	4603      	mov	r3, r0
 8003796:	d101      	bne.n	800379c <memchr+0x10>
 8003798:	2000      	movs	r0, #0
 800379a:	bd10      	pop	{r4, pc}
 800379c:	781c      	ldrb	r4, [r3, #0]
 800379e:	3001      	adds	r0, #1
 80037a0:	428c      	cmp	r4, r1
 80037a2:	d1f6      	bne.n	8003792 <memchr+0x6>
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd10      	pop	{r4, pc}

080037a8 <memcpy>:
 80037a8:	b510      	push	{r4, lr}
 80037aa:	1e43      	subs	r3, r0, #1
 80037ac:	440a      	add	r2, r1
 80037ae:	4291      	cmp	r1, r2
 80037b0:	d100      	bne.n	80037b4 <memcpy+0xc>
 80037b2:	bd10      	pop	{r4, pc}
 80037b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037bc:	e7f7      	b.n	80037ae <memcpy+0x6>

080037be <memmove>:
 80037be:	4288      	cmp	r0, r1
 80037c0:	b510      	push	{r4, lr}
 80037c2:	eb01 0302 	add.w	r3, r1, r2
 80037c6:	d803      	bhi.n	80037d0 <memmove+0x12>
 80037c8:	1e42      	subs	r2, r0, #1
 80037ca:	4299      	cmp	r1, r3
 80037cc:	d10c      	bne.n	80037e8 <memmove+0x2a>
 80037ce:	bd10      	pop	{r4, pc}
 80037d0:	4298      	cmp	r0, r3
 80037d2:	d2f9      	bcs.n	80037c8 <memmove+0xa>
 80037d4:	1881      	adds	r1, r0, r2
 80037d6:	1ad2      	subs	r2, r2, r3
 80037d8:	42d3      	cmn	r3, r2
 80037da:	d100      	bne.n	80037de <memmove+0x20>
 80037dc:	bd10      	pop	{r4, pc}
 80037de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037e2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037e6:	e7f7      	b.n	80037d8 <memmove+0x1a>
 80037e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ec:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037f0:	e7eb      	b.n	80037ca <memmove+0xc>
	...

080037f4 <_free_r>:
 80037f4:	b538      	push	{r3, r4, r5, lr}
 80037f6:	4605      	mov	r5, r0
 80037f8:	2900      	cmp	r1, #0
 80037fa:	d043      	beq.n	8003884 <_free_r+0x90>
 80037fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003800:	1f0c      	subs	r4, r1, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	bfb8      	it	lt
 8003806:	18e4      	addlt	r4, r4, r3
 8003808:	f000 f8e1 	bl	80039ce <__malloc_lock>
 800380c:	4a1e      	ldr	r2, [pc, #120]	; (8003888 <_free_r+0x94>)
 800380e:	6813      	ldr	r3, [r2, #0]
 8003810:	4610      	mov	r0, r2
 8003812:	b933      	cbnz	r3, 8003822 <_free_r+0x2e>
 8003814:	6063      	str	r3, [r4, #4]
 8003816:	6014      	str	r4, [r2, #0]
 8003818:	4628      	mov	r0, r5
 800381a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800381e:	f000 b8d7 	b.w	80039d0 <__malloc_unlock>
 8003822:	42a3      	cmp	r3, r4
 8003824:	d90b      	bls.n	800383e <_free_r+0x4a>
 8003826:	6821      	ldr	r1, [r4, #0]
 8003828:	1862      	adds	r2, r4, r1
 800382a:	4293      	cmp	r3, r2
 800382c:	bf01      	itttt	eq
 800382e:	681a      	ldreq	r2, [r3, #0]
 8003830:	685b      	ldreq	r3, [r3, #4]
 8003832:	1852      	addeq	r2, r2, r1
 8003834:	6022      	streq	r2, [r4, #0]
 8003836:	6063      	str	r3, [r4, #4]
 8003838:	6004      	str	r4, [r0, #0]
 800383a:	e7ed      	b.n	8003818 <_free_r+0x24>
 800383c:	4613      	mov	r3, r2
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	b10a      	cbz	r2, 8003846 <_free_r+0x52>
 8003842:	42a2      	cmp	r2, r4
 8003844:	d9fa      	bls.n	800383c <_free_r+0x48>
 8003846:	6819      	ldr	r1, [r3, #0]
 8003848:	1858      	adds	r0, r3, r1
 800384a:	42a0      	cmp	r0, r4
 800384c:	d10b      	bne.n	8003866 <_free_r+0x72>
 800384e:	6820      	ldr	r0, [r4, #0]
 8003850:	4401      	add	r1, r0
 8003852:	1858      	adds	r0, r3, r1
 8003854:	4282      	cmp	r2, r0
 8003856:	6019      	str	r1, [r3, #0]
 8003858:	d1de      	bne.n	8003818 <_free_r+0x24>
 800385a:	6810      	ldr	r0, [r2, #0]
 800385c:	6852      	ldr	r2, [r2, #4]
 800385e:	4401      	add	r1, r0
 8003860:	6019      	str	r1, [r3, #0]
 8003862:	605a      	str	r2, [r3, #4]
 8003864:	e7d8      	b.n	8003818 <_free_r+0x24>
 8003866:	d902      	bls.n	800386e <_free_r+0x7a>
 8003868:	230c      	movs	r3, #12
 800386a:	602b      	str	r3, [r5, #0]
 800386c:	e7d4      	b.n	8003818 <_free_r+0x24>
 800386e:	6820      	ldr	r0, [r4, #0]
 8003870:	1821      	adds	r1, r4, r0
 8003872:	428a      	cmp	r2, r1
 8003874:	bf01      	itttt	eq
 8003876:	6811      	ldreq	r1, [r2, #0]
 8003878:	6852      	ldreq	r2, [r2, #4]
 800387a:	1809      	addeq	r1, r1, r0
 800387c:	6021      	streq	r1, [r4, #0]
 800387e:	6062      	str	r2, [r4, #4]
 8003880:	605c      	str	r4, [r3, #4]
 8003882:	e7c9      	b.n	8003818 <_free_r+0x24>
 8003884:	bd38      	pop	{r3, r4, r5, pc}
 8003886:	bf00      	nop
 8003888:	200002fc 	.word	0x200002fc

0800388c <_malloc_r>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	1ccd      	adds	r5, r1, #3
 8003890:	f025 0503 	bic.w	r5, r5, #3
 8003894:	3508      	adds	r5, #8
 8003896:	2d0c      	cmp	r5, #12
 8003898:	bf38      	it	cc
 800389a:	250c      	movcc	r5, #12
 800389c:	2d00      	cmp	r5, #0
 800389e:	4606      	mov	r6, r0
 80038a0:	db01      	blt.n	80038a6 <_malloc_r+0x1a>
 80038a2:	42a9      	cmp	r1, r5
 80038a4:	d903      	bls.n	80038ae <_malloc_r+0x22>
 80038a6:	230c      	movs	r3, #12
 80038a8:	6033      	str	r3, [r6, #0]
 80038aa:	2000      	movs	r0, #0
 80038ac:	bd70      	pop	{r4, r5, r6, pc}
 80038ae:	f000 f88e 	bl	80039ce <__malloc_lock>
 80038b2:	4a23      	ldr	r2, [pc, #140]	; (8003940 <_malloc_r+0xb4>)
 80038b4:	6814      	ldr	r4, [r2, #0]
 80038b6:	4621      	mov	r1, r4
 80038b8:	b991      	cbnz	r1, 80038e0 <_malloc_r+0x54>
 80038ba:	4c22      	ldr	r4, [pc, #136]	; (8003944 <_malloc_r+0xb8>)
 80038bc:	6823      	ldr	r3, [r4, #0]
 80038be:	b91b      	cbnz	r3, 80038c8 <_malloc_r+0x3c>
 80038c0:	4630      	mov	r0, r6
 80038c2:	f000 f867 	bl	8003994 <_sbrk_r>
 80038c6:	6020      	str	r0, [r4, #0]
 80038c8:	4629      	mov	r1, r5
 80038ca:	4630      	mov	r0, r6
 80038cc:	f000 f862 	bl	8003994 <_sbrk_r>
 80038d0:	1c43      	adds	r3, r0, #1
 80038d2:	d126      	bne.n	8003922 <_malloc_r+0x96>
 80038d4:	230c      	movs	r3, #12
 80038d6:	4630      	mov	r0, r6
 80038d8:	6033      	str	r3, [r6, #0]
 80038da:	f000 f879 	bl	80039d0 <__malloc_unlock>
 80038de:	e7e4      	b.n	80038aa <_malloc_r+0x1e>
 80038e0:	680b      	ldr	r3, [r1, #0]
 80038e2:	1b5b      	subs	r3, r3, r5
 80038e4:	d41a      	bmi.n	800391c <_malloc_r+0x90>
 80038e6:	2b0b      	cmp	r3, #11
 80038e8:	d90f      	bls.n	800390a <_malloc_r+0x7e>
 80038ea:	600b      	str	r3, [r1, #0]
 80038ec:	18cc      	adds	r4, r1, r3
 80038ee:	50cd      	str	r5, [r1, r3]
 80038f0:	4630      	mov	r0, r6
 80038f2:	f000 f86d 	bl	80039d0 <__malloc_unlock>
 80038f6:	f104 000b 	add.w	r0, r4, #11
 80038fa:	1d23      	adds	r3, r4, #4
 80038fc:	f020 0007 	bic.w	r0, r0, #7
 8003900:	1ac3      	subs	r3, r0, r3
 8003902:	d01b      	beq.n	800393c <_malloc_r+0xb0>
 8003904:	425a      	negs	r2, r3
 8003906:	50e2      	str	r2, [r4, r3]
 8003908:	bd70      	pop	{r4, r5, r6, pc}
 800390a:	428c      	cmp	r4, r1
 800390c:	bf0b      	itete	eq
 800390e:	6863      	ldreq	r3, [r4, #4]
 8003910:	684b      	ldrne	r3, [r1, #4]
 8003912:	6013      	streq	r3, [r2, #0]
 8003914:	6063      	strne	r3, [r4, #4]
 8003916:	bf18      	it	ne
 8003918:	460c      	movne	r4, r1
 800391a:	e7e9      	b.n	80038f0 <_malloc_r+0x64>
 800391c:	460c      	mov	r4, r1
 800391e:	6849      	ldr	r1, [r1, #4]
 8003920:	e7ca      	b.n	80038b8 <_malloc_r+0x2c>
 8003922:	1cc4      	adds	r4, r0, #3
 8003924:	f024 0403 	bic.w	r4, r4, #3
 8003928:	42a0      	cmp	r0, r4
 800392a:	d005      	beq.n	8003938 <_malloc_r+0xac>
 800392c:	1a21      	subs	r1, r4, r0
 800392e:	4630      	mov	r0, r6
 8003930:	f000 f830 	bl	8003994 <_sbrk_r>
 8003934:	3001      	adds	r0, #1
 8003936:	d0cd      	beq.n	80038d4 <_malloc_r+0x48>
 8003938:	6025      	str	r5, [r4, #0]
 800393a:	e7d9      	b.n	80038f0 <_malloc_r+0x64>
 800393c:	bd70      	pop	{r4, r5, r6, pc}
 800393e:	bf00      	nop
 8003940:	200002fc 	.word	0x200002fc
 8003944:	20000300 	.word	0x20000300

08003948 <_realloc_r>:
 8003948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800394a:	4607      	mov	r7, r0
 800394c:	4614      	mov	r4, r2
 800394e:	460e      	mov	r6, r1
 8003950:	b921      	cbnz	r1, 800395c <_realloc_r+0x14>
 8003952:	4611      	mov	r1, r2
 8003954:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003958:	f7ff bf98 	b.w	800388c <_malloc_r>
 800395c:	b922      	cbnz	r2, 8003968 <_realloc_r+0x20>
 800395e:	f7ff ff49 	bl	80037f4 <_free_r>
 8003962:	4625      	mov	r5, r4
 8003964:	4628      	mov	r0, r5
 8003966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003968:	f000 f833 	bl	80039d2 <_malloc_usable_size_r>
 800396c:	4284      	cmp	r4, r0
 800396e:	d90f      	bls.n	8003990 <_realloc_r+0x48>
 8003970:	4621      	mov	r1, r4
 8003972:	4638      	mov	r0, r7
 8003974:	f7ff ff8a 	bl	800388c <_malloc_r>
 8003978:	4605      	mov	r5, r0
 800397a:	2800      	cmp	r0, #0
 800397c:	d0f2      	beq.n	8003964 <_realloc_r+0x1c>
 800397e:	4631      	mov	r1, r6
 8003980:	4622      	mov	r2, r4
 8003982:	f7ff ff11 	bl	80037a8 <memcpy>
 8003986:	4631      	mov	r1, r6
 8003988:	4638      	mov	r0, r7
 800398a:	f7ff ff33 	bl	80037f4 <_free_r>
 800398e:	e7e9      	b.n	8003964 <_realloc_r+0x1c>
 8003990:	4635      	mov	r5, r6
 8003992:	e7e7      	b.n	8003964 <_realloc_r+0x1c>

08003994 <_sbrk_r>:
 8003994:	b538      	push	{r3, r4, r5, lr}
 8003996:	2300      	movs	r3, #0
 8003998:	4c05      	ldr	r4, [pc, #20]	; (80039b0 <_sbrk_r+0x1c>)
 800399a:	4605      	mov	r5, r0
 800399c:	4608      	mov	r0, r1
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	f7fe fe66 	bl	8002670 <_sbrk>
 80039a4:	1c43      	adds	r3, r0, #1
 80039a6:	d102      	bne.n	80039ae <_sbrk_r+0x1a>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	b103      	cbz	r3, 80039ae <_sbrk_r+0x1a>
 80039ac:	602b      	str	r3, [r5, #0]
 80039ae:	bd38      	pop	{r3, r4, r5, pc}
 80039b0:	2000039c 	.word	0x2000039c

080039b4 <__ascii_wctomb>:
 80039b4:	b149      	cbz	r1, 80039ca <__ascii_wctomb+0x16>
 80039b6:	2aff      	cmp	r2, #255	; 0xff
 80039b8:	bf8b      	itete	hi
 80039ba:	238a      	movhi	r3, #138	; 0x8a
 80039bc:	700a      	strbls	r2, [r1, #0]
 80039be:	6003      	strhi	r3, [r0, #0]
 80039c0:	2001      	movls	r0, #1
 80039c2:	bf88      	it	hi
 80039c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80039c8:	4770      	bx	lr
 80039ca:	4608      	mov	r0, r1
 80039cc:	4770      	bx	lr

080039ce <__malloc_lock>:
 80039ce:	4770      	bx	lr

080039d0 <__malloc_unlock>:
 80039d0:	4770      	bx	lr

080039d2 <_malloc_usable_size_r>:
 80039d2:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80039d6:	2800      	cmp	r0, #0
 80039d8:	f1a0 0004 	sub.w	r0, r0, #4
 80039dc:	bfbc      	itt	lt
 80039de:	580b      	ldrlt	r3, [r1, r0]
 80039e0:	18c0      	addlt	r0, r0, r3
 80039e2:	4770      	bx	lr

080039e4 <_init>:
 80039e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e6:	bf00      	nop
 80039e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ea:	bc08      	pop	{r3}
 80039ec:	469e      	mov	lr, r3
 80039ee:	4770      	bx	lr

080039f0 <_fini>:
 80039f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f2:	bf00      	nop
 80039f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039f6:	bc08      	pop	{r3}
 80039f8:	469e      	mov	lr, r3
 80039fa:	4770      	bx	lr
