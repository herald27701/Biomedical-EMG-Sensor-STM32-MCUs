
Project_BluePill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000534c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005458  08005458  00015458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080054e4  080054e4  000154e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080054e8  080054e8  000154e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  080054ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000144  20000070  0800555c  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001b4  0800555c  000201b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010c7f  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023c7  00000000  00000000  00030d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001160  00000000  00000000  000330e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001090  00000000  00000000  00034240  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008af0  00000000  00000000  000352d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004fc6  00000000  00000000  0003ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00042d86  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004cf0  00000000  00000000  00042e04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005440 	.word	0x08005440

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005440 	.word	0x08005440

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fe1b 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	200f      	movs	r0, #15
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f004 fae8 	bl	800473c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <HAL_InitTick+0x54>)
 8000182:	681a      	ldr	r2, [r3, #0]
 8000184:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <HAL_InitTick+0x58>)
 8000186:	781b      	ldrb	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000192:	fbb2 f3f3 	udiv	r3, r2, r3
 8000196:	4618      	mov	r0, r3
 8000198:	f000 fe33 	bl	8000e02 <HAL_SYSTICK_Config>
 800019c:	4603      	mov	r3, r0
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d001      	beq.n	80001a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001a2:	2301      	movs	r3, #1
 80001a4:	e00e      	b.n	80001c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	2b0f      	cmp	r3, #15
 80001aa:	d80a      	bhi.n	80001c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ac:	2200      	movs	r2, #0
 80001ae:	6879      	ldr	r1, [r7, #4]
 80001b0:	f04f 30ff 	mov.w	r0, #4294967295
 80001b4:	f000 fdfb 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001b8:	4a06      	ldr	r2, [pc, #24]	; (80001d4 <HAL_InitTick+0x5c>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001be:	2300      	movs	r3, #0
 80001c0:	e000      	b.n	80001c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001c2:	2301      	movs	r3, #1
}
 80001c4:	4618      	mov	r0, r3
 80001c6:	3708      	adds	r7, #8
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000008 	.word	0x20000008
 80001d0:	20000004 	.word	0x20000004
 80001d4:	20000000 	.word	0x20000000

080001d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <HAL_IncTick+0x1c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	461a      	mov	r2, r3
 80001e2:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <HAL_IncTick+0x20>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	4413      	add	r3, r2
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <HAL_IncTick+0x20>)
 80001ea:	6013      	str	r3, [r2, #0]
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr
 80001f4:	20000004 	.word	0x20000004
 80001f8:	20000098 	.word	0x20000098

080001fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <HAL_GetTick+0x10>)
 8000202:	681b      	ldr	r3, [r3, #0]
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000098 	.word	0x20000098

08000210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000218:	f7ff fff0 	bl	80001fc <HAL_GetTick>
 800021c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000222:	68fb      	ldr	r3, [r7, #12]
 8000224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000228:	d005      	beq.n	8000236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <HAL_Delay+0x40>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	461a      	mov	r2, r3
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	4413      	add	r3, r2
 8000234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000236:	bf00      	nop
 8000238:	f7ff ffe0 	bl	80001fc <HAL_GetTick>
 800023c:	4602      	mov	r2, r0
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	1ad2      	subs	r2, r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	429a      	cmp	r2, r3
 8000246:	d3f7      	bcc.n	8000238 <HAL_Delay+0x28>
  {
  }
}
 8000248:	bf00      	nop
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000004 	.word	0x20000004

08000254 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b086      	sub	sp, #24
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800025c:	2300      	movs	r3, #0
 800025e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000260:	2300      	movs	r3, #0
 8000262:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000264:	2300      	movs	r3, #0
 8000266:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d101      	bne.n	8000276 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000272:	2301      	movs	r3, #1
 8000274:	e0be      	b.n	80003f4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000280:	2b00      	cmp	r3, #0
 8000282:	d109      	bne.n	8000298 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	2200      	movs	r2, #0
 8000288:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	2200      	movs	r2, #0
 800028e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000292:	6878      	ldr	r0, [r7, #4]
 8000294:	f004 fa84 	bl	80047a0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f000 fbc5 	bl	8000a28 <ADC_ConversionStop_Disable>
 800029e:	4603      	mov	r3, r0
 80002a0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002a6:	f003 0310 	and.w	r3, r3, #16
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8099 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	f040 8095 	bne.w	80003e2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80002c0:	f023 0302 	bic.w	r3, r3, #2
 80002c4:	f043 0202 	orr.w	r2, r3, #2
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002d4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	7b1b      	ldrb	r3, [r3, #12]
 80002da:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80002dc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80002de:	68ba      	ldr	r2, [r7, #8]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002ec:	d003      	beq.n	80002f6 <HAL_ADC_Init+0xa2>
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d102      	bne.n	80002fc <HAL_ADC_Init+0xa8>
 80002f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002fa:	e000      	b.n	80002fe <HAL_ADC_Init+0xaa>
 80002fc:	2300      	movs	r3, #0
 80002fe:	693a      	ldr	r2, [r7, #16]
 8000300:	4313      	orrs	r3, r2
 8000302:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	7d1b      	ldrb	r3, [r3, #20]
 8000308:	2b01      	cmp	r3, #1
 800030a:	d119      	bne.n	8000340 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	7b1b      	ldrb	r3, [r3, #12]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d109      	bne.n	8000328 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	3b01      	subs	r3, #1
 800031a:	035a      	lsls	r2, r3, #13
 800031c:	693b      	ldr	r3, [r7, #16]
 800031e:	4313      	orrs	r3, r2
 8000320:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000324:	613b      	str	r3, [r7, #16]
 8000326:	e00b      	b.n	8000340 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800032c:	f043 0220 	orr.w	r2, r3, #32
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000338:	f043 0201 	orr.w	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	6812      	ldr	r2, [r2, #0]
 8000348:	6852      	ldr	r2, [r2, #4]
 800034a:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	430a      	orrs	r2, r1
 8000352:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	6899      	ldr	r1, [r3, #8]
 800035e:	4b27      	ldr	r3, [pc, #156]	; (80003fc <HAL_ADC_Init+0x1a8>)
 8000360:	400b      	ands	r3, r1
 8000362:	68b9      	ldr	r1, [r7, #8]
 8000364:	430b      	orrs	r3, r1
 8000366:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000370:	d003      	beq.n	800037a <HAL_ADC_Init+0x126>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d104      	bne.n	8000384 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	691b      	ldr	r3, [r3, #16]
 800037e:	3b01      	subs	r3, #1
 8000380:	051b      	lsls	r3, r3, #20
 8000382:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	6812      	ldr	r2, [r2, #0]
 800038c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800038e:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 8000392:	68fa      	ldr	r2, [r7, #12]
 8000394:	430a      	orrs	r2, r1
 8000396:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	689a      	ldr	r2, [r3, #8]
 800039e:	4b18      	ldr	r3, [pc, #96]	; (8000400 <HAL_ADC_Init+0x1ac>)
 80003a0:	4013      	ands	r3, r2
 80003a2:	68ba      	ldr	r2, [r7, #8]
 80003a4:	4293      	cmp	r3, r2
 80003a6:	d10b      	bne.n	80003c0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2200      	movs	r2, #0
 80003ac:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003b2:	f023 0303 	bic.w	r3, r3, #3
 80003b6:	f043 0201 	orr.w	r2, r3, #1
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003be:	e018      	b.n	80003f2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c4:	f023 0312 	bic.w	r3, r3, #18
 80003c8:	f043 0210 	orr.w	r2, r3, #16
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003d4:	f043 0201 	orr.w	r2, r3, #1
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003dc:	2301      	movs	r3, #1
 80003de:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003e0:	e007      	b.n	80003f2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003e6:	f043 0210 	orr.w	r2, r3, #16
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003ee:	2301      	movs	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000400:	ff1f0efe 	.word	0xff1f0efe

08000404 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800040c:	2300      	movs	r3, #0
 800040e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000416:	2b01      	cmp	r3, #1
 8000418:	d101      	bne.n	800041e <HAL_ADC_Start+0x1a>
 800041a:	2302      	movs	r3, #2
 800041c:	e098      	b.n	8000550 <HAL_ADC_Start+0x14c>
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2201      	movs	r2, #1
 8000422:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f000 faa4 	bl	8000974 <ADC_Enable>
 800042c:	4603      	mov	r3, r0
 800042e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000430:	7bfb      	ldrb	r3, [r7, #15]
 8000432:	2b00      	cmp	r3, #0
 8000434:	f040 8087 	bne.w	8000546 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800043c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000440:	f023 0301 	bic.w	r3, r3, #1
 8000444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a41      	ldr	r2, [pc, #260]	; (8000558 <HAL_ADC_Start+0x154>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d105      	bne.n	8000462 <HAL_ADC_Start+0x5e>
 8000456:	4b41      	ldr	r3, [pc, #260]	; (800055c <HAL_ADC_Start+0x158>)
 8000458:	685b      	ldr	r3, [r3, #4]
 800045a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800045e:	2b00      	cmp	r3, #0
 8000460:	d115      	bne.n	800048e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000466:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	685b      	ldr	r3, [r3, #4]
 8000474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000478:	2b00      	cmp	r3, #0
 800047a:	d026      	beq.n	80004ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000480:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000484:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800048c:	e01d      	b.n	80004ca <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	4a2f      	ldr	r2, [pc, #188]	; (800055c <HAL_ADC_Start+0x158>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d004      	beq.n	80004ae <HAL_ADC_Start+0xaa>
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2b      	ldr	r2, [pc, #172]	; (8000558 <HAL_ADC_Start+0x154>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d10d      	bne.n	80004ca <HAL_ADC_Start+0xc6>
 80004ae:	4b2b      	ldr	r3, [pc, #172]	; (800055c <HAL_ADC_Start+0x158>)
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d007      	beq.n	80004ca <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80004c2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d006      	beq.n	80004e4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	f023 0206 	bic.w	r2, r3, #6
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c
 80004e2:	e002      	b.n	80004ea <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f06f 0202 	mvn.w	r2, #2
 80004fa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000506:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800050a:	d113      	bne.n	8000534 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000510:	4a11      	ldr	r2, [pc, #68]	; (8000558 <HAL_ADC_Start+0x154>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d105      	bne.n	8000522 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000516:	4b11      	ldr	r3, [pc, #68]	; (800055c <HAL_ADC_Start+0x158>)
 8000518:	685b      	ldr	r3, [r3, #4]
 800051a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800051e:	2b00      	cmp	r3, #0
 8000520:	d108      	bne.n	8000534 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	6812      	ldr	r2, [r2, #0]
 800052a:	6892      	ldr	r2, [r2, #8]
 800052c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	e00c      	b.n	800054e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	6812      	ldr	r2, [r2, #0]
 800053c:	6892      	ldr	r2, [r2, #8]
 800053e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	e003      	b.n	800054e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2200      	movs	r2, #0
 800054a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800054e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	40012800 	.word	0x40012800
 800055c:	40012400 	.word	0x40012400

08000560 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b087      	sub	sp, #28
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800056e:	2300      	movs	r3, #0
 8000570:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000576:	f7ff fe41 	bl	80001fc <HAL_GetTick>
 800057a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000586:	2b00      	cmp	r3, #0
 8000588:	d00b      	beq.n	80005a2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800058e:	f043 0220 	orr.w	r2, r3, #32
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	e0d3      	b.n	800074a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d131      	bne.n	8000614 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d12a      	bne.n	8000614 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005be:	e021      	b.n	8000604 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005c6:	d01d      	beq.n	8000604 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d007      	beq.n	80005de <HAL_ADC_PollForConversion+0x7e>
 80005ce:	f7ff fe15 	bl	80001fc <HAL_GetTick>
 80005d2:	4602      	mov	r2, r0
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	1ad2      	subs	r2, r2, r3
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	429a      	cmp	r2, r3
 80005dc:	d912      	bls.n	8000604 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f003 0302 	and.w	r3, r3, #2
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d10b      	bne.n	8000604 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005f0:	f043 0204 	orr.w	r2, r3, #4
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2200      	movs	r2, #0
 80005fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000600:	2303      	movs	r3, #3
 8000602:	e0a2      	b.n	800074a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f003 0302 	and.w	r3, r3, #2
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0d6      	beq.n	80005c0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000612:	e070      	b.n	80006f6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000614:	4b4f      	ldr	r3, [pc, #316]	; (8000754 <HAL_ADC_PollForConversion+0x1f4>)
 8000616:	681c      	ldr	r4, [r3, #0]
 8000618:	2002      	movs	r0, #2
 800061a:	f001 ff37 	bl	800248c <HAL_RCCEx_GetPeriphCLKFreq>
 800061e:	4603      	mov	r3, r0
 8000620:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6919      	ldr	r1, [r3, #16]
 800062a:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <HAL_ADC_PollForConversion+0x1f8>)
 800062c:	400b      	ands	r3, r1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d118      	bne.n	8000664 <HAL_ADC_PollForConversion+0x104>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	68d9      	ldr	r1, [r3, #12]
 8000638:	4b48      	ldr	r3, [pc, #288]	; (800075c <HAL_ADC_PollForConversion+0x1fc>)
 800063a:	400b      	ands	r3, r1
 800063c:	2b00      	cmp	r3, #0
 800063e:	d111      	bne.n	8000664 <HAL_ADC_PollForConversion+0x104>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	6919      	ldr	r1, [r3, #16]
 8000646:	4b46      	ldr	r3, [pc, #280]	; (8000760 <HAL_ADC_PollForConversion+0x200>)
 8000648:	400b      	ands	r3, r1
 800064a:	2b00      	cmp	r3, #0
 800064c:	d108      	bne.n	8000660 <HAL_ADC_PollForConversion+0x100>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	68d9      	ldr	r1, [r3, #12]
 8000654:	4b43      	ldr	r3, [pc, #268]	; (8000764 <HAL_ADC_PollForConversion+0x204>)
 8000656:	400b      	ands	r3, r1
 8000658:	2b00      	cmp	r3, #0
 800065a:	d101      	bne.n	8000660 <HAL_ADC_PollForConversion+0x100>
 800065c:	2314      	movs	r3, #20
 800065e:	e020      	b.n	80006a2 <HAL_ADC_PollForConversion+0x142>
 8000660:	2329      	movs	r3, #41	; 0x29
 8000662:	e01e      	b.n	80006a2 <HAL_ADC_PollForConversion+0x142>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	6919      	ldr	r1, [r3, #16]
 800066a:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <HAL_ADC_PollForConversion+0x200>)
 800066c:	400b      	ands	r3, r1
 800066e:	2b00      	cmp	r3, #0
 8000670:	d106      	bne.n	8000680 <HAL_ADC_PollForConversion+0x120>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	68d9      	ldr	r1, [r3, #12]
 8000678:	4b3a      	ldr	r3, [pc, #232]	; (8000764 <HAL_ADC_PollForConversion+0x204>)
 800067a:	400b      	ands	r3, r1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d00d      	beq.n	800069c <HAL_ADC_PollForConversion+0x13c>
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	6919      	ldr	r1, [r3, #16]
 8000686:	4b38      	ldr	r3, [pc, #224]	; (8000768 <HAL_ADC_PollForConversion+0x208>)
 8000688:	400b      	ands	r3, r1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d108      	bne.n	80006a0 <HAL_ADC_PollForConversion+0x140>
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	68d9      	ldr	r1, [r3, #12]
 8000694:	4b34      	ldr	r3, [pc, #208]	; (8000768 <HAL_ADC_PollForConversion+0x208>)
 8000696:	400b      	ands	r3, r1
 8000698:	2b00      	cmp	r3, #0
 800069a:	d101      	bne.n	80006a0 <HAL_ADC_PollForConversion+0x140>
 800069c:	2354      	movs	r3, #84	; 0x54
 800069e:	e000      	b.n	80006a2 <HAL_ADC_PollForConversion+0x142>
 80006a0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80006a2:	fb03 f302 	mul.w	r3, r3, r2
 80006a6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80006a8:	e021      	b.n	80006ee <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b0:	d01a      	beq.n	80006e8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d007      	beq.n	80006c8 <HAL_ADC_PollForConversion+0x168>
 80006b8:	f7ff fda0 	bl	80001fc <HAL_GetTick>
 80006bc:	4602      	mov	r2, r0
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	1ad2      	subs	r2, r2, r3
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d90f      	bls.n	80006e8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80006c8:	68fa      	ldr	r2, [r7, #12]
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d20b      	bcs.n	80006e8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006d4:	f043 0204 	orr.w	r2, r3, #4
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2200      	movs	r2, #0
 80006e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80006e4:	2303      	movs	r3, #3
 80006e6:	e030      	b.n	800074a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	3301      	adds	r3, #1
 80006ec:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	d3d9      	bcc.n	80006aa <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f06f 0212 	mvn.w	r2, #18
 80006fe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000704:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000716:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800071a:	d115      	bne.n	8000748 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000720:	2b00      	cmp	r3, #0
 8000722:	d111      	bne.n	8000748 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000738:	2b00      	cmp	r3, #0
 800073a:	d105      	bne.n	8000748 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000740:	f043 0201 	orr.w	r2, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	371c      	adds	r7, #28
 800074e:	46bd      	mov	sp, r7
 8000750:	bd90      	pop	{r4, r7, pc}
 8000752:	bf00      	nop
 8000754:	20000008 	.word	0x20000008
 8000758:	24924924 	.word	0x24924924
 800075c:	00924924 	.word	0x00924924
 8000760:	12492492 	.word	0x12492492
 8000764:	00492492 	.word	0x00492492
 8000768:	00249249 	.word	0x00249249

0800076c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000784:	b490      	push	{r4, r7}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800079c:	2b01      	cmp	r3, #1
 800079e:	d101      	bne.n	80007a4 <HAL_ADC_ConfigChannel+0x20>
 80007a0:	2302      	movs	r3, #2
 80007a2:	e0dc      	b.n	800095e <HAL_ADC_ConfigChannel+0x1da>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2201      	movs	r2, #1
 80007a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2b06      	cmp	r3, #6
 80007b2:	d81c      	bhi.n	80007ee <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6819      	ldr	r1, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685a      	ldr	r2, [r3, #4]
 80007c2:	4613      	mov	r3, r2
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	4413      	add	r3, r2
 80007c8:	3b05      	subs	r3, #5
 80007ca:	221f      	movs	r2, #31
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	43db      	mvns	r3, r3
 80007d2:	4018      	ands	r0, r3
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	681c      	ldr	r4, [r3, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	685a      	ldr	r2, [r3, #4]
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	3b05      	subs	r3, #5
 80007e4:	fa04 f303 	lsl.w	r3, r4, r3
 80007e8:	4303      	orrs	r3, r0
 80007ea:	634b      	str	r3, [r1, #52]	; 0x34
 80007ec:	e03c      	b.n	8000868 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	2b0c      	cmp	r3, #12
 80007f4:	d81c      	bhi.n	8000830 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6819      	ldr	r1, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	3b23      	subs	r3, #35	; 0x23
 800080c:	221f      	movs	r2, #31
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	4018      	ands	r0, r3
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	681c      	ldr	r4, [r3, #0]
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	4613      	mov	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	4413      	add	r3, r2
 8000824:	3b23      	subs	r3, #35	; 0x23
 8000826:	fa04 f303 	lsl.w	r3, r4, r3
 800082a:	4303      	orrs	r3, r0
 800082c:	630b      	str	r3, [r1, #48]	; 0x30
 800082e:	e01b      	b.n	8000868 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6819      	ldr	r1, [r3, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	685a      	ldr	r2, [r3, #4]
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	3b41      	subs	r3, #65	; 0x41
 8000846:	221f      	movs	r2, #31
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	4018      	ands	r0, r3
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	681c      	ldr	r4, [r3, #0]
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	3b41      	subs	r3, #65	; 0x41
 8000860:	fa04 f303 	lsl.w	r3, r4, r3
 8000864:	4303      	orrs	r3, r0
 8000866:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b09      	cmp	r3, #9
 800086e:	d91c      	bls.n	80008aa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6819      	ldr	r1, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	68d8      	ldr	r0, [r3, #12]
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4613      	mov	r3, r2
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	4413      	add	r3, r2
 8000884:	3b1e      	subs	r3, #30
 8000886:	2207      	movs	r2, #7
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43db      	mvns	r3, r3
 800088e:	4018      	ands	r0, r3
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	689c      	ldr	r4, [r3, #8]
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4613      	mov	r3, r2
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	4413      	add	r3, r2
 800089e:	3b1e      	subs	r3, #30
 80008a0:	fa04 f303 	lsl.w	r3, r4, r3
 80008a4:	4303      	orrs	r3, r0
 80008a6:	60cb      	str	r3, [r1, #12]
 80008a8:	e019      	b.n	80008de <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6819      	ldr	r1, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	6918      	ldr	r0, [r3, #16]
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4613      	mov	r3, r2
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	4413      	add	r3, r2
 80008be:	2207      	movs	r2, #7
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	4018      	ands	r0, r3
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	689c      	ldr	r4, [r3, #8]
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	fa04 f303 	lsl.w	r3, r4, r3
 80008da:	4303      	orrs	r3, r0
 80008dc:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b10      	cmp	r3, #16
 80008e4:	d003      	beq.n	80008ee <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80008ea:	2b11      	cmp	r3, #17
 80008ec:	d132      	bne.n	8000954 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a1d      	ldr	r2, [pc, #116]	; (8000968 <HAL_ADC_ConfigChannel+0x1e4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d125      	bne.n	8000944 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000902:	2b00      	cmp	r3, #0
 8000904:	d126      	bne.n	8000954 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	6892      	ldr	r2, [r2, #8]
 8000910:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000914:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	2b10      	cmp	r3, #16
 800091c:	d11a      	bne.n	8000954 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <HAL_ADC_ConfigChannel+0x1e8>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a13      	ldr	r2, [pc, #76]	; (8000970 <HAL_ADC_ConfigChannel+0x1ec>)
 8000924:	fba2 2303 	umull	r2, r3, r2, r3
 8000928:	0c9a      	lsrs	r2, r3, #18
 800092a:	4613      	mov	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4413      	add	r3, r2
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000934:	e002      	b.n	800093c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	3b01      	subs	r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f9      	bne.n	8000936 <HAL_ADC_ConfigChannel+0x1b2>
 8000942:	e007      	b.n	8000954 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000948:	f043 0220 	orr.w	r2, r3, #32
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000950:	2301      	movs	r3, #1
 8000952:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800095c:	7bfb      	ldrb	r3, [r7, #15]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bc90      	pop	{r4, r7}
 8000966:	4770      	bx	lr
 8000968:	40012400 	.word	0x40012400
 800096c:	20000008 	.word	0x20000008
 8000970:	431bde83 	.word	0x431bde83

08000974 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	2b01      	cmp	r3, #1
 8000990:	d040      	beq.n	8000a14 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	6892      	ldr	r2, [r2, #8]
 800099c:	f042 0201 	orr.w	r2, r2, #1
 80009a0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <ADC_Enable+0xac>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a1f      	ldr	r2, [pc, #124]	; (8000a24 <ADC_Enable+0xb0>)
 80009a8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ac:	0c9b      	lsrs	r3, r3, #18
 80009ae:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009b0:	e002      	b.n	80009b8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d1f9      	bne.n	80009b2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009be:	f7ff fc1d 	bl	80001fc <HAL_GetTick>
 80009c2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80009c4:	e01f      	b.n	8000a06 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80009c6:	f7ff fc19 	bl	80001fc <HAL_GetTick>
 80009ca:	4602      	mov	r2, r0
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d918      	bls.n	8000a06 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d011      	beq.n	8000a06 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	f043 0210 	orr.w	r2, r3, #16
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009f2:	f043 0201 	orr.w	r2, r3, #1
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e007      	b.n	8000a16 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d1d8      	bne.n	80009c6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	431bde83 	.word	0x431bde83

08000a28 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d12e      	bne.n	8000aa0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	6892      	ldr	r2, [r2, #8]
 8000a4c:	f022 0201 	bic.w	r2, r2, #1
 8000a50:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a52:	f7ff fbd3 	bl	80001fc <HAL_GetTick>
 8000a56:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a58:	e01b      	b.n	8000a92 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000a5a:	f7ff fbcf 	bl	80001fc <HAL_GetTick>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d914      	bls.n	8000a92 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d10d      	bne.n	8000a92 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a7a:	f043 0210 	orr.w	r2, r3, #16
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a86:	f043 0201 	orr.w	r2, r3, #1
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e007      	b.n	8000aa2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	689b      	ldr	r3, [r3, #8]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d0dc      	beq.n	8000a5a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b087      	sub	sp, #28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ac2:	2b01      	cmp	r3, #1
 8000ac4:	d101      	bne.n	8000aca <HAL_ADCEx_Calibration_Start+0x1e>
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	e095      	b.n	8000bf6 <HAL_ADCEx_Calibration_Start+0x14a>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2201      	movs	r2, #1
 8000ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff ffa8 	bl	8000a28 <ADC_ConversionStop_Disable>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000adc:	7dfb      	ldrb	r3, [r7, #23]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	f040 8084 	bne.w	8000bec <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000aec:	f023 0302 	bic.w	r3, r3, #2
 8000af0:	f043 0202 	orr.w	r2, r3, #2
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000af8:	4b41      	ldr	r3, [pc, #260]	; (8000c00 <HAL_ADCEx_Calibration_Start+0x154>)
 8000afa:	681c      	ldr	r4, [r3, #0]
 8000afc:	2002      	movs	r0, #2
 8000afe:	f001 fcc5 	bl	800248c <HAL_RCCEx_GetPeriphCLKFreq>
 8000b02:	4603      	mov	r3, r0
 8000b04:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000b08:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000b0a:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000b0c:	e002      	b.n	8000b14 <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1f9      	bne.n	8000b0e <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ff2a 	bl	8000974 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	687a      	ldr	r2, [r7, #4]
 8000b26:	6812      	ldr	r2, [r2, #0]
 8000b28:	6892      	ldr	r2, [r2, #8]
 8000b2a:	f042 0208 	orr.w	r2, r2, #8
 8000b2e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000b30:	f7ff fb64 	bl	80001fc <HAL_GetTick>
 8000b34:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000b36:	e01b      	b.n	8000b70 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000b38:	f7ff fb60 	bl	80001fc <HAL_GetTick>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	1ad3      	subs	r3, r2, r3
 8000b42:	2b0a      	cmp	r3, #10
 8000b44:	d914      	bls.n	8000b70 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	689b      	ldr	r3, [r3, #8]
 8000b4c:	f003 0308 	and.w	r3, r3, #8
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00d      	beq.n	8000b70 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b58:	f023 0312 	bic.w	r3, r3, #18
 8000b5c:	f043 0210 	orr.w	r2, r3, #16
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2200      	movs	r2, #0
 8000b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e042      	b.n	8000bf6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f003 0308 	and.w	r3, r3, #8
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d1dc      	bne.n	8000b38 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	6892      	ldr	r2, [r2, #8]
 8000b88:	f042 0204 	orr.w	r2, r2, #4
 8000b8c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000b8e:	f7ff fb35 	bl	80001fc <HAL_GetTick>
 8000b92:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000b94:	e01b      	b.n	8000bce <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000b96:	f7ff fb31 	bl	80001fc <HAL_GetTick>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	2b0a      	cmp	r3, #10
 8000ba2:	d914      	bls.n	8000bce <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00d      	beq.n	8000bce <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb6:	f023 0312 	bic.w	r3, r3, #18
 8000bba:	f043 0210 	orr.w	r2, r3, #16
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e013      	b.n	8000bf6 <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d1dc      	bne.n	8000b96 <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be0:	f023 0303 	bic.w	r3, r3, #3
 8000be4:	f043 0201 	orr.w	r2, r3, #1
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	371c      	adds	r7, #28
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd90      	pop	{r4, r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000008 	.word	0x20000008

08000c04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f003 0307 	and.w	r3, r3, #7
 8000c12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c36:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <__NVIC_SetPriorityGrouping+0x44>)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	60d3      	str	r3, [r2, #12]
}
 8000c3c:	bf00      	nop
 8000c3e:	3714      	adds	r7, #20
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c50:	4b04      	ldr	r3, [pc, #16]	; (8000c64 <__NVIC_GetPriorityGrouping+0x18>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	0a1b      	lsrs	r3, r3, #8
 8000c56:	f003 0307 	and.w	r3, r3, #7
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db0b      	blt.n	8000c92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <__NVIC_EnableIRQ+0x34>)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	095b      	lsrs	r3, r3, #5
 8000c82:	79fa      	ldrb	r2, [r7, #7]
 8000c84:	f002 021f 	and.w	r2, r2, #31
 8000c88:	2001      	movs	r0, #1
 8000c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	490d      	ldr	r1, [pc, #52]	; (8000cec <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	4909      	ldr	r1, [pc, #36]	; (8000cf0 <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	683a      	ldr	r2, [r7, #0]
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	2201      	movs	r2, #1
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	401a      	ands	r2, r3
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	1e59      	subs	r1, r3, #1
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	; 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff92 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff2f 	bl	8000c04 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff44 	bl	8000c4c <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff92 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff61 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff37 	bl	8000c68 <__NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffa2 	bl	8000d54 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d008      	beq.n	8000e42 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2204      	movs	r2, #4
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e020      	b.n	8000e84 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	6812      	ldr	r2, [r2, #0]
 8000e4c:	f022 020e 	bic.w	r2, r2, #14
 8000e50:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6812      	ldr	r2, [r2, #0]
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	f022 0201 	bic.w	r2, r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e70:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr
	...

08000e90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d005      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e057      	b.n	8000f62 <HAL_DMA_Abort_IT+0xd2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	6812      	ldr	r2, [r2, #0]
 8000eba:	6812      	ldr	r2, [r2, #0]
 8000ebc:	f022 020e 	bic.w	r2, r2, #14
 8000ec0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	6812      	ldr	r2, [r2, #0]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	f022 0201 	bic.w	r2, r2, #1
 8000ed0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ed2:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <HAL_DMA_Abort_IT+0xdc>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <HAL_DMA_Abort_IT+0xe0>)
 8000edc:	4299      	cmp	r1, r3
 8000ede:	d02e      	beq.n	8000f3e <HAL_DMA_Abort_IT+0xae>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <HAL_DMA_Abort_IT+0xe4>)
 8000ee8:	4299      	cmp	r1, r3
 8000eea:	d026      	beq.n	8000f3a <HAL_DMA_Abort_IT+0xaa>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_DMA_Abort_IT+0xe8>)
 8000ef4:	4299      	cmp	r1, r3
 8000ef6:	d01d      	beq.n	8000f34 <HAL_DMA_Abort_IT+0xa4>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_DMA_Abort_IT+0xec>)
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d014      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x9e>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_DMA_Abort_IT+0xf0>)
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d00b      	beq.n	8000f28 <HAL_DMA_Abort_IT+0x98>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_DMA_Abort_IT+0xf4>)
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d102      	bne.n	8000f22 <HAL_DMA_Abort_IT+0x92>
 8000f1c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f20:	e00e      	b.n	8000f40 <HAL_DMA_Abort_IT+0xb0>
 8000f22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f26:	e00b      	b.n	8000f40 <HAL_DMA_Abort_IT+0xb0>
 8000f28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f2c:	e008      	b.n	8000f40 <HAL_DMA_Abort_IT+0xb0>
 8000f2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f32:	e005      	b.n	8000f40 <HAL_DMA_Abort_IT+0xb0>
 8000f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f38:	e002      	b.n	8000f40 <HAL_DMA_Abort_IT+0xb0>
 8000f3a:	2310      	movs	r3, #16
 8000f3c:	e000      	b.n	8000f40 <HAL_DMA_Abort_IT+0xb0>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_DMA_Abort_IT+0xd2>
    {
      hdma->XferAbortCallback(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	4798      	blx	r3
    } 
  }
  return status;
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020008 	.word	0x40020008
 8000f74:	4002001c 	.word	0x4002001c
 8000f78:	40020030 	.word	0x40020030
 8000f7c:	40020044 	.word	0x40020044
 8000f80:	40020058 	.word	0x40020058
 8000f84:	4002006c 	.word	0x4002006c

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b08b      	sub	sp, #44	; 0x2c
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f92:	2300      	movs	r3, #0
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f96:	2300      	movs	r3, #0
 8000f98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f9a:	e127      	b.n	80011ec <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	f040 8116 	bne.w	80011e6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d034      	beq.n	800102c <HAL_GPIO_Init+0xa4>
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d80d      	bhi.n	8000fe2 <HAL_GPIO_Init+0x5a>
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d02b      	beq.n	8001022 <HAL_GPIO_Init+0x9a>
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d804      	bhi.n	8000fd8 <HAL_GPIO_Init+0x50>
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d031      	beq.n	8001036 <HAL_GPIO_Init+0xae>
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d01c      	beq.n	8001010 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fd6:	e048      	b.n	800106a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d043      	beq.n	8001064 <HAL_GPIO_Init+0xdc>
 8000fdc:	2b11      	cmp	r3, #17
 8000fde:	d01b      	beq.n	8001018 <HAL_GPIO_Init+0x90>
          break;
 8000fe0:	e043      	b.n	800106a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000fe2:	4a89      	ldr	r2, [pc, #548]	; (8001208 <HAL_GPIO_Init+0x280>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d026      	beq.n	8001036 <HAL_GPIO_Init+0xae>
 8000fe8:	4a87      	ldr	r2, [pc, #540]	; (8001208 <HAL_GPIO_Init+0x280>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d806      	bhi.n	8000ffc <HAL_GPIO_Init+0x74>
 8000fee:	4a87      	ldr	r2, [pc, #540]	; (800120c <HAL_GPIO_Init+0x284>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d020      	beq.n	8001036 <HAL_GPIO_Init+0xae>
 8000ff4:	4a86      	ldr	r2, [pc, #536]	; (8001210 <HAL_GPIO_Init+0x288>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01d      	beq.n	8001036 <HAL_GPIO_Init+0xae>
          break;
 8000ffa:	e036      	b.n	800106a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ffc:	4a85      	ldr	r2, [pc, #532]	; (8001214 <HAL_GPIO_Init+0x28c>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0xae>
 8001002:	4a85      	ldr	r2, [pc, #532]	; (8001218 <HAL_GPIO_Init+0x290>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d016      	beq.n	8001036 <HAL_GPIO_Init+0xae>
 8001008:	4a84      	ldr	r2, [pc, #528]	; (800121c <HAL_GPIO_Init+0x294>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0xae>
          break;
 800100e:	e02c      	b.n	800106a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e028      	b.n	800106a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	3304      	adds	r3, #4
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e023      	b.n	800106a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	3308      	adds	r3, #8
 8001028:	623b      	str	r3, [r7, #32]
          break;
 800102a:	e01e      	b.n	800106a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	330c      	adds	r3, #12
 8001032:	623b      	str	r3, [r7, #32]
          break;
 8001034:	e019      	b.n	800106a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800103e:	2304      	movs	r3, #4
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e012      	b.n	800106a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d105      	bne.n	8001058 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800104c:	2308      	movs	r3, #8
 800104e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	611a      	str	r2, [r3, #16]
          break;
 8001056:	e008      	b.n	800106a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	615a      	str	r2, [r3, #20]
          break;
 8001062:	e002      	b.n	800106a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2bff      	cmp	r3, #255	; 0xff
 800106e:	d801      	bhi.n	8001074 <HAL_GPIO_Init+0xec>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	e001      	b.n	8001078 <HAL_GPIO_Init+0xf0>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3304      	adds	r3, #4
 8001078:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2bff      	cmp	r3, #255	; 0xff
 800107e:	d802      	bhi.n	8001086 <HAL_GPIO_Init+0xfe>
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	e002      	b.n	800108c <HAL_GPIO_Init+0x104>
 8001086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001088:	3b08      	subs	r3, #8
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	210f      	movs	r1, #15
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	401a      	ands	r2, r3
 800109e:	6a39      	ldr	r1, [r7, #32]
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	431a      	orrs	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 8096 	beq.w	80011e6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ba:	4a59      	ldr	r2, [pc, #356]	; (8001220 <HAL_GPIO_Init+0x298>)
 80010bc:	4b58      	ldr	r3, [pc, #352]	; (8001220 <HAL_GPIO_Init+0x298>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6193      	str	r3, [r2, #24]
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <HAL_GPIO_Init+0x298>)
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010d2:	4a54      	ldr	r2, [pc, #336]	; (8001224 <HAL_GPIO_Init+0x29c>)
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	089b      	lsrs	r3, r3, #2
 80010d8:	3302      	adds	r3, #2
 80010da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010de:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	220f      	movs	r2, #15
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43db      	mvns	r3, r3
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4013      	ands	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4b      	ldr	r2, [pc, #300]	; (8001228 <HAL_GPIO_Init+0x2a0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x19e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4a      	ldr	r2, [pc, #296]	; (800122c <HAL_GPIO_Init+0x2a4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x19a>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a49      	ldr	r2, [pc, #292]	; (8001230 <HAL_GPIO_Init+0x2a8>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x196>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a48      	ldr	r2, [pc, #288]	; (8001234 <HAL_GPIO_Init+0x2ac>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x192>
 8001116:	2303      	movs	r3, #3
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x1a0>
 800111a:	2304      	movs	r3, #4
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x1a0>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x1a0>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x1a0>
 8001126:	2300      	movs	r3, #0
 8001128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4313      	orrs	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001138:	493a      	ldr	r1, [pc, #232]	; (8001224 <HAL_GPIO_Init+0x29c>)
 800113a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d006      	beq.n	8001160 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001152:	4939      	ldr	r1, [pc, #228]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8001154:	4b38      	ldr	r3, [pc, #224]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	600b      	str	r3, [r1, #0]
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001160:	4935      	ldr	r1, [pc, #212]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8001162:	4b35      	ldr	r3, [pc, #212]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	43db      	mvns	r3, r3
 800116a:	4013      	ands	r3, r2
 800116c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800117a:	492f      	ldr	r1, [pc, #188]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 800117c:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	604b      	str	r3, [r1, #4]
 8001186:	e006      	b.n	8001196 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001188:	492b      	ldr	r1, [pc, #172]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 800118a:	4b2b      	ldr	r3, [pc, #172]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	43db      	mvns	r3, r3
 8001192:	4013      	ands	r3, r2
 8001194:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d006      	beq.n	80011b0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a2:	4925      	ldr	r1, [pc, #148]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	608b      	str	r3, [r1, #8]
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b0:	4921      	ldr	r1, [pc, #132]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4013      	ands	r3, r2
 80011bc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d006      	beq.n	80011d8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011ca:	491b      	ldr	r1, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	60cb      	str	r3, [r1, #12]
 80011d6:	e006      	b.n	80011e6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d8:	4917      	ldr	r1, [pc, #92]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_GPIO_Init+0x2b0>)
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	4013      	ands	r3, r2
 80011e4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	3301      	adds	r3, #1
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f47f aed0 	bne.w	8000f9c <HAL_GPIO_Init+0x14>
  }
}
 80011fc:	bf00      	nop
 80011fe:	372c      	adds	r7, #44	; 0x2c
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	10210000 	.word	0x10210000
 800120c:	10110000 	.word	0x10110000
 8001210:	10120000 	.word	0x10120000
 8001214:	10310000 	.word	0x10310000
 8001218:	10320000 	.word	0x10320000
 800121c:	10220000 	.word	0x10220000
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	40010800 	.word	0x40010800
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40011000 	.word	0x40011000
 8001234:	40011400 	.word	0x40011400
 8001238:	40010400 	.word	0x40010400

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	611a      	str	r2, [r3, #16]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e11f      	b.n	80014be <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d106      	bne.n	8001298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f003 fac0 	bl	8004818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2224      	movs	r2, #36	; 0x24
 800129c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6812      	ldr	r2, [r2, #0]
 80012a8:	6812      	ldr	r2, [r2, #0]
 80012aa:	f022 0201 	bic.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80012d0:	f000 ffe0 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a7b      	ldr	r2, [pc, #492]	; (80014c8 <HAL_I2C_Init+0x25c>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d807      	bhi.n	80012f0 <HAL_I2C_Init+0x84>
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4a7a      	ldr	r2, [pc, #488]	; (80014cc <HAL_I2C_Init+0x260>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	bf94      	ite	ls
 80012e8:	2301      	movls	r3, #1
 80012ea:	2300      	movhi	r3, #0
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	e006      	b.n	80012fe <HAL_I2C_Init+0x92>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4a77      	ldr	r2, [pc, #476]	; (80014d0 <HAL_I2C_Init+0x264>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	bf94      	ite	ls
 80012f8:	2301      	movls	r3, #1
 80012fa:	2300      	movhi	r3, #0
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e0db      	b.n	80014be <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	4a72      	ldr	r2, [pc, #456]	; (80014d4 <HAL_I2C_Init+0x268>)
 800130a:	fba2 2303 	umull	r2, r3, r2, r3
 800130e:	0c9b      	lsrs	r3, r3, #18
 8001310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	6852      	ldr	r2, [r2, #4]
 800131c:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	430a      	orrs	r2, r1
 8001324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a1b      	ldr	r3, [r3, #32]
 8001330:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4863      	ldr	r0, [pc, #396]	; (80014c8 <HAL_I2C_Init+0x25c>)
 800133a:	4283      	cmp	r3, r0
 800133c:	d802      	bhi.n	8001344 <HAL_I2C_Init+0xd8>
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	3301      	adds	r3, #1
 8001342:	e009      	b.n	8001358 <HAL_I2C_Init+0xec>
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800134a:	fb00 f303 	mul.w	r3, r0, r3
 800134e:	4862      	ldr	r0, [pc, #392]	; (80014d8 <HAL_I2C_Init+0x26c>)
 8001350:	fba0 0303 	umull	r0, r3, r0, r3
 8001354:	099b      	lsrs	r3, r3, #6
 8001356:	3301      	adds	r3, #1
 8001358:	430b      	orrs	r3, r1
 800135a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800136a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	4955      	ldr	r1, [pc, #340]	; (80014c8 <HAL_I2C_Init+0x25c>)
 8001374:	428b      	cmp	r3, r1
 8001376:	d80d      	bhi.n	8001394 <HAL_I2C_Init+0x128>
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	1e59      	subs	r1, r3, #1
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	005b      	lsls	r3, r3, #1
 8001382:	fbb1 f3f3 	udiv	r3, r1, r3
 8001386:	3301      	adds	r3, #1
 8001388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800138c:	2b04      	cmp	r3, #4
 800138e:	bf38      	it	cc
 8001390:	2304      	movcc	r3, #4
 8001392:	e04f      	b.n	8001434 <HAL_I2C_Init+0x1c8>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d111      	bne.n	80013c0 <HAL_I2C_Init+0x154>
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1e5c      	subs	r4, r3, #1
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6859      	ldr	r1, [r3, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	005b      	lsls	r3, r3, #1
 80013a8:	440b      	add	r3, r1
 80013aa:	fbb4 f3f3 	udiv	r3, r4, r3
 80013ae:	3301      	adds	r3, #1
 80013b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	e012      	b.n	80013e6 <HAL_I2C_Init+0x17a>
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	1e5c      	subs	r4, r3, #1
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6859      	ldr	r1, [r3, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	0099      	lsls	r1, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80013d6:	3301      	adds	r3, #1
 80013d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf0c      	ite	eq
 80013e0:	2301      	moveq	r3, #1
 80013e2:	2300      	movne	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_I2C_Init+0x182>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e022      	b.n	8001434 <HAL_I2C_Init+0x1c8>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d10e      	bne.n	8001414 <HAL_I2C_Init+0x1a8>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	1e5c      	subs	r4, r3, #1
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6859      	ldr	r1, [r3, #4]
 80013fe:	460b      	mov	r3, r1
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	440b      	add	r3, r1
 8001404:	fbb4 f3f3 	udiv	r3, r4, r3
 8001408:	3301      	adds	r3, #1
 800140a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800140e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001412:	e00f      	b.n	8001434 <HAL_I2C_Init+0x1c8>
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	1e5c      	subs	r4, r3, #1
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	0099      	lsls	r1, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	fbb4 f3f3 	udiv	r3, r4, r3
 800142a:	3301      	adds	r3, #1
 800142c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001434:	4313      	orrs	r3, r2
 8001436:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	69d0      	ldr	r0, [r2, #28]
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	6a12      	ldr	r2, [r2, #32]
 800144e:	4302      	orrs	r2, r0
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001462:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	6908      	ldr	r0, [r1, #16]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	68c9      	ldr	r1, [r1, #12]
 800146e:	4301      	orrs	r1, r0
 8001470:	430b      	orrs	r3, r1
 8001472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	68d2      	ldr	r2, [r2, #12]
 800147e:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6950      	ldr	r0, [r2, #20]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	6992      	ldr	r2, [r2, #24]
 800148a:	4302      	orrs	r2, r0
 800148c:	430a      	orrs	r2, r1
 800148e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	6812      	ldr	r2, [r2, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2220      	movs	r2, #32
 80014aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd90      	pop	{r4, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	000186a0 	.word	0x000186a0
 80014cc:	001e847f 	.word	0x001e847f
 80014d0:	003d08ff 	.word	0x003d08ff
 80014d4:	431bde83 	.word	0x431bde83
 80014d8:	10624dd3 	.word	0x10624dd3

080014dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	461a      	mov	r2, r3
 80014e8:	460b      	mov	r3, r1
 80014ea:	817b      	strh	r3, [r7, #10]
 80014ec:	4613      	mov	r3, r2
 80014ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80014f0:	f7fe fe84 	bl	80001fc <HAL_GetTick>
 80014f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b20      	cmp	r3, #32
 8001500:	f040 80e0 	bne.w	80016c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2319      	movs	r3, #25
 800150a:	2201      	movs	r2, #1
 800150c:	4970      	ldr	r1, [pc, #448]	; (80016d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f964 	bl	80017dc <I2C_WaitOnFlagUntilTimeout>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800151a:	2302      	movs	r3, #2
 800151c:	e0d3      	b.n	80016c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <HAL_I2C_Master_Transmit+0x50>
 8001528:	2302      	movs	r3, #2
 800152a:	e0cc      	b.n	80016c6 <HAL_I2C_Master_Transmit+0x1ea>
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b01      	cmp	r3, #1
 8001540:	d007      	beq.n	8001552 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	6812      	ldr	r2, [r2, #0]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	f042 0201 	orr.w	r2, r2, #1
 8001550:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	6812      	ldr	r2, [r2, #0]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001560:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2221      	movs	r2, #33	; 0x21
 8001566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2210      	movs	r2, #16
 800156e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	893a      	ldrh	r2, [r7, #8]
 8001582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001588:	b29a      	uxth	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4a50      	ldr	r2, [pc, #320]	; (80016d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001594:	8979      	ldrh	r1, [r7, #10]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	6a3a      	ldr	r2, [r7, #32]
 800159a:	68f8      	ldr	r0, [r7, #12]
 800159c:	f000 f89c 	bl	80016d8 <I2C_MasterRequestWrite>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e08d      	b.n	80016c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80015c0:	e066      	b.n	8001690 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	6a39      	ldr	r1, [r7, #32]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f9de 	bl	8001988 <I2C_WaitOnTXEFlagUntilTimeout>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00d      	beq.n	80015ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d107      	bne.n	80015ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e06b      	b.n	80016c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015f6:	7812      	ldrb	r2, [r2, #0]
 80015f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001608:	b29b      	uxth	r3, r3
 800160a:	3b01      	subs	r3, #1
 800160c:	b29a      	uxth	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001616:	3b01      	subs	r3, #1
 8001618:	b29a      	uxth	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	2b04      	cmp	r3, #4
 800162a:	d11b      	bne.n	8001664 <HAL_I2C_Master_Transmit+0x188>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001630:	2b00      	cmp	r3, #0
 8001632:	d017      	beq.n	8001664 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800163c:	7812      	ldrb	r2, [r2, #0]
 800163e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164e:	b29b      	uxth	r3, r3
 8001650:	3b01      	subs	r3, #1
 8001652:	b29a      	uxth	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165c:	3b01      	subs	r3, #1
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	6a39      	ldr	r1, [r7, #32]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f000 f9ce 	bl	8001a0a <I2C_WaitOnBTFFlagUntilTimeout>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d00d      	beq.n	8001690 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	2b04      	cmp	r3, #4
 800167a:	d107      	bne.n	800168c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800168a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e01a      	b.n	80016c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001694:	2b00      	cmp	r3, #0
 8001696:	d194      	bne.n	80015c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2220      	movs	r2, #32
 80016ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80016c0:	2300      	movs	r3, #0
 80016c2:	e000      	b.n	80016c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80016c4:	2302      	movs	r3, #2
  }
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	00100002 	.word	0x00100002
 80016d4:	ffff0000 	.word	0xffff0000

080016d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af02      	add	r7, sp, #8
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	607a      	str	r2, [r7, #4]
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	460b      	mov	r3, r1
 80016e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	2b08      	cmp	r3, #8
 80016f2:	d006      	beq.n	8001702 <I2C_MasterRequestWrite+0x2a>
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d003      	beq.n	8001702 <I2C_MasterRequestWrite+0x2a>
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001700:	d108      	bne.n	8001714 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e00b      	b.n	800172c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001718:	2b12      	cmp	r3, #18
 800171a:	d107      	bne.n	800172c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	68fa      	ldr	r2, [r7, #12]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	6812      	ldr	r2, [r2, #0]
 8001726:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800172a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f000 f84f 	bl	80017dc <I2C_WaitOnFlagUntilTimeout>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001752:	d103      	bne.n	800175c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e034      	b.n	80017ca <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001768:	d107      	bne.n	800177a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	897a      	ldrh	r2, [r7, #10]
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001776:	611a      	str	r2, [r3, #16]
 8001778:	e01b      	b.n	80017b2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	897a      	ldrh	r2, [r7, #10]
 8001780:	11d2      	asrs	r2, r2, #7
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	f002 0206 	and.w	r2, r2, #6
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	f062 020f 	orn	r2, r2, #15
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	490f      	ldr	r1, [pc, #60]	; (80017d4 <I2C_MasterRequestWrite+0xfc>)
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 f876 	bl	800188a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e010      	b.n	80017ca <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	897a      	ldrh	r2, [r7, #10]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	4908      	ldr	r1, [pc, #32]	; (80017d8 <I2C_MasterRequestWrite+0x100>)
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 f866 	bl	800188a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	00010008 	.word	0x00010008
 80017d8:	00010002 	.word	0x00010002

080017dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	4613      	mov	r3, r2
 80017ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017ec:	e025      	b.n	800183a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f4:	d021      	beq.n	800183a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80017f6:	f7fe fd01 	bl	80001fc <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad2      	subs	r2, r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	429a      	cmp	r2, r3
 8001804:	d802      	bhi.n	800180c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d116      	bne.n	800183a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f043 0220 	orr.w	r2, r3, #32
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e023      	b.n	8001882 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	0c1b      	lsrs	r3, r3, #16
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10d      	bne.n	8001860 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	43da      	mvns	r2, r3
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	4013      	ands	r3, r2
 8001850:	b29b      	uxth	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	e00c      	b.n	800187a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	43da      	mvns	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4013      	ands	r3, r2
 800186c:	b29b      	uxth	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	bf0c      	ite	eq
 8001872:	2301      	moveq	r3, #1
 8001874:	2300      	movne	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	429a      	cmp	r2, r3
 800187e:	d0b6      	beq.n	80017ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b084      	sub	sp, #16
 800188e:	af00      	add	r7, sp, #0
 8001890:	60f8      	str	r0, [r7, #12]
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001898:	e051      	b.n	800193e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a8:	d123      	bne.n	80018f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80018c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2220      	movs	r2, #32
 80018ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f043 0204 	orr.w	r2, r3, #4
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e046      	b.n	8001980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f8:	d021      	beq.n	800193e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fa:	f7fe fc7f 	bl	80001fc <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	1ad2      	subs	r2, r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	429a      	cmp	r2, r3
 8001908:	d802      	bhi.n	8001910 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d116      	bne.n	800193e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2220      	movs	r2, #32
 800191a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f043 0220 	orr.w	r2, r3, #32
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e020      	b.n	8001980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d10c      	bne.n	8001962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4013      	ands	r3, r2
 8001954:	b29b      	uxth	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	bf14      	ite	ne
 800195a:	2301      	movne	r3, #1
 800195c:	2300      	moveq	r3, #0
 800195e:	b2db      	uxtb	r3, r3
 8001960:	e00b      	b.n	800197a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	43da      	mvns	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4013      	ands	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf14      	ite	ne
 8001974:	2301      	movne	r3, #1
 8001976:	2300      	moveq	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d18d      	bne.n	800189a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001994:	e02d      	b.n	80019f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f000 f878 	bl	8001a8c <I2C_IsAcknowledgeFailed>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e02d      	b.n	8001a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d021      	beq.n	80019f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ae:	f7fe fc25 	bl	80001fc <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	1ad2      	subs	r2, r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d802      	bhi.n	80019c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d116      	bne.n	80019f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2220      	movs	r2, #32
 80019ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f043 0220 	orr.w	r2, r3, #32
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e007      	b.n	8001a02 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fc:	2b80      	cmp	r3, #128	; 0x80
 80019fe:	d1ca      	bne.n	8001996 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b084      	sub	sp, #16
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	60f8      	str	r0, [r7, #12]
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a16:	e02d      	b.n	8001a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001a18:	68f8      	ldr	r0, [r7, #12]
 8001a1a:	f000 f837 	bl	8001a8c <I2C_IsAcknowledgeFailed>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e02d      	b.n	8001a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a2e:	d021      	beq.n	8001a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a30:	f7fe fbe4 	bl	80001fc <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	1ad2      	subs	r2, r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d802      	bhi.n	8001a46 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d116      	bne.n	8001a74 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f043 0220 	orr.w	r2, r3, #32
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e007      	b.n	8001a84 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	695b      	ldr	r3, [r3, #20]
 8001a7a:	f003 0304 	and.w	r3, r3, #4
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d1ca      	bne.n	8001a18 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa2:	d11b      	bne.n	8001adc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001aac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac8:	f043 0204 	orr.w	r2, r3, #4
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e000      	b.n	8001ade <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e26c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f000 8087 	beq.w	8001c16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b08:	4b92      	ldr	r3, [pc, #584]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b04      	cmp	r3, #4
 8001b12:	d00c      	beq.n	8001b2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b14:	4b8f      	ldr	r3, [pc, #572]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 030c 	and.w	r3, r3, #12
 8001b1c:	2b08      	cmp	r3, #8
 8001b1e:	d112      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
 8001b20:	4b8c      	ldr	r3, [pc, #560]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b2c:	d10b      	bne.n	8001b46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b2e:	4b89      	ldr	r3, [pc, #548]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d06c      	beq.n	8001c14 <HAL_RCC_OscConfig+0x12c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d168      	bne.n	8001c14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e246      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x76>
 8001b50:	4a80      	ldr	r2, [pc, #512]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b52:	4b80      	ldr	r3, [pc, #512]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	e02e      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x98>
 8001b66:	4a7b      	ldr	r2, [pc, #492]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	4b7a      	ldr	r3, [pc, #488]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b70:	6013      	str	r3, [r2, #0]
 8001b72:	4a78      	ldr	r2, [pc, #480]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	4b77      	ldr	r3, [pc, #476]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]
 8001b7e:	e01d      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0xbc>
 8001b8a:	4a72      	ldr	r2, [pc, #456]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	4b71      	ldr	r3, [pc, #452]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	4a6f      	ldr	r2, [pc, #444]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	4b6e      	ldr	r3, [pc, #440]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba0:	6013      	str	r3, [r2, #0]
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0xd4>
 8001ba4:	4a6b      	ldr	r2, [pc, #428]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	4b6b      	ldr	r3, [pc, #428]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	4a68      	ldr	r2, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	4b68      	ldr	r3, [pc, #416]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d013      	beq.n	8001bec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7fe fb1a 	bl	80001fc <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7fe fb16 	bl	80001fc <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e1fa      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b5d      	ldr	r3, [pc, #372]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe4>
 8001bea:	e014      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bec:	f7fe fb06 	bl	80001fc <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7fe fb02 	bl	80001fc <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e1e6      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x10c>
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d063      	beq.n	8001cea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00b      	beq.n	8001c46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c2e:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b08      	cmp	r3, #8
 8001c38:	d11c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x18c>
 8001c3a:	4b46      	ldr	r3, [pc, #280]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d116      	bne.n	8001c74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c46:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_RCC_OscConfig+0x176>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e1ba      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5e:	493d      	ldr	r1, [pc, #244]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	4b3c      	ldr	r3, [pc, #240]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	695b      	ldr	r3, [r3, #20]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c72:	e03a      	b.n	8001cea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d020      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c7c:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c82:	f7fe fabb 	bl	80001fc <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8a:	f7fe fab7 	bl	80001fc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e19b      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca8:	492a      	ldr	r1, [pc, #168]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001caa:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	600b      	str	r3, [r1, #0]
 8001cbc:	e015      	b.n	8001cea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbe:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fa9a 	bl	80001fc <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ccc:	f7fe fa96 	bl	80001fc <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e17a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d03a      	beq.n	8001d6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d019      	beq.n	8001d32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d00:	2201      	movs	r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7fe fa7a 	bl	80001fc <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7fe fa76 	bl	80001fc <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e15a      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	4b0d      	ldr	r3, [pc, #52]	; (8001d54 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f000 fada 	bl	80022e4 <RCC_Delay>
 8001d30:	e01c      	b.n	8001d6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_RCC_OscConfig+0x274>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d38:	f7fe fa60 	bl	80001fc <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d3e:	e00f      	b.n	8001d60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d40:	f7fe fa5c 	bl	80001fc <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d908      	bls.n	8001d60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e140      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	42420000 	.word	0x42420000
 8001d5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d60:	4b9e      	ldr	r3, [pc, #632]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e9      	bne.n	8001d40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 0304 	and.w	r3, r3, #4
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a6 	beq.w	8001ec6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7e:	4b97      	ldr	r3, [pc, #604]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10d      	bne.n	8001da6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4a94      	ldr	r2, [pc, #592]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	4b93      	ldr	r3, [pc, #588]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b91      	ldr	r3, [pc, #580]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001da2:	2301      	movs	r3, #1
 8001da4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da6:	4b8e      	ldr	r3, [pc, #568]	; (8001fe0 <HAL_RCC_OscConfig+0x4f8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d118      	bne.n	8001de4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db2:	4a8b      	ldr	r2, [pc, #556]	; (8001fe0 <HAL_RCC_OscConfig+0x4f8>)
 8001db4:	4b8a      	ldr	r3, [pc, #552]	; (8001fe0 <HAL_RCC_OscConfig+0x4f8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dbe:	f7fe fa1d 	bl	80001fc <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc6:	f7fe fa19 	bl	80001fc <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b64      	cmp	r3, #100	; 0x64
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0fd      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	4b81      	ldr	r3, [pc, #516]	; (8001fe0 <HAL_RCC_OscConfig+0x4f8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0f0      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_OscConfig+0x312>
 8001dec:	4a7b      	ldr	r2, [pc, #492]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001dee:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	6a1b      	ldr	r3, [r3, #32]
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6213      	str	r3, [r2, #32]
 8001df8:	e02d      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x334>
 8001e02:	4a76      	ldr	r2, [pc, #472]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	4b75      	ldr	r3, [pc, #468]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6213      	str	r3, [r2, #32]
 8001e0e:	4a73      	ldr	r2, [pc, #460]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e10:	4b72      	ldr	r3, [pc, #456]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6213      	str	r3, [r2, #32]
 8001e1a:	e01c      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b05      	cmp	r3, #5
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCC_OscConfig+0x356>
 8001e24:	4a6d      	ldr	r2, [pc, #436]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	4b6d      	ldr	r3, [pc, #436]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	4a6a      	ldr	r2, [pc, #424]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e32:	4b6a      	ldr	r3, [pc, #424]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	e00b      	b.n	8001e56 <HAL_RCC_OscConfig+0x36e>
 8001e3e:	4a67      	ldr	r2, [pc, #412]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	f023 0301 	bic.w	r3, r3, #1
 8001e48:	6213      	str	r3, [r2, #32]
 8001e4a:	4a64      	ldr	r2, [pc, #400]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f023 0304 	bic.w	r3, r3, #4
 8001e54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d015      	beq.n	8001e8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5e:	f7fe f9cd 	bl	80001fc <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e64:	e00a      	b.n	8001e7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e66:	f7fe f9c9 	bl	80001fc <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e0ab      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0ee      	beq.n	8001e66 <HAL_RCC_OscConfig+0x37e>
 8001e88:	e014      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7fe f9b7 	bl	80001fc <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7fe f9b3 	bl	80001fc <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e095      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1ee      	bne.n	8001e92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d105      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eba:	4a48      	ldr	r2, [pc, #288]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8081 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ed0:	4b42      	ldr	r3, [pc, #264]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b08      	cmp	r3, #8
 8001eda:	d061      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d146      	bne.n	8001f72 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee4:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <HAL_RCC_OscConfig+0x4fc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eea:	f7fe f987 	bl	80001fc <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7fe f983 	bl	80001fc <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e067      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f04:	4b35      	ldr	r3, [pc, #212]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f18:	d108      	bne.n	8001f2c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f1a:	4930      	ldr	r1, [pc, #192]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	4b2f      	ldr	r3, [pc, #188]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2c:	482b      	ldr	r0, [pc, #172]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	4b2b      	ldr	r3, [pc, #172]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a19      	ldr	r1, [r3, #32]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	4313      	orrs	r3, r2
 8001f42:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	4b27      	ldr	r3, [pc, #156]	; (8001fe4 <HAL_RCC_OscConfig+0x4fc>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7fe f957 	bl	80001fc <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f52:	f7fe f953 	bl	80001fc <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e037      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x46a>
 8001f70:	e02f      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b1c      	ldr	r3, [pc, #112]	; (8001fe4 <HAL_RCC_OscConfig+0x4fc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7fe f940 	bl	80001fc <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7fe f93c 	bl	80001fc <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e020      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x498>
 8001f9e:	e018      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e013      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fac:	4b0b      	ldr	r3, [pc, #44]	; (8001fdc <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a1b      	ldr	r3, [r3, #32]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d106      	bne.n	8001fce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	42420060 	.word	0x42420060

08001fe8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0d0      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0207 	and.w	r2, r3, #7
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	429a      	cmp	r2, r3
 8002008:	d210      	bcs.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200a:	4967      	ldr	r1, [pc, #412]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 0207 	bic.w	r2, r3, #7
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0207 	and.w	r2, r3, #7
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d001      	beq.n	800202c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	e0b8      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d020      	beq.n	800207a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002044:	4a59      	ldr	r2, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800204e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0308 	and.w	r3, r3, #8
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800205c:	4a53      	ldr	r2, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002066:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4950      	ldr	r1, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	4b50      	ldr	r3, [pc, #320]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	4313      	orrs	r3, r2
 8002078:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d040      	beq.n	8002108 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d115      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e07f      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a6:	4b41      	ldr	r3, [pc, #260]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d109      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e073      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b6:	4b3d      	ldr	r3, [pc, #244]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e06b      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c6:	4939      	ldr	r1, [pc, #228]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f023 0203 	bic.w	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d8:	f7fe f890 	bl	80001fc <HAL_GetTick>
 80020dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e0:	f7fe f88c 	bl	80001fc <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e053      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 020c 	and.w	r2, r3, #12
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	429a      	cmp	r2, r3
 8002106:	d1eb      	bne.n	80020e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002108:	4b27      	ldr	r3, [pc, #156]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0207 	and.w	r2, r3, #7
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d910      	bls.n	8002138 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4924      	ldr	r1, [pc, #144]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 0207 	bic.w	r2, r3, #7
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b20      	ldr	r3, [pc, #128]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0207 	and.w	r2, r3, #7
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d001      	beq.n	8002138 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e032      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0304 	and.w	r3, r3, #4
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002144:	4919      	ldr	r1, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002162:	4912      	ldr	r1, [pc, #72]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002176:	f000 f821 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 800217a:	4601      	mov	r1, r0
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002188:	5cd3      	ldrb	r3, [r2, r3]
 800218a:	fa21 f303 	lsr.w	r3, r1, r3
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f7fd ffee 	bl	8000178 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08005498 	.word	0x08005498
 80021b4:	20000008 	.word	0x20000008
 80021b8:	20000000 	.word	0x20000000

080021bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	b490      	push	{r4, r7}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021c4:	1d3c      	adds	r4, r7, #4
 80021c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021cc:	4b28      	ldr	r3, [pc, #160]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021e6:	4b23      	ldr	r3, [pc, #140]	; (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	2b04      	cmp	r3, #4
 80021f4:	d002      	beq.n	80021fc <HAL_RCC_GetSysClockFreq+0x40>
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_GetSysClockFreq+0x46>
 80021fa:	e02d      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021fe:	623b      	str	r3, [r7, #32]
      break;
 8002200:	e02d      	b.n	800225e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	0c9b      	lsrs	r3, r3, #18
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800220e:	4413      	add	r3, r2
 8002210:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002214:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002220:	4b14      	ldr	r3, [pc, #80]	; (8002274 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	0c5b      	lsrs	r3, r3, #17
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800222e:	4413      	add	r3, r2
 8002230:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002234:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	4a0f      	ldr	r2, [pc, #60]	; (8002278 <HAL_RCC_GetSysClockFreq+0xbc>)
 800223a:	fb02 f203 	mul.w	r2, r2, r3
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	fbb2 f3f3 	udiv	r3, r2, r3
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e004      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <HAL_RCC_GetSysClockFreq+0xc0>)
 800224c:	fb02 f303 	mul.w	r3, r2, r3
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	623b      	str	r3, [r7, #32]
      break;
 8002256:	e002      	b.n	800225e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002258:	4b07      	ldr	r3, [pc, #28]	; (8002278 <HAL_RCC_GetSysClockFreq+0xbc>)
 800225a:	623b      	str	r3, [r7, #32]
      break;
 800225c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225e:	6a3b      	ldr	r3, [r7, #32]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3728      	adds	r7, #40	; 0x28
 8002264:	46bd      	mov	sp, r7
 8002266:	bc90      	pop	{r4, r7}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	08005458 	.word	0x08005458
 8002270:	08005468 	.word	0x08005468
 8002274:	40021000 	.word	0x40021000
 8002278:	007a1200 	.word	0x007a1200
 800227c:	003d0900 	.word	0x003d0900

08002280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002284:	4b02      	ldr	r3, [pc, #8]	; (8002290 <HAL_RCC_GetHCLKFreq+0x10>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	4618      	mov	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	20000008 	.word	0x20000008

08002294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002298:	f7ff fff2 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 800229c:	4601      	mov	r1, r0
 800229e:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f003 0307 	and.w	r3, r3, #7
 80022a8:	4a03      	ldr	r2, [pc, #12]	; (80022b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022aa:	5cd3      	ldrb	r3, [r2, r3]
 80022ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	080054a8 	.word	0x080054a8

080022bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022c0:	f7ff ffde 	bl	8002280 <HAL_RCC_GetHCLKFreq>
 80022c4:	4601      	mov	r1, r0
 80022c6:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0adb      	lsrs	r3, r3, #11
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	4a03      	ldr	r2, [pc, #12]	; (80022e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022d2:	5cd3      	ldrb	r3, [r2, r3]
 80022d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d8:	4618      	mov	r0, r3
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	080054a8 	.word	0x080054a8

080022e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <RCC_Delay+0x34>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <RCC_Delay+0x38>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	0a5b      	lsrs	r3, r3, #9
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	fb02 f303 	mul.w	r3, r2, r3
 80022fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002300:	bf00      	nop
  }
  while (Delay --);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	60fa      	str	r2, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f9      	bne.n	8002300 <RCC_Delay+0x1c>
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20000008 	.word	0x20000008
 800231c:	10624dd3 	.word	0x10624dd3

08002320 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d07d      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800233c:	2300      	movs	r3, #0
 800233e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002340:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10d      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4a4c      	ldr	r2, [pc, #304]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234e:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	61d3      	str	r3, [r2, #28]
 8002358:	4b49      	ldr	r3, [pc, #292]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002364:	2301      	movs	r3, #1
 8002366:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002368:	4b46      	ldr	r3, [pc, #280]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d118      	bne.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002374:	4a43      	ldr	r2, [pc, #268]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002376:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002380:	f7fd ff3c 	bl	80001fc <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002386:	e008      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002388:	f7fd ff38 	bl	80001fc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e06d      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a6:	4b36      	ldr	r3, [pc, #216]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ae:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d02e      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d027      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023ce:	4b2e      	ldr	r3, [pc, #184]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80023da:	4a29      	ldr	r2, [pc, #164]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d014      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fd ff07 	bl	80001fc <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fd ff03 	bl	80001fc <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e036      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ee      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002414:	491a      	ldr	r1, [pc, #104]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4313      	orrs	r3, r2
 8002424:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d105      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002436:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002444:	490e      	ldr	r1, [pc, #56]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002446:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	4313      	orrs	r3, r2
 8002454:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002462:	4907      	ldr	r1, [pc, #28]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4313      	orrs	r3, r2
 8002472:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
 8002488:	42420440 	.word	0x42420440

0800248c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b08d      	sub	sp, #52	; 0x34
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002494:	4b55      	ldr	r3, [pc, #340]	; (80025ec <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002496:	f107 040c 	add.w	r4, r7, #12
 800249a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800249c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80024a2:	881b      	ldrh	r3, [r3, #0]
 80024a4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
 80024aa:	2300      	movs	r3, #0
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	2300      	movs	r3, #0
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d07f      	beq.n	80025c0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d002      	beq.n	80024ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d048      	beq.n	800255a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80024c8:	e08b      	b.n	80025e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80024ca:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80024d0:	4b48      	ldr	r3, [pc, #288]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d07f      	beq.n	80025dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	0c9b      	lsrs	r3, r3, #18
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80024e8:	4413      	add	r3, r2
 80024ea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80024ee:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d018      	beq.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024fa:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	0c5b      	lsrs	r3, r3, #17
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002508:	4413      	add	r3, r2
 800250a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00d      	beq.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800251a:	4a37      	ldr	r2, [pc, #220]	; (80025f8 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	6a3a      	ldr	r2, [r7, #32]
 8002524:	fb02 f303 	mul.w	r3, r2, r3
 8002528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800252a:	e004      	b.n	8002536 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	4a33      	ldr	r2, [pc, #204]	; (80025fc <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002530:	fb02 f303 	mul.w	r3, r2, r3
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002536:	4b2f      	ldr	r3, [pc, #188]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002542:	d102      	bne.n	800254a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002546:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002548:	e048      	b.n	80025dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	4a2c      	ldr	r2, [pc, #176]	; (8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002550:	fba2 2303 	umull	r2, r3, r2, r3
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002558:	e040      	b.n	80025dc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800255a:	4b26      	ldr	r3, [pc, #152]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800256a:	d108      	bne.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800257a:	62bb      	str	r3, [r7, #40]	; 0x28
 800257c:	e01f      	b.n	80025be <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002588:	d109      	bne.n	800259e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002596:	f649 4340 	movw	r3, #40000	; 0x9c40
 800259a:	62bb      	str	r3, [r7, #40]	; 0x28
 800259c:	e00f      	b.n	80025be <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025a8:	d11a      	bne.n	80025e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80025aa:	4b12      	ldr	r3, [pc, #72]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d014      	beq.n	80025e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80025b6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025bc:	e010      	b.n	80025e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80025be:	e00f      	b.n	80025e0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80025c0:	f7ff fe7c 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	0b9b      	lsrs	r3, r3, #14
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	3301      	adds	r3, #1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80025da:	e002      	b.n	80025e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80025dc:	bf00      	nop
 80025de:	e000      	b.n	80025e2 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80025e0:	bf00      	nop
    }
  }
  return (frequency);
 80025e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3734      	adds	r7, #52	; 0x34
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd90      	pop	{r4, r7, pc}
 80025ec:	0800546c 	.word	0x0800546c
 80025f0:	0800547c 	.word	0x0800547c
 80025f4:	40021000 	.word	0x40021000
 80025f8:	007a1200 	.word	0x007a1200
 80025fc:	003d0900 	.word	0x003d0900
 8002600:	aaaaaaab 	.word	0xaaaaaaab

08002604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e041      	b.n	800269a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f002 f932 	bl	8004894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f000 fbd2 	bl	8002dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e041      	b.n	8002738 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d106      	bne.n	80026ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f839 	bl	8002740 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 fb83 	bl	8002dec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr
	...

08002754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_TIM_PWM_Start+0x24>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	bf14      	ite	ne
 8002770:	2301      	movne	r3, #1
 8002772:	2300      	moveq	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	e022      	b.n	80027be <HAL_TIM_PWM_Start+0x6a>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b04      	cmp	r3, #4
 800277c:	d109      	bne.n	8002792 <HAL_TIM_PWM_Start+0x3e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	bf14      	ite	ne
 800278a:	2301      	movne	r3, #1
 800278c:	2300      	moveq	r3, #0
 800278e:	b2db      	uxtb	r3, r3
 8002790:	e015      	b.n	80027be <HAL_TIM_PWM_Start+0x6a>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d109      	bne.n	80027ac <HAL_TIM_PWM_Start+0x58>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	e008      	b.n	80027be <HAL_TIM_PWM_Start+0x6a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	bf14      	ite	ne
 80027b8:	2301      	movne	r3, #1
 80027ba:	2300      	moveq	r3, #0
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e05e      	b.n	8002884 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d104      	bne.n	80027d6 <HAL_TIM_PWM_Start+0x82>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d4:	e013      	b.n	80027fe <HAL_TIM_PWM_Start+0xaa>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d104      	bne.n	80027e6 <HAL_TIM_PWM_Start+0x92>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027e4:	e00b      	b.n	80027fe <HAL_TIM_PWM_Start+0xaa>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b08      	cmp	r3, #8
 80027ea:	d104      	bne.n	80027f6 <HAL_TIM_PWM_Start+0xa2>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027f4:	e003      	b.n	80027fe <HAL_TIM_PWM_Start+0xaa>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2202      	movs	r2, #2
 80027fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2201      	movs	r2, #1
 8002804:	6839      	ldr	r1, [r7, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fd70 	bl	80032ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a1e      	ldr	r2, [pc, #120]	; (800288c <HAL_TIM_PWM_Start+0x138>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d107      	bne.n	8002826 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002820:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002824:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a18      	ldr	r2, [pc, #96]	; (800288c <HAL_TIM_PWM_Start+0x138>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d00e      	beq.n	800284e <HAL_TIM_PWM_Start+0xfa>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d009      	beq.n	800284e <HAL_TIM_PWM_Start+0xfa>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a14      	ldr	r2, [pc, #80]	; (8002890 <HAL_TIM_PWM_Start+0x13c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d004      	beq.n	800284e <HAL_TIM_PWM_Start+0xfa>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_TIM_PWM_Start+0x140>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d111      	bne.n	8002872 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b06      	cmp	r3, #6
 800285e:	d010      	beq.n	8002882 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	f042 0201 	orr.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002870:	e007      	b.n	8002882 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	f042 0201 	orr.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800

08002898 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d122      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d11b      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0202 	mvn.w	r2, #2
 80028c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa6b 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fa5e 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fa6d 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d122      	bne.n	8002948 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b04      	cmp	r3, #4
 800290e:	d11b      	bne.n	8002948 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0204 	mvn.w	r2, #4
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2202      	movs	r2, #2
 800291e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa41 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 8002934:	e005      	b.n	8002942 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa34 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 fa43 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b08      	cmp	r3, #8
 8002954:	d122      	bne.n	800299c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b08      	cmp	r3, #8
 8002962:	d11b      	bne.n	800299c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f06f 0208 	mvn.w	r2, #8
 800296c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2204      	movs	r2, #4
 8002972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f000 fa17 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 8002988:	e005      	b.n	8002996 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fa0a 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fa19 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0310 	and.w	r3, r3, #16
 80029a6:	2b10      	cmp	r3, #16
 80029a8:	d122      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b10      	cmp	r3, #16
 80029b6:	d11b      	bne.n	80029f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0210 	mvn.w	r2, #16
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2208      	movs	r2, #8
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f9ed 	bl	8002db6 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f9e0 	bl	8002da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f9ef 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d10e      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d107      	bne.n	8002a1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0201 	mvn.w	r2, #1
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f9bb 	bl	8002d92 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b80      	cmp	r3, #128	; 0x80
 8002a28:	d10e      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b80      	cmp	r3, #128	; 0x80
 8002a36:	d107      	bne.n	8002a48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fd2e 	bl	80034a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a52:	2b40      	cmp	r3, #64	; 0x40
 8002a54:	d10e      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a60:	2b40      	cmp	r3, #64	; 0x40
 8002a62:	d107      	bne.n	8002a74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f9b3 	bl	8002dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d10e      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d107      	bne.n	8002aa0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0220 	mvn.w	r2, #32
 8002a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 fcf9 	bl	8003492 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002abe:	2302      	movs	r3, #2
 8002ac0:	e0ac      	b.n	8002c1c <HAL_TIM_PWM_ConfigChannel+0x174>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b0c      	cmp	r3, #12
 8002ace:	f200 809f 	bhi.w	8002c10 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002ad2:	a201      	add	r2, pc, #4	; (adr r2, 8002ad8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad8:	08002b0d 	.word	0x08002b0d
 8002adc:	08002c11 	.word	0x08002c11
 8002ae0:	08002c11 	.word	0x08002c11
 8002ae4:	08002c11 	.word	0x08002c11
 8002ae8:	08002b4d 	.word	0x08002b4d
 8002aec:	08002c11 	.word	0x08002c11
 8002af0:	08002c11 	.word	0x08002c11
 8002af4:	08002c11 	.word	0x08002c11
 8002af8:	08002b8f 	.word	0x08002b8f
 8002afc:	08002c11 	.word	0x08002c11
 8002b00:	08002c11 	.word	0x08002c11
 8002b04:	08002c11 	.word	0x08002c11
 8002b08:	08002bcf 	.word	0x08002bcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f9cc 	bl	8002eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	6992      	ldr	r2, [r2, #24]
 8002b22:	f042 0208 	orr.w	r2, r2, #8
 8002b26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	6812      	ldr	r2, [r2, #0]
 8002b30:	6992      	ldr	r2, [r2, #24]
 8002b32:	f022 0204 	bic.w	r2, r2, #4
 8002b36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	6991      	ldr	r1, [r2, #24]
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	6912      	ldr	r2, [r2, #16]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	619a      	str	r2, [r3, #24]
      break;
 8002b4a:	e062      	b.n	8002c12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f000 fa12 	bl	8002f7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	6992      	ldr	r2, [r2, #24]
 8002b62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	6992      	ldr	r2, [r2, #24]
 8002b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	6812      	ldr	r2, [r2, #0]
 8002b80:	6991      	ldr	r1, [r2, #24]
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	6912      	ldr	r2, [r2, #16]
 8002b86:	0212      	lsls	r2, r2, #8
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]
      break;
 8002b8c:	e041      	b.n	8002c12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68b9      	ldr	r1, [r7, #8]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fa5b 	bl	8003050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	69d2      	ldr	r2, [r2, #28]
 8002ba4:	f042 0208 	orr.w	r2, r2, #8
 8002ba8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	6812      	ldr	r2, [r2, #0]
 8002bb2:	69d2      	ldr	r2, [r2, #28]
 8002bb4:	f022 0204 	bic.w	r2, r2, #4
 8002bb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	6812      	ldr	r2, [r2, #0]
 8002bc2:	69d1      	ldr	r1, [r2, #28]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	6912      	ldr	r2, [r2, #16]
 8002bc8:	430a      	orrs	r2, r1
 8002bca:	61da      	str	r2, [r3, #28]
      break;
 8002bcc:	e021      	b.n	8002c12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68b9      	ldr	r1, [r7, #8]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 faa5 	bl	8003124 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6812      	ldr	r2, [r2, #0]
 8002be2:	69d2      	ldr	r2, [r2, #28]
 8002be4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	69d2      	ldr	r2, [r2, #28]
 8002bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	69d1      	ldr	r1, [r2, #28]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	6912      	ldr	r2, [r2, #16]
 8002c08:	0212      	lsls	r2, r2, #8
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	61da      	str	r2, [r3, #28]
      break;
 8002c0e:	e000      	b.n	8002c12 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002c10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3710      	adds	r7, #16
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d101      	bne.n	8002c3c <HAL_TIM_ConfigClockSource+0x18>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	e0a6      	b.n	8002d8a <HAL_TIM_ConfigClockSource+0x166>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d067      	beq.n	8002d44 <HAL_TIM_ConfigClockSource+0x120>
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d80b      	bhi.n	8002c90 <HAL_TIM_ConfigClockSource+0x6c>
 8002c78:	2b10      	cmp	r3, #16
 8002c7a:	d073      	beq.n	8002d64 <HAL_TIM_ConfigClockSource+0x140>
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d802      	bhi.n	8002c86 <HAL_TIM_ConfigClockSource+0x62>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d06f      	beq.n	8002d64 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c84:	e078      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	d06c      	beq.n	8002d64 <HAL_TIM_ConfigClockSource+0x140>
 8002c8a:	2b30      	cmp	r3, #48	; 0x30
 8002c8c:	d06a      	beq.n	8002d64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002c8e:	e073      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002c90:	2b70      	cmp	r3, #112	; 0x70
 8002c92:	d00d      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0x8c>
 8002c94:	2b70      	cmp	r3, #112	; 0x70
 8002c96:	d804      	bhi.n	8002ca2 <HAL_TIM_ConfigClockSource+0x7e>
 8002c98:	2b50      	cmp	r3, #80	; 0x50
 8002c9a:	d033      	beq.n	8002d04 <HAL_TIM_ConfigClockSource+0xe0>
 8002c9c:	2b60      	cmp	r3, #96	; 0x60
 8002c9e:	d041      	beq.n	8002d24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002ca0:	e06a      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca6:	d066      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x152>
 8002ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cac:	d017      	beq.n	8002cde <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002cae:	e063      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f000 faf5 	bl	80032ae <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cd2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	609a      	str	r2, [r3, #8]
      break;
 8002cdc:	e04c      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	6899      	ldr	r1, [r3, #8]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f000 fade 	bl	80032ae <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	6892      	ldr	r2, [r2, #8]
 8002cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d00:	609a      	str	r2, [r3, #8]
      break;
 8002d02:	e039      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6859      	ldr	r1, [r3, #4]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	461a      	mov	r2, r3
 8002d12:	f000 fa55 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2150      	movs	r1, #80	; 0x50
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f000 faac 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8002d22:	e029      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	6859      	ldr	r1, [r3, #4]
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	461a      	mov	r2, r3
 8002d32:	f000 fa73 	bl	800321c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2160      	movs	r1, #96	; 0x60
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 fa9c 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8002d42:	e019      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	461a      	mov	r2, r3
 8002d52:	f000 fa35 	bl	80031c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2140      	movs	r1, #64	; 0x40
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fa8c 	bl	800327a <TIM_ITRx_SetConfig>
      break;
 8002d62:	e009      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4610      	mov	r0, r2
 8002d70:	f000 fa83 	bl	800327a <TIM_ITRx_SetConfig>
        break;
 8002d74:	e000      	b.n	8002d78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002d76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a29      	ldr	r2, [pc, #164]	; (8002ea4 <TIM_Base_SetConfig+0xb8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00b      	beq.n	8002e1c <TIM_Base_SetConfig+0x30>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0a:	d007      	beq.n	8002e1c <TIM_Base_SetConfig+0x30>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a26      	ldr	r2, [pc, #152]	; (8002ea8 <TIM_Base_SetConfig+0xbc>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d003      	beq.n	8002e1c <TIM_Base_SetConfig+0x30>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a25      	ldr	r2, [pc, #148]	; (8002eac <TIM_Base_SetConfig+0xc0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d108      	bne.n	8002e2e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a1c      	ldr	r2, [pc, #112]	; (8002ea4 <TIM_Base_SetConfig+0xb8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00b      	beq.n	8002e4e <TIM_Base_SetConfig+0x62>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d007      	beq.n	8002e4e <TIM_Base_SetConfig+0x62>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a19      	ldr	r2, [pc, #100]	; (8002ea8 <TIM_Base_SetConfig+0xbc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d003      	beq.n	8002e4e <TIM_Base_SetConfig+0x62>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a18      	ldr	r2, [pc, #96]	; (8002eac <TIM_Base_SetConfig+0xc0>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d108      	bne.n	8002e60 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	68fa      	ldr	r2, [r7, #12]
 8002e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a07      	ldr	r2, [pc, #28]	; (8002ea4 <TIM_Base_SetConfig+0xb8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d103      	bne.n	8002e94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	615a      	str	r2, [r3, #20]
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40000800 	.word	0x40000800

08002eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	f023 0201 	bic.w	r2, r3, #1
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	f023 0302 	bic.w	r3, r3, #2
 8002ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <TIM_OC1_SetConfig+0xc8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d10c      	bne.n	8002f26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f023 0308 	bic.w	r3, r3, #8
 8002f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <TIM_OC1_SetConfig+0xc8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d111      	bne.n	8002f52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	695b      	ldr	r3, [r3, #20]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	697a      	ldr	r2, [r7, #20]
 8002f6a:	621a      	str	r2, [r3, #32]
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bc80      	pop	{r7}
 8002f74:	4770      	bx	lr
 8002f76:	bf00      	nop
 8002f78:	40012c00 	.word	0x40012c00

08002f7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	f023 0210 	bic.w	r2, r3, #16
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	021b      	lsls	r3, r3, #8
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0320 	bic.w	r3, r3, #32
 8002fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a1d      	ldr	r2, [pc, #116]	; (800304c <TIM_OC2_SetConfig+0xd0>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d10d      	bne.n	8002ff8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a14      	ldr	r2, [pc, #80]	; (800304c <TIM_OC2_SetConfig+0xd0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d113      	bne.n	8003028 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800300e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	4313      	orrs	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	621a      	str	r2, [r3, #32]
}
 8003042:	bf00      	nop
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	40012c00 	.word	0x40012c00

08003050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0303 	bic.w	r3, r3, #3
 8003086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <TIM_OC3_SetConfig+0xd0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10d      	bne.n	80030ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	021b      	lsls	r3, r3, #8
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	4313      	orrs	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <TIM_OC3_SetConfig+0xd0>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d113      	bne.n	80030fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	621a      	str	r2, [r3, #32]
}
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40012c00 	.word	0x40012c00

08003124 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800315a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4313      	orrs	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800316e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	031b      	lsls	r3, r3, #12
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a0f      	ldr	r2, [pc, #60]	; (80031bc <TIM_OC4_SetConfig+0x98>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d109      	bne.n	8003198 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800318a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	695b      	ldr	r3, [r3, #20]
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	621a      	str	r2, [r3, #32]
}
 80031b2:	bf00      	nop
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bc80      	pop	{r7}
 80031ba:	4770      	bx	lr
 80031bc:	40012c00 	.word	0x40012c00

080031c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	f023 030a 	bic.w	r3, r3, #10
 80031fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
 8003204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	621a      	str	r2, [r3, #32]
}
 8003212:	bf00      	nop
 8003214:	371c      	adds	r7, #28
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr

0800321c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f023 0210 	bic.w	r2, r3, #16
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003246:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	031b      	lsls	r3, r3, #12
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003258:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	693a      	ldr	r2, [r7, #16]
 800326e:	621a      	str	r2, [r3, #32]
}
 8003270:	bf00      	nop
 8003272:	371c      	adds	r7, #28
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	f043 0307 	orr.w	r3, r3, #7
 800329c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	609a      	str	r2, [r3, #8]
}
 80032a4:	bf00      	nop
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr

080032ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b087      	sub	sp, #28
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	021a      	lsls	r2, r3, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	431a      	orrs	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	4313      	orrs	r3, r2
 80032da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	609a      	str	r2, [r3, #8]
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr

080032ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b087      	sub	sp, #28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2201      	movs	r2, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a1a      	ldr	r2, [r3, #32]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	43db      	mvns	r3, r3
 800330e:	401a      	ands	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1a      	ldr	r2, [r3, #32]
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 031f 	and.w	r3, r3, #31
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	fa01 f303 	lsl.w	r3, r1, r3
 8003324:	431a      	orrs	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	621a      	str	r2, [r3, #32]
}
 800332a:	bf00      	nop
 800332c:	371c      	adds	r7, #28
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr

08003334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003348:	2302      	movs	r3, #2
 800334a:	e046      	b.n	80033da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00e      	beq.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003398:	d009      	beq.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d004      	beq.n	80033ae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a10      	ldr	r2, [pc, #64]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d10c      	bne.n	80033c8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40000400 	.word	0x40000400
 80033ec:	40000800 	.word	0x40000800

080033f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003408:	2302      	movs	r3, #2
 800340a:	e03d      	b.n	8003488 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	4313      	orrs	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e03f      	b.n	8003548 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d106      	bne.n	80034e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f001 fa4b 	bl	8004978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2224      	movs	r2, #36	; 0x24
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	68d2      	ldr	r2, [r2, #12]
 80034f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fc86 	bl	8003e0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	6912      	ldr	r2, [r2, #16]
 800350a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800350e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6812      	ldr	r2, [r2, #0]
 8003518:	6952      	ldr	r2, [r2, #20]
 800351a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800351e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6812      	ldr	r2, [r2, #0]
 8003528:	68d2      	ldr	r2, [r2, #12]
 800352a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800352e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af02      	add	r7, sp, #8
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	d17b      	bne.n	8003668 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_UART_Transmit+0x2c>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e074      	b.n	800366a <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_UART_Transmit+0x3e>
 800358a:	2302      	movs	r3, #2
 800358c:	e06d      	b.n	800366a <HAL_UART_Transmit+0x11a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2221      	movs	r2, #33	; 0x21
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035a4:	f7fc fe2a 	bl	80001fc <HAL_GetTick>
 80035a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035be:	d108      	bne.n	80035d2 <HAL_UART_Transmit+0x82>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	e003      	b.n	80035da <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80035e2:	e029      	b.n	8003638 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	2200      	movs	r2, #0
 80035ec:	2180      	movs	r1, #128	; 0x80
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fa39 	bl	8003a66 <UART_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e035      	b.n	800366a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10a      	bne.n	800361a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	8812      	ldrh	r2, [r2, #0]
 800360c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003610:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	3302      	adds	r3, #2
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	e007      	b.n	800362a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	7812      	ldrb	r2, [r2, #0]
 8003622:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	3301      	adds	r3, #1
 8003628:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800362e:	b29b      	uxth	r3, r3
 8003630:	3b01      	subs	r3, #1
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1d0      	bne.n	80035e4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2200      	movs	r2, #0
 800364a:	2140      	movs	r1, #64	; 0x40
 800364c:	68f8      	ldr	r0, [r7, #12]
 800364e:	f000 fa0a 	bl	8003a66 <UART_WaitOnFlagUntilTimeout>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e006      	b.n	800366a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	4613      	mov	r3, r2
 800367e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b20      	cmp	r3, #32
 800368a:	d11d      	bne.n	80036c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_UART_Receive_IT+0x26>
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e016      	b.n	80036ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Receive_IT+0x38>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e00f      	b.n	80036ca <HAL_UART_Receive_IT+0x58>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	461a      	mov	r2, r3
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fa1b 	bl	8003afa <UART_Start_Receive_IT>
 80036c4:	4603      	mov	r3, r0
 80036c6:	e000      	b.n	80036ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80036c8:	2302      	movs	r3, #2
  }
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b08a      	sub	sp, #40	; 0x28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80036f8:	2300      	movs	r3, #0
 80036fa:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10d      	bne.n	8003726 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_UART_IRQHandler+0x52>
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 faca 	bl	8003cb8 <UART_Receive_IT>
      return;
 8003724:	e17c      	b.n	8003a20 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80b1 	beq.w	8003890 <HAL_UART_IRQHandler+0x1bc>
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <HAL_UART_IRQHandler+0x70>
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80a6 	beq.w	8003890 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00a      	beq.n	8003764 <HAL_UART_IRQHandler+0x90>
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0201 	orr.w	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_UART_IRQHandler+0xb0>
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	f043 0202 	orr.w	r2, r3, #2
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_UART_IRQHandler+0xd0>
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f043 0204 	orr.w	r2, r3, #4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00f      	beq.n	80037ce <HAL_UART_IRQHandler+0xfa>
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <HAL_UART_IRQHandler+0xee>
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c6:	f043 0208 	orr.w	r2, r3, #8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 811f 	beq.w	8003a16 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <HAL_UART_IRQHandler+0x11e>
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d002      	beq.n	80037f2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fa63 	bl	8003cb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <HAL_UART_IRQHandler+0x146>
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d031      	beq.n	800387e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f9a6 	bl	8003b6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d023      	beq.n	8003876 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	6952      	ldr	r2, [r2, #20]
 8003838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	2b00      	cmp	r3, #0
 8003844:	d013      	beq.n	800386e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	4a77      	ldr	r2, [pc, #476]	; (8003a28 <HAL_UART_IRQHandler+0x354>)
 800384c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fb1c 	bl	8000e90 <HAL_DMA_Abort_IT>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d016      	beq.n	800388c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003868:	4610      	mov	r0, r2
 800386a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800386c:	e00e      	b.n	800388c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8e5 	bl	8003a3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003874:	e00a      	b.n	800388c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8e1 	bl	8003a3e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800387c:	e006      	b.n	800388c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 f8dd 	bl	8003a3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800388a:	e0c4      	b.n	8003a16 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800388c:	bf00      	nop
    return;
 800388e:	e0c2      	b.n	8003a16 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	2b01      	cmp	r3, #1
 8003896:	f040 80a1 	bne.w	80039dc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 809b 	beq.w	80039dc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8095 	beq.w	80039dc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d04e      	beq.n	8003974 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	827b      	strh	r3, [r7, #18]
      if (  (nb_remaining_rx_data > 0U)
 80038e0:	8a7b      	ldrh	r3, [r7, #18]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8099 	beq.w	8003a1a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038ec:	8a7a      	ldrh	r2, [r7, #18]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	f080 8093 	bcs.w	8003a1a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8a7a      	ldrh	r2, [r7, #18]
 80038f8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b20      	cmp	r3, #32
 8003902:	d02b      	beq.n	800395c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6812      	ldr	r2, [r2, #0]
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003912:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	6952      	ldr	r2, [r2, #20]
 800391e:	f022 0201 	bic.w	r2, r2, #1
 8003922:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	6952      	ldr	r2, [r2, #20]
 800392e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003932:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	68d2      	ldr	r2, [r2, #12]
 800394c:	f022 0210 	bic.w	r2, r2, #16
 8003950:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003956:	4618      	mov	r0, r3
 8003958:	f7fd fa5f 	bl	8000e1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003964:	b29b      	uxth	r3, r3
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	b29b      	uxth	r3, r3
 800396a:	4619      	mov	r1, r3
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f86f 	bl	8003a50 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003972:	e052      	b.n	8003a1a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800397c:	b29b      	uxth	r3, r3
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	823b      	strh	r3, [r7, #16]
      if (  (huart->RxXferCount > 0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d048      	beq.n	8003a1e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800398c:	8a3b      	ldrh	r3, [r7, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d045      	beq.n	8003a1e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	6812      	ldr	r2, [r2, #0]
 800399a:	68d2      	ldr	r2, [r2, #12]
 800399c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039a0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	6952      	ldr	r2, [r2, #20]
 80039ac:	f022 0201 	bic.w	r2, r2, #1
 80039b0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	68d2      	ldr	r2, [r2, #12]
 80039ca:	f022 0210 	bic.w	r2, r2, #16
 80039ce:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039d0:	8a3b      	ldrh	r3, [r7, #16]
 80039d2:	4619      	mov	r1, r3
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 f83b 	bl	8003a50 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80039da:	e020      	b.n	8003a1e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_UART_IRQHandler+0x324>
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f8fb 	bl	8003bec <UART_Transmit_IT>
    return;
 80039f6:	e013      	b.n	8003a20 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00e      	beq.n	8003a20 <HAL_UART_IRQHandler+0x34c>
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 f93b 	bl	8003c88 <UART_EndTransmit_IT>
    return;
 8003a12:	bf00      	nop
 8003a14:	e004      	b.n	8003a20 <HAL_UART_IRQHandler+0x34c>
    return;
 8003a16:	bf00      	nop
 8003a18:	e002      	b.n	8003a20 <HAL_UART_IRQHandler+0x34c>
      return;
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <HAL_UART_IRQHandler+0x34c>
      return;
 8003a1e:	bf00      	nop
  }
}
 8003a20:	3728      	adds	r7, #40	; 0x28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	08003bc5 	.word	0x08003bc5

08003a2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr

08003a3e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a46:	bf00      	nop
 8003a48:	370c      	adds	r7, #12
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bc80      	pop	{r7}
 8003a4e:	4770      	bx	lr

08003a50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bc80      	pop	{r7}
 8003a64:	4770      	bx	lr

08003a66 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	60f8      	str	r0, [r7, #12]
 8003a6e:	60b9      	str	r1, [r7, #8]
 8003a70:	603b      	str	r3, [r7, #0]
 8003a72:	4613      	mov	r3, r2
 8003a74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a76:	e02c      	b.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d028      	beq.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d007      	beq.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a86:	f7fc fbb9 	bl	80001fc <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	1ad2      	subs	r2, r2, r3
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d91d      	bls.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	68d2      	ldr	r2, [r2, #12]
 8003aa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aa4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	6952      	ldr	r2, [r2, #20]
 8003ab0:	f022 0201 	bic.w	r2, r2, #1
 8003ab4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e00f      	b.n	8003af2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	401a      	ands	r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	bf0c      	ite	eq
 8003ae2:	2301      	moveq	r3, #1
 8003ae4:	2300      	movne	r3, #0
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d0c3      	beq.n	8003a78 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b085      	sub	sp, #20
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	4613      	mov	r3, r2
 8003b06:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	88fa      	ldrh	r2, [r7, #6]
 8003b12:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	88fa      	ldrh	r2, [r7, #6]
 8003b18:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2222      	movs	r2, #34	; 0x22
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	68d2      	ldr	r2, [r2, #12]
 8003b3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	6812      	ldr	r2, [r2, #0]
 8003b48:	6952      	ldr	r2, [r2, #20]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	f042 0220 	orr.w	r2, r2, #32
 8003b5e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr

08003b6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	68d2      	ldr	r2, [r2, #12]
 8003b7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b82:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	6952      	ldr	r2, [r2, #20]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d107      	bne.n	8003bac <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	68d2      	ldr	r2, [r2, #12]
 8003ba6:	f022 0210 	bic.w	r2, r2, #16
 8003baa:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bc80      	pop	{r7}
 8003bc2:	4770      	bx	lr

08003bc4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bde:	68f8      	ldr	r0, [r7, #12]
 8003be0:	f7ff ff2d 	bl	8003a3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	2b21      	cmp	r3, #33	; 0x21
 8003bfe:	d13d      	bne.n	8003c7c <UART_Transmit_IT+0x90>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c08:	d113      	bne.n	8003c32 <UART_Transmit_IT+0x46>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10f      	bne.n	8003c32 <UART_Transmit_IT+0x46>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	8812      	ldrh	r2, [r2, #0]
 8003c20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c24:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	1c9a      	adds	r2, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	621a      	str	r2, [r3, #32]
 8003c30:	e008      	b.n	8003c44 <UART_Transmit_IT+0x58>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	1c58      	adds	r0, r3, #1
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	6208      	str	r0, [r1, #32]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	6053      	str	r3, [r2, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	4619      	mov	r1, r3
 8003c52:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10f      	bne.n	8003c78 <UART_Transmit_IT+0x8c>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	68d2      	ldr	r2, [r2, #12]
 8003c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c66:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	68d2      	ldr	r2, [r2, #12]
 8003c72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c76:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <UART_Transmit_IT+0x92>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	68d2      	ldr	r2, [r2, #12]
 8003c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff febf 	bl	8003a2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b22      	cmp	r3, #34	; 0x22
 8003cca:	f040 8099 	bne.w	8003e00 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cd6:	d117      	bne.n	8003d08 <UART_Receive_IT+0x50>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d113      	bne.n	8003d08 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	1c9a      	adds	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	629a      	str	r2, [r3, #40]	; 0x28
 8003d06:	e026      	b.n	8003d56 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d1a:	d007      	beq.n	8003d2c <UART_Receive_IT+0x74>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <UART_Receive_IT+0x82>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d106      	bne.n	8003d3a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	701a      	strb	r2, [r3, #0]
 8003d38:	e008      	b.n	8003d4c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4619      	mov	r1, r3
 8003d64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d148      	bne.n	8003dfc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	68d2      	ldr	r2, [r2, #12]
 8003d74:	f022 0220 	bic.w	r2, r2, #32
 8003d78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	68d2      	ldr	r2, [r2, #12]
 8003d84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	6812      	ldr	r2, [r2, #0]
 8003d92:	6952      	ldr	r2, [r2, #20]
 8003d94:	f022 0201 	bic.w	r2, r2, #1
 8003d98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d123      	bne.n	8003df2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	68d2      	ldr	r2, [r2, #12]
 8003dba:	f022 0210 	bic.w	r2, r2, #16
 8003dbe:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0310 	and.w	r3, r3, #16
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d10a      	bne.n	8003de4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff fe30 	bl	8003a50 <HAL_UARTEx_RxEventCallback>
 8003df0:	e002      	b.n	8003df8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f95c 	bl	80040b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e002      	b.n	8003e02 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	e000      	b.n	8003e02 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e00:	2302      	movs	r3, #2
  }
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	6912      	ldr	r2, [r2, #16]
 8003e1e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68d2      	ldr	r2, [r2, #12]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689a      	ldr	r2, [r3, #8]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e4a:	f023 030c 	bic.w	r3, r3, #12
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	6952      	ldr	r2, [r2, #20]
 8003e5e:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6992      	ldr	r2, [r2, #24]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a2c      	ldr	r2, [pc, #176]	; (8003f20 <UART_SetConfig+0x114>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d103      	bne.n	8003e7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e74:	f7fe fa22 	bl	80022bc <HAL_RCC_GetPCLK2Freq>
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	e002      	b.n	8003e82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e7c:	f7fe fa0a 	bl	8002294 <HAL_RCC_GetPCLK1Freq>
 8003e80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6819      	ldr	r1, [r3, #0]
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	4413      	add	r3, r2
 8003e8e:	009a      	lsls	r2, r3, #2
 8003e90:	441a      	add	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9c:	4a21      	ldr	r2, [pc, #132]	; (8003f24 <UART_SetConfig+0x118>)
 8003e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	0118      	lsls	r0, r3, #4
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009a      	lsls	r2, r3, #2
 8003eb0:	441a      	add	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ebc:	4b19      	ldr	r3, [pc, #100]	; (8003f24 <UART_SetConfig+0x118>)
 8003ebe:	fba3 4302 	umull	r4, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	2464      	movs	r4, #100	; 0x64
 8003ec6:	fb04 f303 	mul.w	r3, r4, r3
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	3332      	adds	r3, #50	; 0x32
 8003ed0:	4a14      	ldr	r2, [pc, #80]	; (8003f24 <UART_SetConfig+0x118>)
 8003ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003edc:	4418      	add	r0, r3
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	4413      	add	r3, r2
 8003ee6:	009a      	lsls	r2, r3, #2
 8003ee8:	441a      	add	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ef4:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <UART_SetConfig+0x118>)
 8003ef6:	fba3 4302 	umull	r4, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2464      	movs	r4, #100	; 0x64
 8003efe:	fb04 f303 	mul.w	r3, r4, r3
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	3332      	adds	r3, #50	; 0x32
 8003f08:	4a06      	ldr	r2, [pc, #24]	; (8003f24 <UART_SetConfig+0x118>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	4403      	add	r3, r0
 8003f16:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd90      	pop	{r4, r7, pc}
 8003f20:	40013800 	.word	0x40013800
 8003f24:	51eb851f 	.word	0x51eb851f

08003f28 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af02      	add	r7, sp, #8
 8003f2e:	4603      	mov	r3, r0
 8003f30:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	f023 030f 	bic.w	r3, r3, #15
 8003f38:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8003f3a:	79fb      	ldrb	r3, [r7, #7]
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
 8003f42:	f043 030c 	orr.w	r3, r3, #12
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	f043 0308 	orr.w	r3, r3, #8
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8003f54:	7bbb      	ldrb	r3, [r7, #14]
 8003f56:	f043 030c 	orr.w	r3, r3, #12
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8003f5e:	7bbb      	ldrb	r3, [r7, #14]
 8003f60:	f043 0308 	orr.w	r3, r3, #8
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003f68:	f107 0208 	add.w	r2, r7, #8
 8003f6c:	2364      	movs	r3, #100	; 0x64
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2304      	movs	r3, #4
 8003f72:	214e      	movs	r1, #78	; 0x4e
 8003f74:	4803      	ldr	r0, [pc, #12]	; (8003f84 <lcd_send_cmd+0x5c>)
 8003f76:	f7fd fab1 	bl	80014dc <HAL_I2C_Master_Transmit>
}
 8003f7a:	bf00      	nop
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200000e0 	.word	0x200000e0

08003f88 <lcd_send_data>:

void lcd_send_data (char data)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	f023 030f 	bic.w	r3, r3, #15
 8003f98:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	f043 030d 	orr.w	r3, r3, #13
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8003faa:	7bfb      	ldrb	r3, [r7, #15]
 8003fac:	f043 0309 	orr.w	r3, r3, #9
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8003fb4:	7bbb      	ldrb	r3, [r7, #14]
 8003fb6:	f043 030d 	orr.w	r3, r3, #13
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8003fbe:	7bbb      	ldrb	r3, [r7, #14]
 8003fc0:	f043 0309 	orr.w	r3, r3, #9
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8003fc8:	f107 0208 	add.w	r2, r7, #8
 8003fcc:	2364      	movs	r3, #100	; 0x64
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2304      	movs	r3, #4
 8003fd2:	214e      	movs	r1, #78	; 0x4e
 8003fd4:	4803      	ldr	r0, [pc, #12]	; (8003fe4 <lcd_send_data+0x5c>)
 8003fd6:	f7fd fa81 	bl	80014dc <HAL_I2C_Master_Transmit>
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200000e0 	.word	0x200000e0

08003fe8 <lcd_init>:

void lcd_init (void)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8003fec:	2033      	movs	r0, #51	; 0x33
 8003fee:	f7ff ff9b 	bl	8003f28 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8003ff2:	2032      	movs	r0, #50	; 0x32
 8003ff4:	f7ff ff98 	bl	8003f28 <lcd_send_cmd>
	HAL_Delay(50);
 8003ff8:	2032      	movs	r0, #50	; 0x32
 8003ffa:	f7fc f909 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8003ffe:	2028      	movs	r0, #40	; 0x28
 8004000:	f7ff ff92 	bl	8003f28 <lcd_send_cmd>
	HAL_Delay(50);
 8004004:	2032      	movs	r0, #50	; 0x32
 8004006:	f7fc f903 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 800400a:	2001      	movs	r0, #1
 800400c:	f7ff ff8c 	bl	8003f28 <lcd_send_cmd>
	HAL_Delay(50);
 8004010:	2032      	movs	r0, #50	; 0x32
 8004012:	f7fc f8fd 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8004016:	2006      	movs	r0, #6
 8004018:	f7ff ff86 	bl	8003f28 <lcd_send_cmd>
	HAL_Delay(50);
 800401c:	2032      	movs	r0, #50	; 0x32
 800401e:	f7fc f8f7 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8004022:	200c      	movs	r0, #12
 8004024:	f7ff ff80 	bl	8003f28 <lcd_send_cmd>
	HAL_Delay(50);
 8004028:	2032      	movs	r0, #50	; 0x32
 800402a:	f7fc f8f1 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 800402e:	2002      	movs	r0, #2
 8004030:	f7ff ff7a 	bl	8003f28 <lcd_send_cmd>
	HAL_Delay(50);
 8004034:	2032      	movs	r0, #50	; 0x32
 8004036:	f7fc f8eb 	bl	8000210 <HAL_Delay>
	lcd_send_cmd (0x80);
 800403a:	2080      	movs	r0, #128	; 0x80
 800403c:	f7ff ff74 	bl	8003f28 <lcd_send_cmd>
}
 8004040:	bf00      	nop
 8004042:	bd80      	pop	{r7, pc}

08004044 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800404c:	e006      	b.n	800405c <lcd_send_string+0x18>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff ff96 	bl	8003f88 <lcd_send_data>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f4      	bne.n	800404e <lcd_send_string+0xa>
}
 8004064:	bf00      	nop
 8004066:	3708      	adds	r7, #8
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d108      	bne.n	800408e <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	4413      	add	r3, r2
 8004086:	b2db      	uxtb	r3, r3
 8004088:	337f      	adds	r3, #127	; 0x7f
 800408a:	73fb      	strb	r3, [r7, #15]
 800408c:	e008      	b.n	80040a0 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	3340      	adds	r3, #64	; 0x40
 8004094:	b2db      	uxtb	r3, r3
 8004096:	b25b      	sxtb	r3, r3
 8004098:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800409c:	b25b      	sxtb	r3, r3
 800409e:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80040a0:	7bfb      	ldrb	r3, [r7, #15]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff ff40 	bl	8003f28 <lcd_send_cmd>
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	 if(huart->Instance == USART3)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a0d      	ldr	r2, [pc, #52]	; (80040f4 <HAL_UART_RxCpltCallback+0x44>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d10f      	bne.n	80040e2 <HAL_UART_RxCpltCallback+0x32>
	 {
		 if (receive_data_itr == 'b')
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <HAL_UART_RxCpltCallback+0x48>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b62      	cmp	r3, #98	; 0x62
 80040c8:	d103      	bne.n	80040d2 <HAL_UART_RxCpltCallback+0x22>
		 {
			 htim1.Instance->CCR1 = 25;
 80040ca:	4b0c      	ldr	r3, [pc, #48]	; (80040fc <HAL_UART_RxCpltCallback+0x4c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2219      	movs	r2, #25
 80040d0:	635a      	str	r2, [r3, #52]	; 0x34
		 }
		 if (receive_data_itr == 'c')
 80040d2:	4b09      	ldr	r3, [pc, #36]	; (80040f8 <HAL_UART_RxCpltCallback+0x48>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b63      	cmp	r3, #99	; 0x63
 80040d8:	d103      	bne.n	80040e2 <HAL_UART_RxCpltCallback+0x32>
		 {
			 htim1.Instance->CCR1 = 125;
 80040da:	4b08      	ldr	r3, [pc, #32]	; (80040fc <HAL_UART_RxCpltCallback+0x4c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	227d      	movs	r2, #125	; 0x7d
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34
		 }
	 }
	 HAL_UART_Receive_IT(&huart3, &receive_data_itr, sizeof(receive_data_itr));
 80040e2:	2201      	movs	r2, #1
 80040e4:	4904      	ldr	r1, [pc, #16]	; (80040f8 <HAL_UART_RxCpltCallback+0x48>)
 80040e6:	4806      	ldr	r0, [pc, #24]	; (8004100 <HAL_UART_RxCpltCallback+0x50>)
 80040e8:	f7ff fac3 	bl	8003672 <HAL_UART_Receive_IT>
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40004800 	.word	0x40004800
 80040f8:	200001ac 	.word	0x200001ac
 80040fc:	20000164 	.word	0x20000164
 8004100:	2000009c 	.word	0x2000009c

08004104 <filter>:

uint16_t filter(int sensor)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b09e      	sub	sp, #120	; 0x78
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
	int filterArray[20];
	for (int sample = 0; sample < 20; sample++)
 800410c:	2300      	movs	r3, #0
 800410e:	677b      	str	r3, [r7, #116]	; 0x74
 8004110:	e01e      	b.n	8004150 <filter+0x4c>
	{
		if (sensor>900)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8004118:	dd0c      	ble.n	8004134 <filter+0x30>
		{
			filterArray[sample] = HAL_ADC_GetValue(&hadc1);
 800411a:	4841      	ldr	r0, [pc, #260]	; (8004220 <filter+0x11c>)
 800411c:	f7fc fb26 	bl	800076c <HAL_ADC_GetValue>
 8004120:	4603      	mov	r3, r0
 8004122:	461a      	mov	r2, r3
 8004124:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800412c:	440b      	add	r3, r1
 800412e:	f843 2c6c 	str.w	r2, [r3, #-108]
 8004132:	e007      	b.n	8004144 <filter+0x40>
		}
		else
		{
			filterArray[sample] = 0;
 8004134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800413c:	4413      	add	r3, r2
 800413e:	2200      	movs	r2, #0
 8004140:	f843 2c6c 	str.w	r2, [r3, #-108]
		}
		HAL_Delay(5);
 8004144:	2005      	movs	r0, #5
 8004146:	f7fc f863 	bl	8000210 <HAL_Delay>
	for (int sample = 0; sample < 20; sample++)
 800414a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800414c:	3301      	adds	r3, #1
 800414e:	677b      	str	r3, [r7, #116]	; 0x74
 8004150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004152:	2b13      	cmp	r3, #19
 8004154:	dddd      	ble.n	8004112 <filter+0xe>
	}
	for (int i = 0; i < 19; i++)
 8004156:	2300      	movs	r3, #0
 8004158:	673b      	str	r3, [r7, #112]	; 0x70
 800415a:	e03a      	b.n	80041d2 <filter+0xce>
	{
		  for (int j = i + 1; j < 20; j++)
 800415c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800415e:	3301      	adds	r3, #1
 8004160:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004162:	e030      	b.n	80041c6 <filter+0xc2>
		  {
			if (filterArray[i] > filterArray[j])
 8004164:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800416c:	4413      	add	r3, r2
 800416e:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 8004172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800417a:	440b      	add	r3, r1
 800417c:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8004180:	429a      	cmp	r2, r3
 8004182:	dd1d      	ble.n	80041c0 <filter+0xbc>
			{
			  int swap = filterArray[i];
 8004184:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800418c:	4413      	add	r3, r2
 800418e:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8004192:	663b      	str	r3, [r7, #96]	; 0x60
			  filterArray[i] = filterArray[j];
 8004194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800419c:	4413      	add	r3, r2
 800419e:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 80041a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80041aa:	440b      	add	r3, r1
 80041ac:	f843 2c6c 	str.w	r2, [r3, #-108]
			  filterArray[j] = swap;
 80041b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80041b8:	4413      	add	r3, r2
 80041ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041bc:	f843 2c6c 	str.w	r2, [r3, #-108]
		  for (int j = i + 1; j < 20; j++)
 80041c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c2:	3301      	adds	r3, #1
 80041c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c8:	2b13      	cmp	r3, #19
 80041ca:	ddcb      	ble.n	8004164 <filter+0x60>
	for (int i = 0; i < 19; i++)
 80041cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ce:	3301      	adds	r3, #1
 80041d0:	673b      	str	r3, [r7, #112]	; 0x70
 80041d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d4:	2b12      	cmp	r3, #18
 80041d6:	ddc1      	ble.n	800415c <filter+0x58>
			}
		  }
	}
	  long sum = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	66bb      	str	r3, [r7, #104]	; 0x68
	  for (int sample = 5; sample < 15; sample++)
 80041dc:	2305      	movs	r3, #5
 80041de:	667b      	str	r3, [r7, #100]	; 0x64
 80041e0:	e00c      	b.n	80041fc <filter+0xf8>
	  {
		sum += filterArray[sample];
 80041e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80041ea:	4413      	add	r3, r2
 80041ec:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 80041f0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041f2:	4413      	add	r3, r2
 80041f4:	66bb      	str	r3, [r7, #104]	; 0x68
	  for (int sample = 5; sample < 15; sample++)
 80041f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041f8:	3301      	adds	r3, #1
 80041fa:	667b      	str	r3, [r7, #100]	; 0x64
 80041fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041fe:	2b0e      	cmp	r3, #14
 8004200:	ddef      	ble.n	80041e2 <filter+0xde>
	  }

	  uint16_t avg_value = sum / 10;
 8004202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004204:	4a07      	ldr	r2, [pc, #28]	; (8004224 <filter+0x120>)
 8004206:	fb82 1203 	smull	r1, r2, r2, r3
 800420a:	1092      	asrs	r2, r2, #2
 800420c:	17db      	asrs	r3, r3, #31
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  return avg_value;
 8004214:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
}
 8004218:	4618      	mov	r0, r3
 800421a:	3778      	adds	r7, #120	; 0x78
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	20000134 	.word	0x20000134
 8004224:	66666667 	.word	0x66666667

08004228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800422e:	f7fb ff8d 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004232:	f000 f893 	bl	800435c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004236:	f000 fa25 	bl	8004684 <MX_GPIO_Init>
  MX_ADC1_Init();
 800423a:	f000 f8eb 	bl	8004414 <MX_ADC1_Init>
  MX_I2C1_Init();
 800423e:	f000 f927 	bl	8004490 <MX_I2C1_Init>
  MX_TIM1_Init();
 8004242:	f000 f953 	bl	80044ec <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8004246:	f000 f9f3 	bl	8004630 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800424a:	2100      	movs	r1, #0
 800424c:	483c      	ldr	r0, [pc, #240]	; (8004340 <main+0x118>)
 800424e:	f7fe fa81 	bl	8002754 <HAL_TIM_PWM_Start>

  HAL_Delay(1000);
 8004252:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004256:	f7fb ffdb 	bl	8000210 <HAL_Delay>
  lcd_init();
 800425a:	f7ff fec5 	bl	8003fe8 <lcd_init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 800425e:	4839      	ldr	r0, [pc, #228]	; (8004344 <main+0x11c>)
 8004260:	f7fc fc24 	bl	8000aac <HAL_ADCEx_Calibration_Start>
  uint16_t value;
  uint16_t avg_value;
  unsigned char target[5];
  unsigned char origin[5];

  HAL_UART_Receive_IT(&huart3, &receive_data_itr, sizeof(receive_data_itr));
 8004264:	2201      	movs	r2, #1
 8004266:	4938      	ldr	r1, [pc, #224]	; (8004348 <main+0x120>)
 8004268:	4838      	ldr	r0, [pc, #224]	; (800434c <main+0x124>)
 800426a:	f7ff fa02 	bl	8003672 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 800426e:	4835      	ldr	r0, [pc, #212]	; (8004344 <main+0x11c>)
 8004270:	f7fc f8c8 	bl	8000404 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8004274:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004278:	4832      	ldr	r0, [pc, #200]	; (8004344 <main+0x11c>)
 800427a:	f7fc f971 	bl	8000560 <HAL_ADC_PollForConversion>
	  value = HAL_ADC_GetValue(&hadc1);
 800427e:	4831      	ldr	r0, [pc, #196]	; (8004344 <main+0x11c>)
 8004280:	f7fc fa74 	bl	800076c <HAL_ADC_GetValue>
 8004284:	4603      	mov	r3, r0
 8004286:	82fb      	strh	r3, [r7, #22]

	  // loc mem
	  avg_value = filter(HAL_ADC_GetValue(&hadc1));
 8004288:	482e      	ldr	r0, [pc, #184]	; (8004344 <main+0x11c>)
 800428a:	f7fc fa6f 	bl	800076c <HAL_ADC_GetValue>
 800428e:	4603      	mov	r3, r0
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff ff37 	bl	8004104 <filter>
 8004296:	4603      	mov	r3, r0
 8004298:	82bb      	strh	r3, [r7, #20]
	  //

	  sprintf(target, "%d\n", avg_value);
 800429a:	8aba      	ldrh	r2, [r7, #20]
 800429c:	f107 030c 	add.w	r3, r7, #12
 80042a0:	492b      	ldr	r1, [pc, #172]	; (8004350 <main+0x128>)
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fca0 	bl	8004be8 <siprintf>
	  sprintf(origin, "%d\n", value);
 80042a8:	8afa      	ldrh	r2, [r7, #22]
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	4928      	ldr	r1, [pc, #160]	; (8004350 <main+0x128>)
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fc9a 	bl	8004be8 <siprintf>
	  lcd_goto_XY(0,0);
 80042b4:	2100      	movs	r1, #0
 80042b6:	2000      	movs	r0, #0
 80042b8:	f7ff fed8 	bl	800406c <lcd_goto_XY>
	  lcd_send_string("Da_loc:");
 80042bc:	4825      	ldr	r0, [pc, #148]	; (8004354 <main+0x12c>)
 80042be:	f7ff fec1 	bl	8004044 <lcd_send_string>
	  lcd_send_string(target);
 80042c2:	f107 030c 	add.w	r3, r7, #12
 80042c6:	4618      	mov	r0, r3
 80042c8:	f7ff febc 	bl	8004044 <lcd_send_string>
	  lcd_goto_XY(1,0);
 80042cc:	2100      	movs	r1, #0
 80042ce:	2001      	movs	r0, #1
 80042d0:	f7ff fecc 	bl	800406c <lcd_goto_XY>
	  lcd_send_string("Chua_loc:");
 80042d4:	4820      	ldr	r0, [pc, #128]	; (8004358 <main+0x130>)
 80042d6:	f7ff feb5 	bl	8004044 <lcd_send_string>
	  lcd_send_string(origin);
 80042da:	1d3b      	adds	r3, r7, #4
 80042dc:	4618      	mov	r0, r3
 80042de:	f7ff feb1 	bl	8004044 <lcd_send_string>

	  //htim1.Instance->CCR1 = 25;
	  if (receive_data_itr == 'a' || receive_data_itr == 'b' || receive_data_itr == 'c')
 80042e2:	4b19      	ldr	r3, [pc, #100]	; (8004348 <main+0x120>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b61      	cmp	r3, #97	; 0x61
 80042e8:	d027      	beq.n	800433a <main+0x112>
 80042ea:	4b17      	ldr	r3, [pc, #92]	; (8004348 <main+0x120>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b62      	cmp	r3, #98	; 0x62
 80042f0:	d023      	beq.n	800433a <main+0x112>
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <main+0x120>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b63      	cmp	r3, #99	; 0x63
 80042f8:	d01f      	beq.n	800433a <main+0x112>
	  {
		 continue;
	  }

	  HAL_UART_Transmit(&huart3, &origin, sizeof(origin) ,100);
 80042fa:	1d39      	adds	r1, r7, #4
 80042fc:	2364      	movs	r3, #100	; 0x64
 80042fe:	2205      	movs	r2, #5
 8004300:	4812      	ldr	r0, [pc, #72]	; (800434c <main+0x124>)
 8004302:	f7ff f925 	bl	8003550 <HAL_UART_Transmit>

	  if (avg_value > 1200)
 8004306:	8abb      	ldrh	r3, [r7, #20]
 8004308:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800430c:	d908      	bls.n	8004320 <main+0xf8>
	  {
		  htim1.Instance->CCR1 = 125;
 800430e:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <main+0x118>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	227d      	movs	r2, #125	; 0x7d
 8004314:	635a      	str	r2, [r3, #52]	; 0x34
		  //HAL_UART_Transmit(&huart3, &send_data, sizeof(send_data) ,100);
		  HAL_Delay(500);
 8004316:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800431a:	f7fb ff79 	bl	8000210 <HAL_Delay>
 800431e:	e007      	b.n	8004330 <main+0x108>
	  }
	  else
	  {
		  htim1.Instance->CCR1 = 25;
 8004320:	4b07      	ldr	r3, [pc, #28]	; (8004340 <main+0x118>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2219      	movs	r2, #25
 8004326:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(500);
 8004328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800432c:	f7fb ff70 	bl	8000210 <HAL_Delay>
	  }
	  HAL_Delay(512);
 8004330:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004334:	f7fb ff6c 	bl	8000210 <HAL_Delay>
 8004338:	e799      	b.n	800426e <main+0x46>
		 continue;
 800433a:	bf00      	nop
	  HAL_ADC_Start(&hadc1);
 800433c:	e797      	b.n	800426e <main+0x46>
 800433e:	bf00      	nop
 8004340:	20000164 	.word	0x20000164
 8004344:	20000134 	.word	0x20000134
 8004348:	200001ac 	.word	0x200001ac
 800434c:	2000009c 	.word	0x2000009c
 8004350:	08005480 	.word	0x08005480
 8004354:	08005484 	.word	0x08005484
 8004358:	0800548c 	.word	0x0800548c

0800435c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b094      	sub	sp, #80	; 0x50
 8004360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004362:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004366:	2228      	movs	r2, #40	; 0x28
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fc34 	bl	8004bd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004370:	f107 0314 	add.w	r3, r7, #20
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004380:	1d3b      	adds	r3, r7, #4
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	609a      	str	r2, [r3, #8]
 800438a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800438c:	2301      	movs	r3, #1
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004390:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004396:	2300      	movs	r3, #0
 8004398:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800439a:	2301      	movs	r3, #1
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800439e:	2302      	movs	r3, #2
 80043a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80043a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80043a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80043ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80043ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fb98 	bl	8001ae8 <HAL_RCC_OscConfig>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80043be:	f000 f9b9 	bl	8004734 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80043c2:	230f      	movs	r3, #15
 80043c4:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80043c6:	2302      	movs	r3, #2
 80043c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80043ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043d2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80043d4:	2300      	movs	r3, #0
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80043d8:	f107 0314 	add.w	r3, r7, #20
 80043dc:	2102      	movs	r1, #2
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd fe02 	bl	8001fe8 <HAL_RCC_ClockConfig>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <SystemClock_Config+0x92>
  {
    Error_Handler();
 80043ea:	f000 f9a3 	bl	8004734 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80043ee:	2302      	movs	r3, #2
 80043f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80043f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fd ff90 	bl	8002320 <HAL_RCCEx_PeriphCLKConfig>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004406:	f000 f995 	bl	8004734 <Error_Handler>
  }
}
 800440a:	bf00      	nop
 800440c:	3750      	adds	r7, #80	; 0x50
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
	...

08004414 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800441a:	1d3b      	adds	r3, r7, #4
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	605a      	str	r2, [r3, #4]
 8004422:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8004424:	4b18      	ldr	r3, [pc, #96]	; (8004488 <MX_ADC1_Init+0x74>)
 8004426:	4a19      	ldr	r2, [pc, #100]	; (800448c <MX_ADC1_Init+0x78>)
 8004428:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <MX_ADC1_Init+0x74>)
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004430:	4b15      	ldr	r3, [pc, #84]	; (8004488 <MX_ADC1_Init+0x74>)
 8004432:	2200      	movs	r2, #0
 8004434:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <MX_ADC1_Init+0x74>)
 8004438:	2200      	movs	r2, #0
 800443a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <MX_ADC1_Init+0x74>)
 800443e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004442:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004444:	4b10      	ldr	r3, [pc, #64]	; (8004488 <MX_ADC1_Init+0x74>)
 8004446:	2200      	movs	r2, #0
 8004448:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <MX_ADC1_Init+0x74>)
 800444c:	2201      	movs	r2, #1
 800444e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004450:	480d      	ldr	r0, [pc, #52]	; (8004488 <MX_ADC1_Init+0x74>)
 8004452:	f7fb feff 	bl	8000254 <HAL_ADC_Init>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d001      	beq.n	8004460 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800445c:	f000 f96a 	bl	8004734 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8004460:	2300      	movs	r3, #0
 8004462:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004464:	2301      	movs	r3, #1
 8004466:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800446c:	1d3b      	adds	r3, r7, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4805      	ldr	r0, [pc, #20]	; (8004488 <MX_ADC1_Init+0x74>)
 8004472:	f7fc f987 	bl	8000784 <HAL_ADC_ConfigChannel>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800447c:	f000 f95a 	bl	8004734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000134 	.word	0x20000134
 800448c:	40012400 	.word	0x40012400

08004490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004494:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <MX_I2C1_Init+0x50>)
 8004496:	4a13      	ldr	r2, [pc, #76]	; (80044e4 <MX_I2C1_Init+0x54>)
 8004498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800449a:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <MX_I2C1_Init+0x50>)
 800449c:	4a12      	ldr	r2, [pc, #72]	; (80044e8 <MX_I2C1_Init+0x58>)
 800449e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80044a0:	4b0f      	ldr	r3, [pc, #60]	; (80044e0 <MX_I2C1_Init+0x50>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80044a6:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <MX_I2C1_Init+0x50>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80044ac:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <MX_I2C1_Init+0x50>)
 80044ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80044b4:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <MX_I2C1_Init+0x50>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <MX_I2C1_Init+0x50>)
 80044bc:	2200      	movs	r2, #0
 80044be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80044c0:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <MX_I2C1_Init+0x50>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80044c6:	4b06      	ldr	r3, [pc, #24]	; (80044e0 <MX_I2C1_Init+0x50>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80044cc:	4804      	ldr	r0, [pc, #16]	; (80044e0 <MX_I2C1_Init+0x50>)
 80044ce:	f7fc fecd 	bl	800126c <HAL_I2C_Init>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80044d8:	f000 f92c 	bl	8004734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80044dc:	bf00      	nop
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	200000e0 	.word	0x200000e0
 80044e4:	40005400 	.word	0x40005400
 80044e8:	000186a0 	.word	0x000186a0

080044ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b096      	sub	sp, #88	; 0x58
 80044f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80044f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	609a      	str	r2, [r3, #8]
 80044fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004500:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800450a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	605a      	str	r2, [r3, #4]
 8004514:	609a      	str	r2, [r3, #8]
 8004516:	60da      	str	r2, [r3, #12]
 8004518:	611a      	str	r2, [r3, #16]
 800451a:	615a      	str	r2, [r3, #20]
 800451c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800451e:	1d3b      	adds	r3, r7, #4
 8004520:	2220      	movs	r2, #32
 8004522:	2100      	movs	r1, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fb57 	bl	8004bd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800452a:	4b3f      	ldr	r3, [pc, #252]	; (8004628 <MX_TIM1_Init+0x13c>)
 800452c:	4a3f      	ldr	r2, [pc, #252]	; (800462c <MX_TIM1_Init+0x140>)
 800452e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1440-1;
 8004530:	4b3d      	ldr	r3, [pc, #244]	; (8004628 <MX_TIM1_Init+0x13c>)
 8004532:	f240 529f 	movw	r2, #1439	; 0x59f
 8004536:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004538:	4b3b      	ldr	r3, [pc, #236]	; (8004628 <MX_TIM1_Init+0x13c>)
 800453a:	2200      	movs	r2, #0
 800453c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800453e:	4b3a      	ldr	r3, [pc, #232]	; (8004628 <MX_TIM1_Init+0x13c>)
 8004540:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004544:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004546:	4b38      	ldr	r3, [pc, #224]	; (8004628 <MX_TIM1_Init+0x13c>)
 8004548:	2200      	movs	r2, #0
 800454a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800454c:	4b36      	ldr	r3, [pc, #216]	; (8004628 <MX_TIM1_Init+0x13c>)
 800454e:	2200      	movs	r2, #0
 8004550:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004552:	4b35      	ldr	r3, [pc, #212]	; (8004628 <MX_TIM1_Init+0x13c>)
 8004554:	2200      	movs	r2, #0
 8004556:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004558:	4833      	ldr	r0, [pc, #204]	; (8004628 <MX_TIM1_Init+0x13c>)
 800455a:	f7fe f853 	bl	8002604 <HAL_TIM_Base_Init>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004564:	f000 f8e6 	bl	8004734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800456c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800456e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004572:	4619      	mov	r1, r3
 8004574:	482c      	ldr	r0, [pc, #176]	; (8004628 <MX_TIM1_Init+0x13c>)
 8004576:	f7fe fb55 	bl	8002c24 <HAL_TIM_ConfigClockSource>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d001      	beq.n	8004584 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004580:	f000 f8d8 	bl	8004734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004584:	4828      	ldr	r0, [pc, #160]	; (8004628 <MX_TIM1_Init+0x13c>)
 8004586:	f7fe f88c 	bl	80026a2 <HAL_TIM_PWM_Init>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d001      	beq.n	8004594 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004590:	f000 f8d0 	bl	8004734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004594:	2300      	movs	r3, #0
 8004596:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004598:	2300      	movs	r3, #0
 800459a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800459c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045a0:	4619      	mov	r1, r3
 80045a2:	4821      	ldr	r0, [pc, #132]	; (8004628 <MX_TIM1_Init+0x13c>)
 80045a4:	f7fe fec6 	bl	8003334 <HAL_TIMEx_MasterConfigSynchronization>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d001      	beq.n	80045b2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80045ae:	f000 f8c1 	bl	8004734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045b2:	2360      	movs	r3, #96	; 0x60
 80045b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80045ba:	2300      	movs	r3, #0
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80045be:	2300      	movs	r3, #0
 80045c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80045c6:	2300      	movs	r3, #0
 80045c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80045ca:	2300      	movs	r3, #0
 80045cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80045ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045d2:	2200      	movs	r2, #0
 80045d4:	4619      	mov	r1, r3
 80045d6:	4814      	ldr	r0, [pc, #80]	; (8004628 <MX_TIM1_Init+0x13c>)
 80045d8:	f7fe fa66 	bl	8002aa8 <HAL_TIM_PWM_ConfigChannel>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80045e2:	f000 f8a7 	bl	8004734 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80045fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	4619      	mov	r1, r3
 8004608:	4807      	ldr	r0, [pc, #28]	; (8004628 <MX_TIM1_Init+0x13c>)
 800460a:	f7fe fef1 	bl	80033f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8004614:	f000 f88e 	bl	8004734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004618:	4803      	ldr	r0, [pc, #12]	; (8004628 <MX_TIM1_Init+0x13c>)
 800461a:	f000 f979 	bl	8004910 <HAL_TIM_MspPostInit>

}
 800461e:	bf00      	nop
 8004620:	3758      	adds	r7, #88	; 0x58
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000164 	.word	0x20000164
 800462c:	40012c00 	.word	0x40012c00

08004630 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <MX_USART3_UART_Init+0x4c>)
 8004636:	4a12      	ldr	r2, [pc, #72]	; (8004680 <MX_USART3_UART_Init+0x50>)
 8004638:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800463a:	4b10      	ldr	r3, [pc, #64]	; (800467c <MX_USART3_UART_Init+0x4c>)
 800463c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004640:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004642:	4b0e      	ldr	r3, [pc, #56]	; (800467c <MX_USART3_UART_Init+0x4c>)
 8004644:	2200      	movs	r2, #0
 8004646:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004648:	4b0c      	ldr	r3, [pc, #48]	; (800467c <MX_USART3_UART_Init+0x4c>)
 800464a:	2200      	movs	r2, #0
 800464c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800464e:	4b0b      	ldr	r3, [pc, #44]	; (800467c <MX_USART3_UART_Init+0x4c>)
 8004650:	2200      	movs	r2, #0
 8004652:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004654:	4b09      	ldr	r3, [pc, #36]	; (800467c <MX_USART3_UART_Init+0x4c>)
 8004656:	220c      	movs	r2, #12
 8004658:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <MX_USART3_UART_Init+0x4c>)
 800465c:	2200      	movs	r2, #0
 800465e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004660:	4b06      	ldr	r3, [pc, #24]	; (800467c <MX_USART3_UART_Init+0x4c>)
 8004662:	2200      	movs	r2, #0
 8004664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004666:	4805      	ldr	r0, [pc, #20]	; (800467c <MX_USART3_UART_Init+0x4c>)
 8004668:	f7fe ff25 	bl	80034b6 <HAL_UART_Init>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004672:	f000 f85f 	bl	8004734 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	2000009c 	.word	0x2000009c
 8004680:	40004800 	.word	0x40004800

08004684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468a:	f107 0310 	add.w	r3, r7, #16
 800468e:	2200      	movs	r2, #0
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	605a      	str	r2, [r3, #4]
 8004694:	609a      	str	r2, [r3, #8]
 8004696:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004698:	4a24      	ldr	r2, [pc, #144]	; (800472c <MX_GPIO_Init+0xa8>)
 800469a:	4b24      	ldr	r3, [pc, #144]	; (800472c <MX_GPIO_Init+0xa8>)
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f043 0310 	orr.w	r3, r3, #16
 80046a2:	6193      	str	r3, [r2, #24]
 80046a4:	4b21      	ldr	r3, [pc, #132]	; (800472c <MX_GPIO_Init+0xa8>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046b0:	4a1e      	ldr	r2, [pc, #120]	; (800472c <MX_GPIO_Init+0xa8>)
 80046b2:	4b1e      	ldr	r3, [pc, #120]	; (800472c <MX_GPIO_Init+0xa8>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f043 0320 	orr.w	r3, r3, #32
 80046ba:	6193      	str	r3, [r2, #24]
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <MX_GPIO_Init+0xa8>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f003 0320 	and.w	r3, r3, #32
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046c8:	4a18      	ldr	r2, [pc, #96]	; (800472c <MX_GPIO_Init+0xa8>)
 80046ca:	4b18      	ldr	r3, [pc, #96]	; (800472c <MX_GPIO_Init+0xa8>)
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f043 0304 	orr.w	r3, r3, #4
 80046d2:	6193      	str	r3, [r2, #24]
 80046d4:	4b15      	ldr	r3, [pc, #84]	; (800472c <MX_GPIO_Init+0xa8>)
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f003 0304 	and.w	r3, r3, #4
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046e0:	4a12      	ldr	r2, [pc, #72]	; (800472c <MX_GPIO_Init+0xa8>)
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <MX_GPIO_Init+0xa8>)
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f043 0308 	orr.w	r3, r3, #8
 80046ea:	6193      	str	r3, [r2, #24]
 80046ec:	4b0f      	ldr	r3, [pc, #60]	; (800472c <MX_GPIO_Init+0xa8>)
 80046ee:	699b      	ldr	r3, [r3, #24]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80046f8:	2200      	movs	r2, #0
 80046fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046fe:	480c      	ldr	r0, [pc, #48]	; (8004730 <MX_GPIO_Init+0xac>)
 8004700:	f7fc fd9c 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004708:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800470a:	2301      	movs	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004712:	2302      	movs	r3, #2
 8004714:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004716:	f107 0310 	add.w	r3, r7, #16
 800471a:	4619      	mov	r1, r3
 800471c:	4804      	ldr	r0, [pc, #16]	; (8004730 <MX_GPIO_Init+0xac>)
 800471e:	f7fc fc33 	bl	8000f88 <HAL_GPIO_Init>

}
 8004722:	bf00      	nop
 8004724:	3720      	adds	r7, #32
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	40021000 	.word	0x40021000
 8004730:	40011000 	.word	0x40011000

08004734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004738:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800473a:	e7fe      	b.n	800473a <Error_Handler+0x6>

0800473c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004742:	4a15      	ldr	r2, [pc, #84]	; (8004798 <HAL_MspInit+0x5c>)
 8004744:	4b14      	ldr	r3, [pc, #80]	; (8004798 <HAL_MspInit+0x5c>)
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6193      	str	r3, [r2, #24]
 800474e:	4b12      	ldr	r3, [pc, #72]	; (8004798 <HAL_MspInit+0x5c>)
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <HAL_MspInit+0x5c>)
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <HAL_MspInit+0x5c>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004764:	61d3      	str	r3, [r2, #28]
 8004766:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <HAL_MspInit+0x5c>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	607b      	str	r3, [r7, #4]
 8004770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <HAL_MspInit+0x60>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	4a04      	ldr	r2, [pc, #16]	; (800479c <HAL_MspInit+0x60>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	40021000 	.word	0x40021000
 800479c:	40010000 	.word	0x40010000

080047a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a14      	ldr	r2, [pc, #80]	; (800480c <HAL_ADC_MspInit+0x6c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d121      	bne.n	8004804 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80047c0:	4a13      	ldr	r2, [pc, #76]	; (8004810 <HAL_ADC_MspInit+0x70>)
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <HAL_ADC_MspInit+0x70>)
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ca:	6193      	str	r3, [r2, #24]
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <HAL_ADC_MspInit+0x70>)
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d8:	4a0d      	ldr	r2, [pc, #52]	; (8004810 <HAL_ADC_MspInit+0x70>)
 80047da:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <HAL_ADC_MspInit+0x70>)
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f043 0304 	orr.w	r3, r3, #4
 80047e2:	6193      	str	r3, [r2, #24]
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <HAL_ADC_MspInit+0x70>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047f0:	2301      	movs	r3, #1
 80047f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047f4:	2303      	movs	r3, #3
 80047f6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f8:	f107 0310 	add.w	r3, r7, #16
 80047fc:	4619      	mov	r1, r3
 80047fe:	4805      	ldr	r0, [pc, #20]	; (8004814 <HAL_ADC_MspInit+0x74>)
 8004800:	f7fc fbc2 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004804:	bf00      	nop
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40012400 	.word	0x40012400
 8004810:	40021000 	.word	0x40021000
 8004814:	40010800 	.word	0x40010800

08004818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b088      	sub	sp, #32
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004820:	f107 0310 	add.w	r3, r7, #16
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a15      	ldr	r2, [pc, #84]	; (8004888 <HAL_I2C_MspInit+0x70>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d123      	bne.n	8004880 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004838:	4a14      	ldr	r2, [pc, #80]	; (800488c <HAL_I2C_MspInit+0x74>)
 800483a:	4b14      	ldr	r3, [pc, #80]	; (800488c <HAL_I2C_MspInit+0x74>)
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	f043 0308 	orr.w	r3, r3, #8
 8004842:	6193      	str	r3, [r2, #24]
 8004844:	4b11      	ldr	r3, [pc, #68]	; (800488c <HAL_I2C_MspInit+0x74>)
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004850:	23c0      	movs	r3, #192	; 0xc0
 8004852:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004854:	2312      	movs	r3, #18
 8004856:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004858:	2303      	movs	r3, #3
 800485a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800485c:	f107 0310 	add.w	r3, r7, #16
 8004860:	4619      	mov	r1, r3
 8004862:	480b      	ldr	r0, [pc, #44]	; (8004890 <HAL_I2C_MspInit+0x78>)
 8004864:	f7fc fb90 	bl	8000f88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004868:	4a08      	ldr	r2, [pc, #32]	; (800488c <HAL_I2C_MspInit+0x74>)
 800486a:	4b08      	ldr	r3, [pc, #32]	; (800488c <HAL_I2C_MspInit+0x74>)
 800486c:	69db      	ldr	r3, [r3, #28]
 800486e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004872:	61d3      	str	r3, [r2, #28]
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <HAL_I2C_MspInit+0x74>)
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004880:	bf00      	nop
 8004882:	3720      	adds	r7, #32
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40005400 	.word	0x40005400
 800488c:	40021000 	.word	0x40021000
 8004890:	40010c00 	.word	0x40010c00

08004894 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a19      	ldr	r2, [pc, #100]	; (8004908 <HAL_TIM_Base_MspInit+0x74>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d12b      	bne.n	80048fe <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048a6:	4a19      	ldr	r2, [pc, #100]	; (800490c <HAL_TIM_Base_MspInit+0x78>)
 80048a8:	4b18      	ldr	r3, [pc, #96]	; (800490c <HAL_TIM_Base_MspInit+0x78>)
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80048b0:	6193      	str	r3, [r2, #24]
 80048b2:	4b16      	ldr	r3, [pc, #88]	; (800490c <HAL_TIM_Base_MspInit+0x78>)
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80048be:	2200      	movs	r2, #0
 80048c0:	2100      	movs	r1, #0
 80048c2:	2018      	movs	r0, #24
 80048c4:	f7fc fa73 	bl	8000dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80048c8:	2018      	movs	r0, #24
 80048ca:	f7fc fa8c 	bl	8000de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80048ce:	2200      	movs	r2, #0
 80048d0:	2100      	movs	r1, #0
 80048d2:	2019      	movs	r0, #25
 80048d4:	f7fc fa6b 	bl	8000dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80048d8:	2019      	movs	r0, #25
 80048da:	f7fc fa84 	bl	8000de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80048de:	2200      	movs	r2, #0
 80048e0:	2100      	movs	r1, #0
 80048e2:	201a      	movs	r0, #26
 80048e4:	f7fc fa63 	bl	8000dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80048e8:	201a      	movs	r0, #26
 80048ea:	f7fc fa7c 	bl	8000de6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80048ee:	2200      	movs	r2, #0
 80048f0:	2100      	movs	r1, #0
 80048f2:	201b      	movs	r0, #27
 80048f4:	f7fc fa5b 	bl	8000dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80048f8:	201b      	movs	r0, #27
 80048fa:	f7fc fa74 	bl	8000de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80048fe:	bf00      	nop
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40021000 	.word	0x40021000

08004910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 0310 	add.w	r3, r7, #16
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a10      	ldr	r2, [pc, #64]	; (800496c <HAL_TIM_MspPostInit+0x5c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d118      	bne.n	8004962 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004930:	4a0f      	ldr	r2, [pc, #60]	; (8004970 <HAL_TIM_MspPostInit+0x60>)
 8004932:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <HAL_TIM_MspPostInit+0x60>)
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	6193      	str	r3, [r2, #24]
 800493c:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <HAL_TIM_MspPostInit+0x60>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800494c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494e:	2302      	movs	r3, #2
 8004950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004952:	2302      	movs	r3, #2
 8004954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004956:	f107 0310 	add.w	r3, r7, #16
 800495a:	4619      	mov	r1, r3
 800495c:	4805      	ldr	r0, [pc, #20]	; (8004974 <HAL_TIM_MspPostInit+0x64>)
 800495e:	f7fc fb13 	bl	8000f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004962:	bf00      	nop
 8004964:	3720      	adds	r7, #32
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40021000 	.word	0x40021000
 8004974:	40010800 	.word	0x40010800

08004978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004980:	f107 0310 	add.w	r3, r7, #16
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	605a      	str	r2, [r3, #4]
 800498a:	609a      	str	r2, [r3, #8]
 800498c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a20      	ldr	r2, [pc, #128]	; (8004a14 <HAL_UART_MspInit+0x9c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d139      	bne.n	8004a0c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004998:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <HAL_UART_MspInit+0xa0>)
 800499a:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <HAL_UART_MspInit+0xa0>)
 800499c:	69db      	ldr	r3, [r3, #28]
 800499e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049a2:	61d3      	str	r3, [r2, #28]
 80049a4:	4b1c      	ldr	r3, [pc, #112]	; (8004a18 <HAL_UART_MspInit+0xa0>)
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b0:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <HAL_UART_MspInit+0xa0>)
 80049b2:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_UART_MspInit+0xa0>)
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f043 0308 	orr.w	r3, r3, #8
 80049ba:	6193      	str	r3, [r2, #24]
 80049bc:	4b16      	ldr	r3, [pc, #88]	; (8004a18 <HAL_UART_MspInit+0xa0>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f003 0308 	and.w	r3, r3, #8
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80049c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ce:	2302      	movs	r3, #2
 80049d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049d2:	2303      	movs	r3, #3
 80049d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d6:	f107 0310 	add.w	r3, r7, #16
 80049da:	4619      	mov	r1, r3
 80049dc:	480f      	ldr	r0, [pc, #60]	; (8004a1c <HAL_UART_MspInit+0xa4>)
 80049de:	f7fc fad3 	bl	8000f88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80049e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049f0:	f107 0310 	add.w	r3, r7, #16
 80049f4:	4619      	mov	r1, r3
 80049f6:	4809      	ldr	r0, [pc, #36]	; (8004a1c <HAL_UART_MspInit+0xa4>)
 80049f8:	f7fc fac6 	bl	8000f88 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80049fc:	2200      	movs	r2, #0
 80049fe:	2100      	movs	r1, #0
 8004a00:	2027      	movs	r0, #39	; 0x27
 8004a02:	f7fc f9d4 	bl	8000dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004a06:	2027      	movs	r0, #39	; 0x27
 8004a08:	f7fc f9ed 	bl	8000de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a0c:	bf00      	nop
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	40004800 	.word	0x40004800
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40010c00 	.word	0x40010c00

08004a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004a24:	e7fe      	b.n	8004a24 <NMI_Handler+0x4>

08004a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a26:	b480      	push	{r7}
 8004a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a2a:	e7fe      	b.n	8004a2a <HardFault_Handler+0x4>

08004a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a30:	e7fe      	b.n	8004a30 <MemManage_Handler+0x4>

08004a32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a36:	e7fe      	b.n	8004a36 <BusFault_Handler+0x4>

08004a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a3c:	e7fe      	b.n	8004a3c <UsageFault_Handler+0x4>

08004a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a4e:	bf00      	nop
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr

08004a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a66:	f7fb fbb7 	bl	80001d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a74:	4802      	ldr	r0, [pc, #8]	; (8004a80 <TIM1_BRK_IRQHandler+0x10>)
 8004a76:	f7fd ff0f 	bl	8002898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000164 	.word	0x20000164

08004a84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a88:	4802      	ldr	r0, [pc, #8]	; (8004a94 <TIM1_UP_IRQHandler+0x10>)
 8004a8a:	f7fd ff05 	bl	8002898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	20000164 	.word	0x20000164

08004a98 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a9c:	4802      	ldr	r0, [pc, #8]	; (8004aa8 <TIM1_TRG_COM_IRQHandler+0x10>)
 8004a9e:	f7fd fefb 	bl	8002898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000164 	.word	0x20000164

08004aac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ab0:	4802      	ldr	r0, [pc, #8]	; (8004abc <TIM1_CC_IRQHandler+0x10>)
 8004ab2:	f7fd fef1 	bl	8002898 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004ab6:	bf00      	nop
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	20000164 	.word	0x20000164

08004ac0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004ac4:	4802      	ldr	r0, [pc, #8]	; (8004ad0 <USART3_IRQHandler+0x10>)
 8004ac6:	f7fe fe05 	bl	80036d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004aca:	bf00      	nop
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	2000009c 	.word	0x2000009c

08004ad4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004adc:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <_sbrk+0x50>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d102      	bne.n	8004aea <_sbrk+0x16>
		heap_end = &end;
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <_sbrk+0x50>)
 8004ae6:	4a10      	ldr	r2, [pc, #64]	; (8004b28 <_sbrk+0x54>)
 8004ae8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004aea:	4b0e      	ldr	r3, [pc, #56]	; (8004b24 <_sbrk+0x50>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <_sbrk+0x50>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4413      	add	r3, r2
 8004af8:	466a      	mov	r2, sp
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d907      	bls.n	8004b0e <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004afe:	f000 f841 	bl	8004b84 <__errno>
 8004b02:	4602      	mov	r2, r0
 8004b04:	230c      	movs	r3, #12
 8004b06:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0c:	e006      	b.n	8004b1c <_sbrk+0x48>
	}

	heap_end += incr;
 8004b0e:	4b05      	ldr	r3, [pc, #20]	; (8004b24 <_sbrk+0x50>)
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4413      	add	r3, r2
 8004b16:	4a03      	ldr	r2, [pc, #12]	; (8004b24 <_sbrk+0x50>)
 8004b18:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	2000008c 	.word	0x2000008c
 8004b28:	200001b4 	.word	0x200001b4

08004b2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bc80      	pop	{r7}
 8004b36:	4770      	bx	lr

08004b38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b38:	480c      	ldr	r0, [pc, #48]	; (8004b6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b3a:	490d      	ldr	r1, [pc, #52]	; (8004b70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b3c:	4a0d      	ldr	r2, [pc, #52]	; (8004b74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b40:	e002      	b.n	8004b48 <LoopCopyDataInit>

08004b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b46:	3304      	adds	r3, #4

08004b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b4c:	d3f9      	bcc.n	8004b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	; (8004b78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b50:	4c0a      	ldr	r4, [pc, #40]	; (8004b7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b54:	e001      	b.n	8004b5a <LoopFillZerobss>

08004b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b58:	3204      	adds	r2, #4

08004b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b5c:	d3fb      	bcc.n	8004b56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b5e:	f7ff ffe5 	bl	8004b2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b62:	f000 f815 	bl	8004b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b66:	f7ff fb5f 	bl	8004228 <main>
  bx lr
 8004b6a:	4770      	bx	lr
  ldr r0, =_sdata
 8004b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8004b74:	080054ec 	.word	0x080054ec
  ldr r2, =_sbss
 8004b78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8004b7c:	200001b4 	.word	0x200001b4

08004b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b80:	e7fe      	b.n	8004b80 <ADC1_2_IRQHandler>
	...

08004b84 <__errno>:
 8004b84:	4b01      	ldr	r3, [pc, #4]	; (8004b8c <__errno+0x8>)
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	2000000c 	.word	0x2000000c

08004b90 <__libc_init_array>:
 8004b90:	b570      	push	{r4, r5, r6, lr}
 8004b92:	2500      	movs	r5, #0
 8004b94:	4e0c      	ldr	r6, [pc, #48]	; (8004bc8 <__libc_init_array+0x38>)
 8004b96:	4c0d      	ldr	r4, [pc, #52]	; (8004bcc <__libc_init_array+0x3c>)
 8004b98:	1ba4      	subs	r4, r4, r6
 8004b9a:	10a4      	asrs	r4, r4, #2
 8004b9c:	42a5      	cmp	r5, r4
 8004b9e:	d109      	bne.n	8004bb4 <__libc_init_array+0x24>
 8004ba0:	f000 fc4e 	bl	8005440 <_init>
 8004ba4:	2500      	movs	r5, #0
 8004ba6:	4e0a      	ldr	r6, [pc, #40]	; (8004bd0 <__libc_init_array+0x40>)
 8004ba8:	4c0a      	ldr	r4, [pc, #40]	; (8004bd4 <__libc_init_array+0x44>)
 8004baa:	1ba4      	subs	r4, r4, r6
 8004bac:	10a4      	asrs	r4, r4, #2
 8004bae:	42a5      	cmp	r5, r4
 8004bb0:	d105      	bne.n	8004bbe <__libc_init_array+0x2e>
 8004bb2:	bd70      	pop	{r4, r5, r6, pc}
 8004bb4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bb8:	4798      	blx	r3
 8004bba:	3501      	adds	r5, #1
 8004bbc:	e7ee      	b.n	8004b9c <__libc_init_array+0xc>
 8004bbe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bc2:	4798      	blx	r3
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	e7f2      	b.n	8004bae <__libc_init_array+0x1e>
 8004bc8:	080054e4 	.word	0x080054e4
 8004bcc:	080054e4 	.word	0x080054e4
 8004bd0:	080054e4 	.word	0x080054e4
 8004bd4:	080054e8 	.word	0x080054e8

08004bd8 <memset>:
 8004bd8:	4603      	mov	r3, r0
 8004bda:	4402      	add	r2, r0
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d100      	bne.n	8004be2 <memset+0xa>
 8004be0:	4770      	bx	lr
 8004be2:	f803 1b01 	strb.w	r1, [r3], #1
 8004be6:	e7f9      	b.n	8004bdc <memset+0x4>

08004be8 <siprintf>:
 8004be8:	b40e      	push	{r1, r2, r3}
 8004bea:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004bee:	b500      	push	{lr}
 8004bf0:	b09c      	sub	sp, #112	; 0x70
 8004bf2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004bf6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bfa:	9104      	str	r1, [sp, #16]
 8004bfc:	9107      	str	r1, [sp, #28]
 8004bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004c02:	ab1d      	add	r3, sp, #116	; 0x74
 8004c04:	9002      	str	r0, [sp, #8]
 8004c06:	9006      	str	r0, [sp, #24]
 8004c08:	4808      	ldr	r0, [pc, #32]	; (8004c2c <siprintf+0x44>)
 8004c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c0e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004c12:	6800      	ldr	r0, [r0, #0]
 8004c14:	a902      	add	r1, sp, #8
 8004c16:	9301      	str	r3, [sp, #4]
 8004c18:	f000 f866 	bl	8004ce8 <_svfiprintf_r>
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	9b02      	ldr	r3, [sp, #8]
 8004c20:	701a      	strb	r2, [r3, #0]
 8004c22:	b01c      	add	sp, #112	; 0x70
 8004c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c28:	b003      	add	sp, #12
 8004c2a:	4770      	bx	lr
 8004c2c:	2000000c 	.word	0x2000000c

08004c30 <__ssputs_r>:
 8004c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c34:	688e      	ldr	r6, [r1, #8]
 8004c36:	4682      	mov	sl, r0
 8004c38:	429e      	cmp	r6, r3
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	4691      	mov	r9, r2
 8004c3e:	4698      	mov	r8, r3
 8004c40:	d835      	bhi.n	8004cae <__ssputs_r+0x7e>
 8004c42:	898a      	ldrh	r2, [r1, #12]
 8004c44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004c48:	d031      	beq.n	8004cae <__ssputs_r+0x7e>
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	6825      	ldr	r5, [r4, #0]
 8004c4e:	6909      	ldr	r1, [r1, #16]
 8004c50:	1a6f      	subs	r7, r5, r1
 8004c52:	6965      	ldr	r5, [r4, #20]
 8004c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c58:	fb95 f5f3 	sdiv	r5, r5, r3
 8004c5c:	f108 0301 	add.w	r3, r8, #1
 8004c60:	443b      	add	r3, r7
 8004c62:	429d      	cmp	r5, r3
 8004c64:	bf38      	it	cc
 8004c66:	461d      	movcc	r5, r3
 8004c68:	0553      	lsls	r3, r2, #21
 8004c6a:	d531      	bpl.n	8004cd0 <__ssputs_r+0xa0>
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	f000 fb47 	bl	8005300 <_malloc_r>
 8004c72:	4606      	mov	r6, r0
 8004c74:	b950      	cbnz	r0, 8004c8c <__ssputs_r+0x5c>
 8004c76:	230c      	movs	r3, #12
 8004c78:	f8ca 3000 	str.w	r3, [sl]
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c86:	81a3      	strh	r3, [r4, #12]
 8004c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c8c:	463a      	mov	r2, r7
 8004c8e:	6921      	ldr	r1, [r4, #16]
 8004c90:	f000 fac4 	bl	800521c <memcpy>
 8004c94:	89a3      	ldrh	r3, [r4, #12]
 8004c96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9e:	81a3      	strh	r3, [r4, #12]
 8004ca0:	6126      	str	r6, [r4, #16]
 8004ca2:	443e      	add	r6, r7
 8004ca4:	6026      	str	r6, [r4, #0]
 8004ca6:	4646      	mov	r6, r8
 8004ca8:	6165      	str	r5, [r4, #20]
 8004caa:	1bed      	subs	r5, r5, r7
 8004cac:	60a5      	str	r5, [r4, #8]
 8004cae:	4546      	cmp	r6, r8
 8004cb0:	bf28      	it	cs
 8004cb2:	4646      	movcs	r6, r8
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	4632      	mov	r2, r6
 8004cb8:	6820      	ldr	r0, [r4, #0]
 8004cba:	f000 faba 	bl	8005232 <memmove>
 8004cbe:	68a3      	ldr	r3, [r4, #8]
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	1b9b      	subs	r3, r3, r6
 8004cc4:	60a3      	str	r3, [r4, #8]
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	441e      	add	r6, r3
 8004cca:	6026      	str	r6, [r4, #0]
 8004ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cd0:	462a      	mov	r2, r5
 8004cd2:	f000 fb73 	bl	80053bc <_realloc_r>
 8004cd6:	4606      	mov	r6, r0
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	d1e1      	bne.n	8004ca0 <__ssputs_r+0x70>
 8004cdc:	6921      	ldr	r1, [r4, #16]
 8004cde:	4650      	mov	r0, sl
 8004ce0:	f000 fac2 	bl	8005268 <_free_r>
 8004ce4:	e7c7      	b.n	8004c76 <__ssputs_r+0x46>
	...

08004ce8 <_svfiprintf_r>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	b09d      	sub	sp, #116	; 0x74
 8004cee:	9303      	str	r3, [sp, #12]
 8004cf0:	898b      	ldrh	r3, [r1, #12]
 8004cf2:	4680      	mov	r8, r0
 8004cf4:	061c      	lsls	r4, r3, #24
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	d50f      	bpl.n	8004d1c <_svfiprintf_r+0x34>
 8004cfc:	690b      	ldr	r3, [r1, #16]
 8004cfe:	b96b      	cbnz	r3, 8004d1c <_svfiprintf_r+0x34>
 8004d00:	2140      	movs	r1, #64	; 0x40
 8004d02:	f000 fafd 	bl	8005300 <_malloc_r>
 8004d06:	6028      	str	r0, [r5, #0]
 8004d08:	6128      	str	r0, [r5, #16]
 8004d0a:	b928      	cbnz	r0, 8004d18 <_svfiprintf_r+0x30>
 8004d0c:	230c      	movs	r3, #12
 8004d0e:	f8c8 3000 	str.w	r3, [r8]
 8004d12:	f04f 30ff 	mov.w	r0, #4294967295
 8004d16:	e0c4      	b.n	8004ea2 <_svfiprintf_r+0x1ba>
 8004d18:	2340      	movs	r3, #64	; 0x40
 8004d1a:	616b      	str	r3, [r5, #20]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004d20:	2320      	movs	r3, #32
 8004d22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d26:	2330      	movs	r3, #48	; 0x30
 8004d28:	f04f 0b01 	mov.w	fp, #1
 8004d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d30:	4637      	mov	r7, r6
 8004d32:	463c      	mov	r4, r7
 8004d34:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d13c      	bne.n	8004db6 <_svfiprintf_r+0xce>
 8004d3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004d40:	d00b      	beq.n	8004d5a <_svfiprintf_r+0x72>
 8004d42:	4653      	mov	r3, sl
 8004d44:	4632      	mov	r2, r6
 8004d46:	4629      	mov	r1, r5
 8004d48:	4640      	mov	r0, r8
 8004d4a:	f7ff ff71 	bl	8004c30 <__ssputs_r>
 8004d4e:	3001      	adds	r0, #1
 8004d50:	f000 80a2 	beq.w	8004e98 <_svfiprintf_r+0x1b0>
 8004d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d56:	4453      	add	r3, sl
 8004d58:	9309      	str	r3, [sp, #36]	; 0x24
 8004d5a:	783b      	ldrb	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 809b 	beq.w	8004e98 <_svfiprintf_r+0x1b0>
 8004d62:	2300      	movs	r3, #0
 8004d64:	f04f 32ff 	mov.w	r2, #4294967295
 8004d68:	9304      	str	r3, [sp, #16]
 8004d6a:	9307      	str	r3, [sp, #28]
 8004d6c:	9205      	str	r2, [sp, #20]
 8004d6e:	9306      	str	r3, [sp, #24]
 8004d70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d74:	931a      	str	r3, [sp, #104]	; 0x68
 8004d76:	2205      	movs	r2, #5
 8004d78:	7821      	ldrb	r1, [r4, #0]
 8004d7a:	4850      	ldr	r0, [pc, #320]	; (8004ebc <_svfiprintf_r+0x1d4>)
 8004d7c:	f000 fa40 	bl	8005200 <memchr>
 8004d80:	1c67      	adds	r7, r4, #1
 8004d82:	9b04      	ldr	r3, [sp, #16]
 8004d84:	b9d8      	cbnz	r0, 8004dbe <_svfiprintf_r+0xd6>
 8004d86:	06d9      	lsls	r1, r3, #27
 8004d88:	bf44      	itt	mi
 8004d8a:	2220      	movmi	r2, #32
 8004d8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d90:	071a      	lsls	r2, r3, #28
 8004d92:	bf44      	itt	mi
 8004d94:	222b      	movmi	r2, #43	; 0x2b
 8004d96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004d9a:	7822      	ldrb	r2, [r4, #0]
 8004d9c:	2a2a      	cmp	r2, #42	; 0x2a
 8004d9e:	d016      	beq.n	8004dce <_svfiprintf_r+0xe6>
 8004da0:	2100      	movs	r1, #0
 8004da2:	200a      	movs	r0, #10
 8004da4:	9a07      	ldr	r2, [sp, #28]
 8004da6:	4627      	mov	r7, r4
 8004da8:	783b      	ldrb	r3, [r7, #0]
 8004daa:	3401      	adds	r4, #1
 8004dac:	3b30      	subs	r3, #48	; 0x30
 8004dae:	2b09      	cmp	r3, #9
 8004db0:	d950      	bls.n	8004e54 <_svfiprintf_r+0x16c>
 8004db2:	b1c9      	cbz	r1, 8004de8 <_svfiprintf_r+0x100>
 8004db4:	e011      	b.n	8004dda <_svfiprintf_r+0xf2>
 8004db6:	2b25      	cmp	r3, #37	; 0x25
 8004db8:	d0c0      	beq.n	8004d3c <_svfiprintf_r+0x54>
 8004dba:	4627      	mov	r7, r4
 8004dbc:	e7b9      	b.n	8004d32 <_svfiprintf_r+0x4a>
 8004dbe:	4a3f      	ldr	r2, [pc, #252]	; (8004ebc <_svfiprintf_r+0x1d4>)
 8004dc0:	463c      	mov	r4, r7
 8004dc2:	1a80      	subs	r0, r0, r2
 8004dc4:	fa0b f000 	lsl.w	r0, fp, r0
 8004dc8:	4318      	orrs	r0, r3
 8004dca:	9004      	str	r0, [sp, #16]
 8004dcc:	e7d3      	b.n	8004d76 <_svfiprintf_r+0x8e>
 8004dce:	9a03      	ldr	r2, [sp, #12]
 8004dd0:	1d11      	adds	r1, r2, #4
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	9103      	str	r1, [sp, #12]
 8004dd6:	2a00      	cmp	r2, #0
 8004dd8:	db01      	blt.n	8004dde <_svfiprintf_r+0xf6>
 8004dda:	9207      	str	r2, [sp, #28]
 8004ddc:	e004      	b.n	8004de8 <_svfiprintf_r+0x100>
 8004dde:	4252      	negs	r2, r2
 8004de0:	f043 0302 	orr.w	r3, r3, #2
 8004de4:	9207      	str	r2, [sp, #28]
 8004de6:	9304      	str	r3, [sp, #16]
 8004de8:	783b      	ldrb	r3, [r7, #0]
 8004dea:	2b2e      	cmp	r3, #46	; 0x2e
 8004dec:	d10d      	bne.n	8004e0a <_svfiprintf_r+0x122>
 8004dee:	787b      	ldrb	r3, [r7, #1]
 8004df0:	1c79      	adds	r1, r7, #1
 8004df2:	2b2a      	cmp	r3, #42	; 0x2a
 8004df4:	d132      	bne.n	8004e5c <_svfiprintf_r+0x174>
 8004df6:	9b03      	ldr	r3, [sp, #12]
 8004df8:	3702      	adds	r7, #2
 8004dfa:	1d1a      	adds	r2, r3, #4
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	9203      	str	r2, [sp, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bfb8      	it	lt
 8004e04:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e08:	9305      	str	r3, [sp, #20]
 8004e0a:	4c2d      	ldr	r4, [pc, #180]	; (8004ec0 <_svfiprintf_r+0x1d8>)
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	7839      	ldrb	r1, [r7, #0]
 8004e10:	4620      	mov	r0, r4
 8004e12:	f000 f9f5 	bl	8005200 <memchr>
 8004e16:	b138      	cbz	r0, 8004e28 <_svfiprintf_r+0x140>
 8004e18:	2340      	movs	r3, #64	; 0x40
 8004e1a:	1b00      	subs	r0, r0, r4
 8004e1c:	fa03 f000 	lsl.w	r0, r3, r0
 8004e20:	9b04      	ldr	r3, [sp, #16]
 8004e22:	3701      	adds	r7, #1
 8004e24:	4303      	orrs	r3, r0
 8004e26:	9304      	str	r3, [sp, #16]
 8004e28:	7839      	ldrb	r1, [r7, #0]
 8004e2a:	2206      	movs	r2, #6
 8004e2c:	4825      	ldr	r0, [pc, #148]	; (8004ec4 <_svfiprintf_r+0x1dc>)
 8004e2e:	1c7e      	adds	r6, r7, #1
 8004e30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e34:	f000 f9e4 	bl	8005200 <memchr>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d035      	beq.n	8004ea8 <_svfiprintf_r+0x1c0>
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <_svfiprintf_r+0x1e0>)
 8004e3e:	b9fb      	cbnz	r3, 8004e80 <_svfiprintf_r+0x198>
 8004e40:	9b03      	ldr	r3, [sp, #12]
 8004e42:	3307      	adds	r3, #7
 8004e44:	f023 0307 	bic.w	r3, r3, #7
 8004e48:	3308      	adds	r3, #8
 8004e4a:	9303      	str	r3, [sp, #12]
 8004e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e4e:	444b      	add	r3, r9
 8004e50:	9309      	str	r3, [sp, #36]	; 0x24
 8004e52:	e76d      	b.n	8004d30 <_svfiprintf_r+0x48>
 8004e54:	fb00 3202 	mla	r2, r0, r2, r3
 8004e58:	2101      	movs	r1, #1
 8004e5a:	e7a4      	b.n	8004da6 <_svfiprintf_r+0xbe>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	240a      	movs	r4, #10
 8004e60:	4618      	mov	r0, r3
 8004e62:	9305      	str	r3, [sp, #20]
 8004e64:	460f      	mov	r7, r1
 8004e66:	783a      	ldrb	r2, [r7, #0]
 8004e68:	3101      	adds	r1, #1
 8004e6a:	3a30      	subs	r2, #48	; 0x30
 8004e6c:	2a09      	cmp	r2, #9
 8004e6e:	d903      	bls.n	8004e78 <_svfiprintf_r+0x190>
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ca      	beq.n	8004e0a <_svfiprintf_r+0x122>
 8004e74:	9005      	str	r0, [sp, #20]
 8004e76:	e7c8      	b.n	8004e0a <_svfiprintf_r+0x122>
 8004e78:	fb04 2000 	mla	r0, r4, r0, r2
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e7f1      	b.n	8004e64 <_svfiprintf_r+0x17c>
 8004e80:	ab03      	add	r3, sp, #12
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	462a      	mov	r2, r5
 8004e86:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <_svfiprintf_r+0x1e4>)
 8004e88:	a904      	add	r1, sp, #16
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	f3af 8000 	nop.w
 8004e90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004e94:	4681      	mov	r9, r0
 8004e96:	d1d9      	bne.n	8004e4c <_svfiprintf_r+0x164>
 8004e98:	89ab      	ldrh	r3, [r5, #12]
 8004e9a:	065b      	lsls	r3, r3, #25
 8004e9c:	f53f af39 	bmi.w	8004d12 <_svfiprintf_r+0x2a>
 8004ea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ea2:	b01d      	add	sp, #116	; 0x74
 8004ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea8:	ab03      	add	r3, sp, #12
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	462a      	mov	r2, r5
 8004eae:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <_svfiprintf_r+0x1e4>)
 8004eb0:	a904      	add	r1, sp, #16
 8004eb2:	4640      	mov	r0, r8
 8004eb4:	f000 f884 	bl	8004fc0 <_printf_i>
 8004eb8:	e7ea      	b.n	8004e90 <_svfiprintf_r+0x1a8>
 8004eba:	bf00      	nop
 8004ebc:	080054b0 	.word	0x080054b0
 8004ec0:	080054b6 	.word	0x080054b6
 8004ec4:	080054ba 	.word	0x080054ba
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	08004c31 	.word	0x08004c31

08004ed0 <_printf_common>:
 8004ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed4:	4691      	mov	r9, r2
 8004ed6:	461f      	mov	r7, r3
 8004ed8:	688a      	ldr	r2, [r1, #8]
 8004eda:	690b      	ldr	r3, [r1, #16]
 8004edc:	4606      	mov	r6, r0
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	bfb8      	it	lt
 8004ee2:	4613      	movlt	r3, r2
 8004ee4:	f8c9 3000 	str.w	r3, [r9]
 8004ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eec:	460c      	mov	r4, r1
 8004eee:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ef2:	b112      	cbz	r2, 8004efa <_printf_common+0x2a>
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	f8c9 3000 	str.w	r3, [r9]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	0699      	lsls	r1, r3, #26
 8004efe:	bf42      	ittt	mi
 8004f00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004f04:	3302      	addmi	r3, #2
 8004f06:	f8c9 3000 	strmi.w	r3, [r9]
 8004f0a:	6825      	ldr	r5, [r4, #0]
 8004f0c:	f015 0506 	ands.w	r5, r5, #6
 8004f10:	d107      	bne.n	8004f22 <_printf_common+0x52>
 8004f12:	f104 0a19 	add.w	sl, r4, #25
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	f8d9 2000 	ldr.w	r2, [r9]
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	429d      	cmp	r5, r3
 8004f20:	db2a      	blt.n	8004f78 <_printf_common+0xa8>
 8004f22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004f26:	6822      	ldr	r2, [r4, #0]
 8004f28:	3300      	adds	r3, #0
 8004f2a:	bf18      	it	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	0692      	lsls	r2, r2, #26
 8004f30:	d42f      	bmi.n	8004f92 <_printf_common+0xc2>
 8004f32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f36:	4639      	mov	r1, r7
 8004f38:	4630      	mov	r0, r6
 8004f3a:	47c0      	blx	r8
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d022      	beq.n	8004f86 <_printf_common+0xb6>
 8004f40:	6823      	ldr	r3, [r4, #0]
 8004f42:	68e5      	ldr	r5, [r4, #12]
 8004f44:	f003 0306 	and.w	r3, r3, #6
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	bf18      	it	ne
 8004f4c:	2500      	movne	r5, #0
 8004f4e:	f8d9 2000 	ldr.w	r2, [r9]
 8004f52:	f04f 0900 	mov.w	r9, #0
 8004f56:	bf08      	it	eq
 8004f58:	1aad      	subeq	r5, r5, r2
 8004f5a:	68a3      	ldr	r3, [r4, #8]
 8004f5c:	6922      	ldr	r2, [r4, #16]
 8004f5e:	bf08      	it	eq
 8004f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f64:	4293      	cmp	r3, r2
 8004f66:	bfc4      	itt	gt
 8004f68:	1a9b      	subgt	r3, r3, r2
 8004f6a:	18ed      	addgt	r5, r5, r3
 8004f6c:	341a      	adds	r4, #26
 8004f6e:	454d      	cmp	r5, r9
 8004f70:	d11b      	bne.n	8004faa <_printf_common+0xda>
 8004f72:	2000      	movs	r0, #0
 8004f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f78:	2301      	movs	r3, #1
 8004f7a:	4652      	mov	r2, sl
 8004f7c:	4639      	mov	r1, r7
 8004f7e:	4630      	mov	r0, r6
 8004f80:	47c0      	blx	r8
 8004f82:	3001      	adds	r0, #1
 8004f84:	d103      	bne.n	8004f8e <_printf_common+0xbe>
 8004f86:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8e:	3501      	adds	r5, #1
 8004f90:	e7c1      	b.n	8004f16 <_printf_common+0x46>
 8004f92:	2030      	movs	r0, #48	; 0x30
 8004f94:	18e1      	adds	r1, r4, r3
 8004f96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f9a:	1c5a      	adds	r2, r3, #1
 8004f9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fa0:	4422      	add	r2, r4
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004fa8:	e7c3      	b.n	8004f32 <_printf_common+0x62>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4622      	mov	r2, r4
 8004fae:	4639      	mov	r1, r7
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	47c0      	blx	r8
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d0e6      	beq.n	8004f86 <_printf_common+0xb6>
 8004fb8:	f109 0901 	add.w	r9, r9, #1
 8004fbc:	e7d7      	b.n	8004f6e <_printf_common+0x9e>
	...

08004fc0 <_printf_i>:
 8004fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	4617      	mov	r7, r2
 8004fc6:	7e0a      	ldrb	r2, [r1, #24]
 8004fc8:	b085      	sub	sp, #20
 8004fca:	2a6e      	cmp	r2, #110	; 0x6e
 8004fcc:	4698      	mov	r8, r3
 8004fce:	4606      	mov	r6, r0
 8004fd0:	460c      	mov	r4, r1
 8004fd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fd4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8004fd8:	f000 80bc 	beq.w	8005154 <_printf_i+0x194>
 8004fdc:	d81a      	bhi.n	8005014 <_printf_i+0x54>
 8004fde:	2a63      	cmp	r2, #99	; 0x63
 8004fe0:	d02e      	beq.n	8005040 <_printf_i+0x80>
 8004fe2:	d80a      	bhi.n	8004ffa <_printf_i+0x3a>
 8004fe4:	2a00      	cmp	r2, #0
 8004fe6:	f000 80c8 	beq.w	800517a <_printf_i+0x1ba>
 8004fea:	2a58      	cmp	r2, #88	; 0x58
 8004fec:	f000 808a 	beq.w	8005104 <_printf_i+0x144>
 8004ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ff4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004ff8:	e02a      	b.n	8005050 <_printf_i+0x90>
 8004ffa:	2a64      	cmp	r2, #100	; 0x64
 8004ffc:	d001      	beq.n	8005002 <_printf_i+0x42>
 8004ffe:	2a69      	cmp	r2, #105	; 0x69
 8005000:	d1f6      	bne.n	8004ff0 <_printf_i+0x30>
 8005002:	6821      	ldr	r1, [r4, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	f011 0f80 	tst.w	r1, #128	; 0x80
 800500a:	d023      	beq.n	8005054 <_printf_i+0x94>
 800500c:	1d11      	adds	r1, r2, #4
 800500e:	6019      	str	r1, [r3, #0]
 8005010:	6813      	ldr	r3, [r2, #0]
 8005012:	e027      	b.n	8005064 <_printf_i+0xa4>
 8005014:	2a73      	cmp	r2, #115	; 0x73
 8005016:	f000 80b4 	beq.w	8005182 <_printf_i+0x1c2>
 800501a:	d808      	bhi.n	800502e <_printf_i+0x6e>
 800501c:	2a6f      	cmp	r2, #111	; 0x6f
 800501e:	d02a      	beq.n	8005076 <_printf_i+0xb6>
 8005020:	2a70      	cmp	r2, #112	; 0x70
 8005022:	d1e5      	bne.n	8004ff0 <_printf_i+0x30>
 8005024:	680a      	ldr	r2, [r1, #0]
 8005026:	f042 0220 	orr.w	r2, r2, #32
 800502a:	600a      	str	r2, [r1, #0]
 800502c:	e003      	b.n	8005036 <_printf_i+0x76>
 800502e:	2a75      	cmp	r2, #117	; 0x75
 8005030:	d021      	beq.n	8005076 <_printf_i+0xb6>
 8005032:	2a78      	cmp	r2, #120	; 0x78
 8005034:	d1dc      	bne.n	8004ff0 <_printf_i+0x30>
 8005036:	2278      	movs	r2, #120	; 0x78
 8005038:	496f      	ldr	r1, [pc, #444]	; (80051f8 <_printf_i+0x238>)
 800503a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800503e:	e064      	b.n	800510a <_printf_i+0x14a>
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005046:	1d11      	adds	r1, r2, #4
 8005048:	6019      	str	r1, [r3, #0]
 800504a:	6813      	ldr	r3, [r2, #0]
 800504c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005050:	2301      	movs	r3, #1
 8005052:	e0a3      	b.n	800519c <_printf_i+0x1dc>
 8005054:	f011 0f40 	tst.w	r1, #64	; 0x40
 8005058:	f102 0104 	add.w	r1, r2, #4
 800505c:	6019      	str	r1, [r3, #0]
 800505e:	d0d7      	beq.n	8005010 <_printf_i+0x50>
 8005060:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005064:	2b00      	cmp	r3, #0
 8005066:	da03      	bge.n	8005070 <_printf_i+0xb0>
 8005068:	222d      	movs	r2, #45	; 0x2d
 800506a:	425b      	negs	r3, r3
 800506c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005070:	4962      	ldr	r1, [pc, #392]	; (80051fc <_printf_i+0x23c>)
 8005072:	220a      	movs	r2, #10
 8005074:	e017      	b.n	80050a6 <_printf_i+0xe6>
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800507e:	d003      	beq.n	8005088 <_printf_i+0xc8>
 8005080:	1d08      	adds	r0, r1, #4
 8005082:	6018      	str	r0, [r3, #0]
 8005084:	680b      	ldr	r3, [r1, #0]
 8005086:	e006      	b.n	8005096 <_printf_i+0xd6>
 8005088:	f010 0f40 	tst.w	r0, #64	; 0x40
 800508c:	f101 0004 	add.w	r0, r1, #4
 8005090:	6018      	str	r0, [r3, #0]
 8005092:	d0f7      	beq.n	8005084 <_printf_i+0xc4>
 8005094:	880b      	ldrh	r3, [r1, #0]
 8005096:	2a6f      	cmp	r2, #111	; 0x6f
 8005098:	bf14      	ite	ne
 800509a:	220a      	movne	r2, #10
 800509c:	2208      	moveq	r2, #8
 800509e:	4957      	ldr	r1, [pc, #348]	; (80051fc <_printf_i+0x23c>)
 80050a0:	2000      	movs	r0, #0
 80050a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80050a6:	6865      	ldr	r5, [r4, #4]
 80050a8:	2d00      	cmp	r5, #0
 80050aa:	60a5      	str	r5, [r4, #8]
 80050ac:	f2c0 809c 	blt.w	80051e8 <_printf_i+0x228>
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	f020 0004 	bic.w	r0, r0, #4
 80050b6:	6020      	str	r0, [r4, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d13f      	bne.n	800513c <_printf_i+0x17c>
 80050bc:	2d00      	cmp	r5, #0
 80050be:	f040 8095 	bne.w	80051ec <_printf_i+0x22c>
 80050c2:	4675      	mov	r5, lr
 80050c4:	2a08      	cmp	r2, #8
 80050c6:	d10b      	bne.n	80050e0 <_printf_i+0x120>
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	07da      	lsls	r2, r3, #31
 80050cc:	d508      	bpl.n	80050e0 <_printf_i+0x120>
 80050ce:	6923      	ldr	r3, [r4, #16]
 80050d0:	6862      	ldr	r2, [r4, #4]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	bfde      	ittt	le
 80050d6:	2330      	movle	r3, #48	; 0x30
 80050d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050e0:	ebae 0305 	sub.w	r3, lr, r5
 80050e4:	6123      	str	r3, [r4, #16]
 80050e6:	f8cd 8000 	str.w	r8, [sp]
 80050ea:	463b      	mov	r3, r7
 80050ec:	aa03      	add	r2, sp, #12
 80050ee:	4621      	mov	r1, r4
 80050f0:	4630      	mov	r0, r6
 80050f2:	f7ff feed 	bl	8004ed0 <_printf_common>
 80050f6:	3001      	adds	r0, #1
 80050f8:	d155      	bne.n	80051a6 <_printf_i+0x1e6>
 80050fa:	f04f 30ff 	mov.w	r0, #4294967295
 80050fe:	b005      	add	sp, #20
 8005100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005104:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005108:	493c      	ldr	r1, [pc, #240]	; (80051fc <_printf_i+0x23c>)
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	6818      	ldr	r0, [r3, #0]
 800510e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005112:	f100 0504 	add.w	r5, r0, #4
 8005116:	601d      	str	r5, [r3, #0]
 8005118:	d001      	beq.n	800511e <_printf_i+0x15e>
 800511a:	6803      	ldr	r3, [r0, #0]
 800511c:	e002      	b.n	8005124 <_printf_i+0x164>
 800511e:	0655      	lsls	r5, r2, #25
 8005120:	d5fb      	bpl.n	800511a <_printf_i+0x15a>
 8005122:	8803      	ldrh	r3, [r0, #0]
 8005124:	07d0      	lsls	r0, r2, #31
 8005126:	bf44      	itt	mi
 8005128:	f042 0220 	orrmi.w	r2, r2, #32
 800512c:	6022      	strmi	r2, [r4, #0]
 800512e:	b91b      	cbnz	r3, 8005138 <_printf_i+0x178>
 8005130:	6822      	ldr	r2, [r4, #0]
 8005132:	f022 0220 	bic.w	r2, r2, #32
 8005136:	6022      	str	r2, [r4, #0]
 8005138:	2210      	movs	r2, #16
 800513a:	e7b1      	b.n	80050a0 <_printf_i+0xe0>
 800513c:	4675      	mov	r5, lr
 800513e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005142:	fb02 3310 	mls	r3, r2, r0, r3
 8005146:	5ccb      	ldrb	r3, [r1, r3]
 8005148:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800514c:	4603      	mov	r3, r0
 800514e:	2800      	cmp	r0, #0
 8005150:	d1f5      	bne.n	800513e <_printf_i+0x17e>
 8005152:	e7b7      	b.n	80050c4 <_printf_i+0x104>
 8005154:	6808      	ldr	r0, [r1, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	f010 0f80 	tst.w	r0, #128	; 0x80
 800515c:	6949      	ldr	r1, [r1, #20]
 800515e:	d004      	beq.n	800516a <_printf_i+0x1aa>
 8005160:	1d10      	adds	r0, r2, #4
 8005162:	6018      	str	r0, [r3, #0]
 8005164:	6813      	ldr	r3, [r2, #0]
 8005166:	6019      	str	r1, [r3, #0]
 8005168:	e007      	b.n	800517a <_printf_i+0x1ba>
 800516a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800516e:	f102 0004 	add.w	r0, r2, #4
 8005172:	6018      	str	r0, [r3, #0]
 8005174:	6813      	ldr	r3, [r2, #0]
 8005176:	d0f6      	beq.n	8005166 <_printf_i+0x1a6>
 8005178:	8019      	strh	r1, [r3, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	4675      	mov	r5, lr
 800517e:	6123      	str	r3, [r4, #16]
 8005180:	e7b1      	b.n	80050e6 <_printf_i+0x126>
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	1d11      	adds	r1, r2, #4
 8005186:	6019      	str	r1, [r3, #0]
 8005188:	6815      	ldr	r5, [r2, #0]
 800518a:	2100      	movs	r1, #0
 800518c:	6862      	ldr	r2, [r4, #4]
 800518e:	4628      	mov	r0, r5
 8005190:	f000 f836 	bl	8005200 <memchr>
 8005194:	b108      	cbz	r0, 800519a <_printf_i+0x1da>
 8005196:	1b40      	subs	r0, r0, r5
 8005198:	6060      	str	r0, [r4, #4]
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	2300      	movs	r3, #0
 80051a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a4:	e79f      	b.n	80050e6 <_printf_i+0x126>
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	462a      	mov	r2, r5
 80051aa:	4639      	mov	r1, r7
 80051ac:	4630      	mov	r0, r6
 80051ae:	47c0      	blx	r8
 80051b0:	3001      	adds	r0, #1
 80051b2:	d0a2      	beq.n	80050fa <_printf_i+0x13a>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	079b      	lsls	r3, r3, #30
 80051b8:	d507      	bpl.n	80051ca <_printf_i+0x20a>
 80051ba:	2500      	movs	r5, #0
 80051bc:	f104 0919 	add.w	r9, r4, #25
 80051c0:	68e3      	ldr	r3, [r4, #12]
 80051c2:	9a03      	ldr	r2, [sp, #12]
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	429d      	cmp	r5, r3
 80051c8:	db05      	blt.n	80051d6 <_printf_i+0x216>
 80051ca:	68e0      	ldr	r0, [r4, #12]
 80051cc:	9b03      	ldr	r3, [sp, #12]
 80051ce:	4298      	cmp	r0, r3
 80051d0:	bfb8      	it	lt
 80051d2:	4618      	movlt	r0, r3
 80051d4:	e793      	b.n	80050fe <_printf_i+0x13e>
 80051d6:	2301      	movs	r3, #1
 80051d8:	464a      	mov	r2, r9
 80051da:	4639      	mov	r1, r7
 80051dc:	4630      	mov	r0, r6
 80051de:	47c0      	blx	r8
 80051e0:	3001      	adds	r0, #1
 80051e2:	d08a      	beq.n	80050fa <_printf_i+0x13a>
 80051e4:	3501      	adds	r5, #1
 80051e6:	e7eb      	b.n	80051c0 <_printf_i+0x200>
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1a7      	bne.n	800513c <_printf_i+0x17c>
 80051ec:	780b      	ldrb	r3, [r1, #0]
 80051ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051f6:	e765      	b.n	80050c4 <_printf_i+0x104>
 80051f8:	080054d2 	.word	0x080054d2
 80051fc:	080054c1 	.word	0x080054c1

08005200 <memchr>:
 8005200:	b510      	push	{r4, lr}
 8005202:	b2c9      	uxtb	r1, r1
 8005204:	4402      	add	r2, r0
 8005206:	4290      	cmp	r0, r2
 8005208:	4603      	mov	r3, r0
 800520a:	d101      	bne.n	8005210 <memchr+0x10>
 800520c:	2000      	movs	r0, #0
 800520e:	bd10      	pop	{r4, pc}
 8005210:	781c      	ldrb	r4, [r3, #0]
 8005212:	3001      	adds	r0, #1
 8005214:	428c      	cmp	r4, r1
 8005216:	d1f6      	bne.n	8005206 <memchr+0x6>
 8005218:	4618      	mov	r0, r3
 800521a:	bd10      	pop	{r4, pc}

0800521c <memcpy>:
 800521c:	b510      	push	{r4, lr}
 800521e:	1e43      	subs	r3, r0, #1
 8005220:	440a      	add	r2, r1
 8005222:	4291      	cmp	r1, r2
 8005224:	d100      	bne.n	8005228 <memcpy+0xc>
 8005226:	bd10      	pop	{r4, pc}
 8005228:	f811 4b01 	ldrb.w	r4, [r1], #1
 800522c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005230:	e7f7      	b.n	8005222 <memcpy+0x6>

08005232 <memmove>:
 8005232:	4288      	cmp	r0, r1
 8005234:	b510      	push	{r4, lr}
 8005236:	eb01 0302 	add.w	r3, r1, r2
 800523a:	d803      	bhi.n	8005244 <memmove+0x12>
 800523c:	1e42      	subs	r2, r0, #1
 800523e:	4299      	cmp	r1, r3
 8005240:	d10c      	bne.n	800525c <memmove+0x2a>
 8005242:	bd10      	pop	{r4, pc}
 8005244:	4298      	cmp	r0, r3
 8005246:	d2f9      	bcs.n	800523c <memmove+0xa>
 8005248:	1881      	adds	r1, r0, r2
 800524a:	1ad2      	subs	r2, r2, r3
 800524c:	42d3      	cmn	r3, r2
 800524e:	d100      	bne.n	8005252 <memmove+0x20>
 8005250:	bd10      	pop	{r4, pc}
 8005252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005256:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800525a:	e7f7      	b.n	800524c <memmove+0x1a>
 800525c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005260:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005264:	e7eb      	b.n	800523e <memmove+0xc>
	...

08005268 <_free_r>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4605      	mov	r5, r0
 800526c:	2900      	cmp	r1, #0
 800526e:	d043      	beq.n	80052f8 <_free_r+0x90>
 8005270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005274:	1f0c      	subs	r4, r1, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	bfb8      	it	lt
 800527a:	18e4      	addlt	r4, r4, r3
 800527c:	f000 f8d4 	bl	8005428 <__malloc_lock>
 8005280:	4a1e      	ldr	r2, [pc, #120]	; (80052fc <_free_r+0x94>)
 8005282:	6813      	ldr	r3, [r2, #0]
 8005284:	4610      	mov	r0, r2
 8005286:	b933      	cbnz	r3, 8005296 <_free_r+0x2e>
 8005288:	6063      	str	r3, [r4, #4]
 800528a:	6014      	str	r4, [r2, #0]
 800528c:	4628      	mov	r0, r5
 800528e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005292:	f000 b8ca 	b.w	800542a <__malloc_unlock>
 8005296:	42a3      	cmp	r3, r4
 8005298:	d90b      	bls.n	80052b2 <_free_r+0x4a>
 800529a:	6821      	ldr	r1, [r4, #0]
 800529c:	1862      	adds	r2, r4, r1
 800529e:	4293      	cmp	r3, r2
 80052a0:	bf01      	itttt	eq
 80052a2:	681a      	ldreq	r2, [r3, #0]
 80052a4:	685b      	ldreq	r3, [r3, #4]
 80052a6:	1852      	addeq	r2, r2, r1
 80052a8:	6022      	streq	r2, [r4, #0]
 80052aa:	6063      	str	r3, [r4, #4]
 80052ac:	6004      	str	r4, [r0, #0]
 80052ae:	e7ed      	b.n	800528c <_free_r+0x24>
 80052b0:	4613      	mov	r3, r2
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	b10a      	cbz	r2, 80052ba <_free_r+0x52>
 80052b6:	42a2      	cmp	r2, r4
 80052b8:	d9fa      	bls.n	80052b0 <_free_r+0x48>
 80052ba:	6819      	ldr	r1, [r3, #0]
 80052bc:	1858      	adds	r0, r3, r1
 80052be:	42a0      	cmp	r0, r4
 80052c0:	d10b      	bne.n	80052da <_free_r+0x72>
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	4401      	add	r1, r0
 80052c6:	1858      	adds	r0, r3, r1
 80052c8:	4282      	cmp	r2, r0
 80052ca:	6019      	str	r1, [r3, #0]
 80052cc:	d1de      	bne.n	800528c <_free_r+0x24>
 80052ce:	6810      	ldr	r0, [r2, #0]
 80052d0:	6852      	ldr	r2, [r2, #4]
 80052d2:	4401      	add	r1, r0
 80052d4:	6019      	str	r1, [r3, #0]
 80052d6:	605a      	str	r2, [r3, #4]
 80052d8:	e7d8      	b.n	800528c <_free_r+0x24>
 80052da:	d902      	bls.n	80052e2 <_free_r+0x7a>
 80052dc:	230c      	movs	r3, #12
 80052de:	602b      	str	r3, [r5, #0]
 80052e0:	e7d4      	b.n	800528c <_free_r+0x24>
 80052e2:	6820      	ldr	r0, [r4, #0]
 80052e4:	1821      	adds	r1, r4, r0
 80052e6:	428a      	cmp	r2, r1
 80052e8:	bf01      	itttt	eq
 80052ea:	6811      	ldreq	r1, [r2, #0]
 80052ec:	6852      	ldreq	r2, [r2, #4]
 80052ee:	1809      	addeq	r1, r1, r0
 80052f0:	6021      	streq	r1, [r4, #0]
 80052f2:	6062      	str	r2, [r4, #4]
 80052f4:	605c      	str	r4, [r3, #4]
 80052f6:	e7c9      	b.n	800528c <_free_r+0x24>
 80052f8:	bd38      	pop	{r3, r4, r5, pc}
 80052fa:	bf00      	nop
 80052fc:	20000090 	.word	0x20000090

08005300 <_malloc_r>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	1ccd      	adds	r5, r1, #3
 8005304:	f025 0503 	bic.w	r5, r5, #3
 8005308:	3508      	adds	r5, #8
 800530a:	2d0c      	cmp	r5, #12
 800530c:	bf38      	it	cc
 800530e:	250c      	movcc	r5, #12
 8005310:	2d00      	cmp	r5, #0
 8005312:	4606      	mov	r6, r0
 8005314:	db01      	blt.n	800531a <_malloc_r+0x1a>
 8005316:	42a9      	cmp	r1, r5
 8005318:	d903      	bls.n	8005322 <_malloc_r+0x22>
 800531a:	230c      	movs	r3, #12
 800531c:	6033      	str	r3, [r6, #0]
 800531e:	2000      	movs	r0, #0
 8005320:	bd70      	pop	{r4, r5, r6, pc}
 8005322:	f000 f881 	bl	8005428 <__malloc_lock>
 8005326:	4a23      	ldr	r2, [pc, #140]	; (80053b4 <_malloc_r+0xb4>)
 8005328:	6814      	ldr	r4, [r2, #0]
 800532a:	4621      	mov	r1, r4
 800532c:	b991      	cbnz	r1, 8005354 <_malloc_r+0x54>
 800532e:	4c22      	ldr	r4, [pc, #136]	; (80053b8 <_malloc_r+0xb8>)
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	b91b      	cbnz	r3, 800533c <_malloc_r+0x3c>
 8005334:	4630      	mov	r0, r6
 8005336:	f000 f867 	bl	8005408 <_sbrk_r>
 800533a:	6020      	str	r0, [r4, #0]
 800533c:	4629      	mov	r1, r5
 800533e:	4630      	mov	r0, r6
 8005340:	f000 f862 	bl	8005408 <_sbrk_r>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d126      	bne.n	8005396 <_malloc_r+0x96>
 8005348:	230c      	movs	r3, #12
 800534a:	4630      	mov	r0, r6
 800534c:	6033      	str	r3, [r6, #0]
 800534e:	f000 f86c 	bl	800542a <__malloc_unlock>
 8005352:	e7e4      	b.n	800531e <_malloc_r+0x1e>
 8005354:	680b      	ldr	r3, [r1, #0]
 8005356:	1b5b      	subs	r3, r3, r5
 8005358:	d41a      	bmi.n	8005390 <_malloc_r+0x90>
 800535a:	2b0b      	cmp	r3, #11
 800535c:	d90f      	bls.n	800537e <_malloc_r+0x7e>
 800535e:	600b      	str	r3, [r1, #0]
 8005360:	18cc      	adds	r4, r1, r3
 8005362:	50cd      	str	r5, [r1, r3]
 8005364:	4630      	mov	r0, r6
 8005366:	f000 f860 	bl	800542a <__malloc_unlock>
 800536a:	f104 000b 	add.w	r0, r4, #11
 800536e:	1d23      	adds	r3, r4, #4
 8005370:	f020 0007 	bic.w	r0, r0, #7
 8005374:	1ac3      	subs	r3, r0, r3
 8005376:	d01b      	beq.n	80053b0 <_malloc_r+0xb0>
 8005378:	425a      	negs	r2, r3
 800537a:	50e2      	str	r2, [r4, r3]
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	428c      	cmp	r4, r1
 8005380:	bf0b      	itete	eq
 8005382:	6863      	ldreq	r3, [r4, #4]
 8005384:	684b      	ldrne	r3, [r1, #4]
 8005386:	6013      	streq	r3, [r2, #0]
 8005388:	6063      	strne	r3, [r4, #4]
 800538a:	bf18      	it	ne
 800538c:	460c      	movne	r4, r1
 800538e:	e7e9      	b.n	8005364 <_malloc_r+0x64>
 8005390:	460c      	mov	r4, r1
 8005392:	6849      	ldr	r1, [r1, #4]
 8005394:	e7ca      	b.n	800532c <_malloc_r+0x2c>
 8005396:	1cc4      	adds	r4, r0, #3
 8005398:	f024 0403 	bic.w	r4, r4, #3
 800539c:	42a0      	cmp	r0, r4
 800539e:	d005      	beq.n	80053ac <_malloc_r+0xac>
 80053a0:	1a21      	subs	r1, r4, r0
 80053a2:	4630      	mov	r0, r6
 80053a4:	f000 f830 	bl	8005408 <_sbrk_r>
 80053a8:	3001      	adds	r0, #1
 80053aa:	d0cd      	beq.n	8005348 <_malloc_r+0x48>
 80053ac:	6025      	str	r5, [r4, #0]
 80053ae:	e7d9      	b.n	8005364 <_malloc_r+0x64>
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
 80053b2:	bf00      	nop
 80053b4:	20000090 	.word	0x20000090
 80053b8:	20000094 	.word	0x20000094

080053bc <_realloc_r>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	4607      	mov	r7, r0
 80053c0:	4614      	mov	r4, r2
 80053c2:	460e      	mov	r6, r1
 80053c4:	b921      	cbnz	r1, 80053d0 <_realloc_r+0x14>
 80053c6:	4611      	mov	r1, r2
 80053c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80053cc:	f7ff bf98 	b.w	8005300 <_malloc_r>
 80053d0:	b922      	cbnz	r2, 80053dc <_realloc_r+0x20>
 80053d2:	f7ff ff49 	bl	8005268 <_free_r>
 80053d6:	4625      	mov	r5, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053dc:	f000 f826 	bl	800542c <_malloc_usable_size_r>
 80053e0:	4284      	cmp	r4, r0
 80053e2:	d90f      	bls.n	8005404 <_realloc_r+0x48>
 80053e4:	4621      	mov	r1, r4
 80053e6:	4638      	mov	r0, r7
 80053e8:	f7ff ff8a 	bl	8005300 <_malloc_r>
 80053ec:	4605      	mov	r5, r0
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d0f2      	beq.n	80053d8 <_realloc_r+0x1c>
 80053f2:	4631      	mov	r1, r6
 80053f4:	4622      	mov	r2, r4
 80053f6:	f7ff ff11 	bl	800521c <memcpy>
 80053fa:	4631      	mov	r1, r6
 80053fc:	4638      	mov	r0, r7
 80053fe:	f7ff ff33 	bl	8005268 <_free_r>
 8005402:	e7e9      	b.n	80053d8 <_realloc_r+0x1c>
 8005404:	4635      	mov	r5, r6
 8005406:	e7e7      	b.n	80053d8 <_realloc_r+0x1c>

08005408 <_sbrk_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	2300      	movs	r3, #0
 800540c:	4c05      	ldr	r4, [pc, #20]	; (8005424 <_sbrk_r+0x1c>)
 800540e:	4605      	mov	r5, r0
 8005410:	4608      	mov	r0, r1
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	f7ff fb5e 	bl	8004ad4 <_sbrk>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_sbrk_r+0x1a>
 800541c:	6823      	ldr	r3, [r4, #0]
 800541e:	b103      	cbz	r3, 8005422 <_sbrk_r+0x1a>
 8005420:	602b      	str	r3, [r5, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	200001b0 	.word	0x200001b0

08005428 <__malloc_lock>:
 8005428:	4770      	bx	lr

0800542a <__malloc_unlock>:
 800542a:	4770      	bx	lr

0800542c <_malloc_usable_size_r>:
 800542c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8005430:	2800      	cmp	r0, #0
 8005432:	f1a0 0004 	sub.w	r0, r0, #4
 8005436:	bfbc      	itt	lt
 8005438:	580b      	ldrlt	r3, [r1, r0]
 800543a:	18c0      	addlt	r0, r0, r3
 800543c:	4770      	bx	lr
	...

08005440 <_init>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr

0800544c <_fini>:
 800544c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544e:	bf00      	nop
 8005450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005452:	bc08      	pop	{r3}
 8005454:	469e      	mov	lr, r3
 8005456:	4770      	bx	lr
